
Make_lib_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bad8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  0800bc78  0800bc78  0001bc78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3d8  0800c3d8  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3d8  0800c3d8  0001c3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3e0  0800c3e0  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3e0  0800c3e0  0001c3e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3e4  0800c3e4  0001c3e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800c3e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052fc  200000c0  0800c4a8  000200c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200053bc  0800c4a8  000253bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000270fb  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005ece  00000000  00000000  000471eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c20  00000000  00000000  0004d0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019f8  00000000  00000000  0004ece0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cf4f  00000000  00000000  000506d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ae3e  00000000  00000000  0006d627  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c2c2  00000000  00000000  00088465  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00124727  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007af8  00000000  00000000  001247a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c0 	.word	0x200000c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bc60 	.word	0x0800bc60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c4 	.word	0x200000c4
 80001dc:	0800bc60 	.word	0x0800bc60

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b972 	b.w	8000e88 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9e08      	ldr	r6, [sp, #32]
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	4688      	mov	r8, r1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d14b      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bca:	428a      	cmp	r2, r1
 8000bcc:	4615      	mov	r5, r2
 8000bce:	d967      	bls.n	8000ca0 <__udivmoddi4+0xe4>
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	b14a      	cbz	r2, 8000bea <__udivmoddi4+0x2e>
 8000bd6:	f1c2 0720 	rsb	r7, r2, #32
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	fa20 f707 	lsr.w	r7, r0, r7
 8000be2:	4095      	lsls	r5, r2
 8000be4:	ea47 0803 	orr.w	r8, r7, r3
 8000be8:	4094      	lsls	r4, r2
 8000bea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bf4:	fa1f fc85 	uxth.w	ip, r5
 8000bf8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bfc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c00:	fb07 f10c 	mul.w	r1, r7, ip
 8000c04:	4299      	cmp	r1, r3
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x60>
 8000c08:	18eb      	adds	r3, r5, r3
 8000c0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c0e:	f080 811b 	bcs.w	8000e48 <__udivmoddi4+0x28c>
 8000c12:	4299      	cmp	r1, r3
 8000c14:	f240 8118 	bls.w	8000e48 <__udivmoddi4+0x28c>
 8000c18:	3f02      	subs	r7, #2
 8000c1a:	442b      	add	r3, r5
 8000c1c:	1a5b      	subs	r3, r3, r1
 8000c1e:	b2a4      	uxth	r4, r4
 8000c20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c30:	45a4      	cmp	ip, r4
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x8c>
 8000c34:	192c      	adds	r4, r5, r4
 8000c36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3a:	f080 8107 	bcs.w	8000e4c <__udivmoddi4+0x290>
 8000c3e:	45a4      	cmp	ip, r4
 8000c40:	f240 8104 	bls.w	8000e4c <__udivmoddi4+0x290>
 8000c44:	3802      	subs	r0, #2
 8000c46:	442c      	add	r4, r5
 8000c48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c4c:	eba4 040c 	sub.w	r4, r4, ip
 8000c50:	2700      	movs	r7, #0
 8000c52:	b11e      	cbz	r6, 8000c5c <__udivmoddi4+0xa0>
 8000c54:	40d4      	lsrs	r4, r2
 8000c56:	2300      	movs	r3, #0
 8000c58:	e9c6 4300 	strd	r4, r3, [r6]
 8000c5c:	4639      	mov	r1, r7
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0xbe>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f000 80eb 	beq.w	8000e42 <__udivmoddi4+0x286>
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c72:	4638      	mov	r0, r7
 8000c74:	4639      	mov	r1, r7
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	fab3 f783 	clz	r7, r3
 8000c7e:	2f00      	cmp	r7, #0
 8000c80:	d147      	bne.n	8000d12 <__udivmoddi4+0x156>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xd0>
 8000c86:	4282      	cmp	r2, r0
 8000c88:	f200 80fa 	bhi.w	8000e80 <__udivmoddi4+0x2c4>
 8000c8c:	1a84      	subs	r4, r0, r2
 8000c8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	4698      	mov	r8, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d0e0      	beq.n	8000c5c <__udivmoddi4+0xa0>
 8000c9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c9e:	e7dd      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000ca0:	b902      	cbnz	r2, 8000ca4 <__udivmoddi4+0xe8>
 8000ca2:	deff      	udf	#255	; 0xff
 8000ca4:	fab2 f282 	clz	r2, r2
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	f040 808f 	bne.w	8000dcc <__udivmoddi4+0x210>
 8000cae:	1b49      	subs	r1, r1, r5
 8000cb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb4:	fa1f f885 	uxth.w	r8, r5
 8000cb8:	2701      	movs	r7, #1
 8000cba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000ccc:	4299      	cmp	r1, r3
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x124>
 8000cd0:	18eb      	adds	r3, r5, r3
 8000cd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x122>
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	f200 80cd 	bhi.w	8000e78 <__udivmoddi4+0x2bc>
 8000cde:	4684      	mov	ip, r0
 8000ce0:	1a59      	subs	r1, r3, r1
 8000ce2:	b2a3      	uxth	r3, r4
 8000ce4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cf0:	fb08 f800 	mul.w	r8, r8, r0
 8000cf4:	45a0      	cmp	r8, r4
 8000cf6:	d907      	bls.n	8000d08 <__udivmoddi4+0x14c>
 8000cf8:	192c      	adds	r4, r5, r4
 8000cfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x14a>
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	f200 80b6 	bhi.w	8000e72 <__udivmoddi4+0x2b6>
 8000d06:	4618      	mov	r0, r3
 8000d08:	eba4 0408 	sub.w	r4, r4, r8
 8000d0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d10:	e79f      	b.n	8000c52 <__udivmoddi4+0x96>
 8000d12:	f1c7 0c20 	rsb	ip, r7, #32
 8000d16:	40bb      	lsls	r3, r7
 8000d18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d20:	fa01 f407 	lsl.w	r4, r1, r7
 8000d24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d30:	4325      	orrs	r5, r4
 8000d32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d36:	0c2c      	lsrs	r4, r5, #16
 8000d38:	fb08 3319 	mls	r3, r8, r9, r3
 8000d3c:	fa1f fa8e 	uxth.w	sl, lr
 8000d40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d44:	fb09 f40a 	mul.w	r4, r9, sl
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d52:	d90b      	bls.n	8000d6c <__udivmoddi4+0x1b0>
 8000d54:	eb1e 0303 	adds.w	r3, lr, r3
 8000d58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d5c:	f080 8087 	bcs.w	8000e6e <__udivmoddi4+0x2b2>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f240 8084 	bls.w	8000e6e <__udivmoddi4+0x2b2>
 8000d66:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6a:	4473      	add	r3, lr
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	b2ad      	uxth	r5, r5
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3310 	mls	r3, r8, r0, r3
 8000d78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d80:	45a2      	cmp	sl, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1da>
 8000d84:	eb1e 0404 	adds.w	r4, lr, r4
 8000d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8c:	d26b      	bcs.n	8000e66 <__udivmoddi4+0x2aa>
 8000d8e:	45a2      	cmp	sl, r4
 8000d90:	d969      	bls.n	8000e66 <__udivmoddi4+0x2aa>
 8000d92:	3802      	subs	r0, #2
 8000d94:	4474      	add	r4, lr
 8000d96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d9e:	eba4 040a 	sub.w	r4, r4, sl
 8000da2:	454c      	cmp	r4, r9
 8000da4:	46c2      	mov	sl, r8
 8000da6:	464b      	mov	r3, r9
 8000da8:	d354      	bcc.n	8000e54 <__udivmoddi4+0x298>
 8000daa:	d051      	beq.n	8000e50 <__udivmoddi4+0x294>
 8000dac:	2e00      	cmp	r6, #0
 8000dae:	d069      	beq.n	8000e84 <__udivmoddi4+0x2c8>
 8000db0:	ebb1 050a 	subs.w	r5, r1, sl
 8000db4:	eb64 0403 	sbc.w	r4, r4, r3
 8000db8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dbc:	40fd      	lsrs	r5, r7
 8000dbe:	40fc      	lsrs	r4, r7
 8000dc0:	ea4c 0505 	orr.w	r5, ip, r5
 8000dc4:	e9c6 5400 	strd	r5, r4, [r6]
 8000dc8:	2700      	movs	r7, #0
 8000dca:	e747      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f703 	lsr.w	r7, r0, r3
 8000dd4:	4095      	lsls	r5, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	fa21 f303 	lsr.w	r3, r1, r3
 8000dde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de2:	4338      	orrs	r0, r7
 8000de4:	0c01      	lsrs	r1, r0, #16
 8000de6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dea:	fa1f f885 	uxth.w	r8, r5
 8000dee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000df2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df6:	fb07 f308 	mul.w	r3, r7, r8
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x256>
 8000e02:	1869      	adds	r1, r5, r1
 8000e04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e08:	d22f      	bcs.n	8000e6a <__udivmoddi4+0x2ae>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d92d      	bls.n	8000e6a <__udivmoddi4+0x2ae>
 8000e0e:	3f02      	subs	r7, #2
 8000e10:	4429      	add	r1, r5
 8000e12:	1acb      	subs	r3, r1, r3
 8000e14:	b281      	uxth	r1, r0
 8000e16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb00 f308 	mul.w	r3, r0, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x27e>
 8000e2a:	1869      	adds	r1, r5, r1
 8000e2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e30:	d217      	bcs.n	8000e62 <__udivmoddi4+0x2a6>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d915      	bls.n	8000e62 <__udivmoddi4+0x2a6>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4429      	add	r1, r5
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e40:	e73b      	b.n	8000cba <__udivmoddi4+0xfe>
 8000e42:	4637      	mov	r7, r6
 8000e44:	4630      	mov	r0, r6
 8000e46:	e709      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000e48:	4607      	mov	r7, r0
 8000e4a:	e6e7      	b.n	8000c1c <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fb      	b.n	8000c48 <__udivmoddi4+0x8c>
 8000e50:	4541      	cmp	r1, r8
 8000e52:	d2ab      	bcs.n	8000dac <__udivmoddi4+0x1f0>
 8000e54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e58:	eb69 020e 	sbc.w	r2, r9, lr
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	4613      	mov	r3, r2
 8000e60:	e7a4      	b.n	8000dac <__udivmoddi4+0x1f0>
 8000e62:	4660      	mov	r0, ip
 8000e64:	e7e9      	b.n	8000e3a <__udivmoddi4+0x27e>
 8000e66:	4618      	mov	r0, r3
 8000e68:	e795      	b.n	8000d96 <__udivmoddi4+0x1da>
 8000e6a:	4667      	mov	r7, ip
 8000e6c:	e7d1      	b.n	8000e12 <__udivmoddi4+0x256>
 8000e6e:	4681      	mov	r9, r0
 8000e70:	e77c      	b.n	8000d6c <__udivmoddi4+0x1b0>
 8000e72:	3802      	subs	r0, #2
 8000e74:	442c      	add	r4, r5
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0x14c>
 8000e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e7c:	442b      	add	r3, r5
 8000e7e:	e72f      	b.n	8000ce0 <__udivmoddi4+0x124>
 8000e80:	4638      	mov	r0, r7
 8000e82:	e708      	b.n	8000c96 <__udivmoddi4+0xda>
 8000e84:	4637      	mov	r7, r6
 8000e86:	e6e9      	b.n	8000c5c <__udivmoddi4+0xa0>

08000e88 <__aeabi_idiv0>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <HAL_Init>:
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <HAL_Init+0x40>)
 8000e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <HAL_Init+0x40>)
 8000ea2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <HAL_Init+0x40>)
 8000eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f000 f8fa 	bl	80010ae <HAL_NVIC_SetPriorityGrouping>
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f008 fe6a 	bl	8009b94 <HAL_InitTick>
 8000ec0:	f008 fb00 	bl	80094c4 <HAL_MspInit>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023c00 	.word	0x40023c00

08000ed0 <HAL_IncTick>:
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	200040f8 	.word	0x200040f8

08000ef8 <HAL_GetTick>:
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	200040f8 	.word	0x200040f8

08000f10 <__NVIC_SetPriorityGrouping>:
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_GetPriorityGrouping>:
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <__NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_EnableIRQ>:
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	db0b      	blt.n	8000f9e <__NVIC_EnableIRQ+0x2a>
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	f003 021f 	and.w	r2, r3, #31
 8000f8c:	4907      	ldr	r1, [pc, #28]	; (8000fac <__NVIC_EnableIRQ+0x38>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	095b      	lsrs	r3, r3, #5
 8000f94:	2001      	movs	r0, #1
 8000f96:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000e100 	.word	0xe000e100

08000fb0 <__NVIC_DisableIRQ>:
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db10      	blt.n	8000fe4 <__NVIC_DisableIRQ+0x34>
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f003 021f 	and.w	r2, r3, #31
 8000fc8:	4909      	ldr	r1, [pc, #36]	; (8000ff0 <__NVIC_DisableIRQ+0x40>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	095b      	lsrs	r3, r3, #5
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd6:	3320      	adds	r3, #32
 8000fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000fdc:	f3bf 8f4f 	dsb	sy
 8000fe0:	f3bf 8f6f 	isb	sy
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100

08000ff4 <__NVIC_SetPriority>:
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <__NVIC_SetPriority+0x2a>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	490c      	ldr	r1, [pc, #48]	; (8001040 <__NVIC_SetPriority+0x4c>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	440b      	add	r3, r1
 8001018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800101c:	e00a      	b.n	8001034 <__NVIC_SetPriority+0x40>
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	; (8001044 <__NVIC_SetPriority+0x50>)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	3b04      	subs	r3, #4
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	440b      	add	r3, r1
 8001032:	761a      	strb	r2, [r3, #24]
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_EncodePriority>:
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	61fb      	str	r3, [r7, #28]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	2b04      	cmp	r3, #4
 8001064:	bf28      	it	cs
 8001066:	2304      	movcs	r3, #4
 8001068:	61bb      	str	r3, [r7, #24]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3304      	adds	r3, #4
 800106e:	2b06      	cmp	r3, #6
 8001070:	d902      	bls.n	8001078 <NVIC_EncodePriority+0x30>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3b03      	subs	r3, #3
 8001076:	e000      	b.n	800107a <NVIC_EncodePriority+0x32>
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43d9      	mvns	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	400b      	ands	r3, r1
 80010a0:	4313      	orrs	r3, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <HAL_NVIC_SetPriorityGrouping>:
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ff2a 	bl	8000f10 <__NVIC_SetPriorityGrouping>
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_NVIC_SetPriority>:
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	f7ff ff3f 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 80010da:	6178      	str	r0, [r7, #20]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	68b9      	ldr	r1, [r7, #8]
 80010e0:	6978      	ldr	r0, [r7, #20]
 80010e2:	f7ff ffb1 	bl	8001048 <NVIC_EncodePriority>
 80010e6:	4602      	mov	r2, r0
 80010e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff80 	bl	8000ff4 <__NVIC_SetPriority>
 80010f4:	bf00      	nop
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_NVIC_EnableIRQ>:
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff32 	bl	8000f74 <__NVIC_EnableIRQ>
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_NVIC_DisableIRQ>:
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff42 	bl	8000fb0 <__NVIC_DisableIRQ>
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_DMA_Abort_IT>:
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d004      	beq.n	8001152 <HAL_DMA_Abort_IT+0x1e>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2280      	movs	r2, #128	; 0x80
 800114c:	655a      	str	r2, [r3, #84]	; 0x54
 800114e:	2301      	movs	r3, #1
 8001150:	e00c      	b.n	800116c <HAL_DMA_Abort_IT+0x38>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2205      	movs	r2, #5
 8001156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0201 	bic.w	r2, r2, #1
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	2300      	movs	r3, #0
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <HAL_DMA_GetState>:
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <HAL_GPIO_Init>:
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	; 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
 80011ae:	e159      	b.n	8001464 <HAL_GPIO_Init+0x2d0>
 80011b0:	2201      	movs	r2, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	f040 8148 	bne.w	800145e <HAL_GPIO_Init+0x2ca>
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x4a>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b12      	cmp	r3, #18
 80011dc:	d123      	bne.n	8001226 <HAL_GPIO_Init+0x92>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	08da      	lsrs	r2, r3, #3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3208      	adds	r2, #8
 80011e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ea:	61bb      	str	r3, [r7, #24]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	691a      	ldr	r2, [r3, #16]
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	08da      	lsrs	r2, r3, #3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3208      	adds	r2, #8
 8001220:	69b9      	ldr	r1, [r7, #24]
 8001222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	61bb      	str	r3, [r7, #24]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0203 	and.w	r2, r3, #3
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d00b      	beq.n	800127a <HAL_GPIO_Init+0xe6>
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b02      	cmp	r3, #2
 8001268:	d007      	beq.n	800127a <HAL_GPIO_Init+0xe6>
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b11      	cmp	r3, #17
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0xe6>
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b12      	cmp	r3, #18
 8001278:	d130      	bne.n	80012dc <HAL_GPIO_Init+0x148>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	61bb      	str	r3, [r7, #24]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	61bb      	str	r3, [r7, #24]
 80012b0:	2201      	movs	r2, #1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	f003 0201 	and.w	r2, r3, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	61bb      	str	r3, [r7, #24]
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	2203      	movs	r2, #3
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 80a2 	beq.w	800145e <HAL_GPIO_Init+0x2ca>
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b56      	ldr	r3, [pc, #344]	; (8001478 <HAL_GPIO_Init+0x2e4>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	4a55      	ldr	r2, [pc, #340]	; (8001478 <HAL_GPIO_Init+0x2e4>)
 8001324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001328:	6453      	str	r3, [r2, #68]	; 0x44
 800132a:	4b53      	ldr	r3, [pc, #332]	; (8001478 <HAL_GPIO_Init+0x2e4>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4a51      	ldr	r2, [pc, #324]	; (800147c <HAL_GPIO_Init+0x2e8>)
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001342:	61bb      	str	r3, [r7, #24]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a48      	ldr	r2, [pc, #288]	; (8001480 <HAL_GPIO_Init+0x2ec>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d019      	beq.n	8001396 <HAL_GPIO_Init+0x202>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a47      	ldr	r2, [pc, #284]	; (8001484 <HAL_GPIO_Init+0x2f0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d013      	beq.n	8001392 <HAL_GPIO_Init+0x1fe>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a46      	ldr	r2, [pc, #280]	; (8001488 <HAL_GPIO_Init+0x2f4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d00d      	beq.n	800138e <HAL_GPIO_Init+0x1fa>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a45      	ldr	r2, [pc, #276]	; (800148c <HAL_GPIO_Init+0x2f8>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d007      	beq.n	800138a <HAL_GPIO_Init+0x1f6>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a44      	ldr	r2, [pc, #272]	; (8001490 <HAL_GPIO_Init+0x2fc>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d101      	bne.n	8001386 <HAL_GPIO_Init+0x1f2>
 8001382:	2304      	movs	r3, #4
 8001384:	e008      	b.n	8001398 <HAL_GPIO_Init+0x204>
 8001386:	2307      	movs	r3, #7
 8001388:	e006      	b.n	8001398 <HAL_GPIO_Init+0x204>
 800138a:	2303      	movs	r3, #3
 800138c:	e004      	b.n	8001398 <HAL_GPIO_Init+0x204>
 800138e:	2302      	movs	r3, #2
 8001390:	e002      	b.n	8001398 <HAL_GPIO_Init+0x204>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <HAL_GPIO_Init+0x204>
 8001396:	2300      	movs	r3, #0
 8001398:	69fa      	ldr	r2, [r7, #28]
 800139a:	f002 0203 	and.w	r2, r2, #3
 800139e:	0092      	lsls	r2, r2, #2
 80013a0:	4093      	lsls	r3, r2
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
 80013a8:	4934      	ldr	r1, [pc, #208]	; (800147c <HAL_GPIO_Init+0x2e8>)
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	3302      	adds	r3, #2
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80013b6:	4b37      	ldr	r3, [pc, #220]	; (8001494 <HAL_GPIO_Init+0x300>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	61bb      	str	r3, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x246>
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
 80013da:	4a2e      	ldr	r2, [pc, #184]	; (8001494 <HAL_GPIO_Init+0x300>)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4b2c      	ldr	r3, [pc, #176]	; (8001494 <HAL_GPIO_Init+0x300>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	61bb      	str	r3, [r7, #24]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x270>
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
 8001404:	4a23      	ldr	r2, [pc, #140]	; (8001494 <HAL_GPIO_Init+0x300>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	6053      	str	r3, [r2, #4]
 800140a:	4b22      	ldr	r3, [pc, #136]	; (8001494 <HAL_GPIO_Init+0x300>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	61bb      	str	r3, [r7, #24]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x29a>
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	4a19      	ldr	r2, [pc, #100]	; (8001494 <HAL_GPIO_Init+0x300>)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	6093      	str	r3, [r2, #8]
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <HAL_GPIO_Init+0x300>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x2c4>
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
 8001458:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <HAL_GPIO_Init+0x300>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	60d3      	str	r3, [r2, #12]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3301      	adds	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	2b0f      	cmp	r3, #15
 8001468:	f67f aea2 	bls.w	80011b0 <HAL_GPIO_Init+0x1c>
 800146c:	bf00      	nop
 800146e:	3724      	adds	r7, #36	; 0x24
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	40023800 	.word	0x40023800
 800147c:	40013800 	.word	0x40013800
 8001480:	40020000 	.word	0x40020000
 8001484:	40020400 	.word	0x40020400
 8001488:	40020800 	.word	0x40020800
 800148c:	40020c00 	.word	0x40020c00
 8001490:	40021000 	.word	0x40021000
 8001494:	40013c00 	.word	0x40013c00

08001498 <HAL_GPIO_DeInit>:
 8001498:	b480      	push	{r7}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	e0bb      	b.n	800162c <HAL_GPIO_DeInit+0x194>
 80014b4:	2201      	movs	r2, #1
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	f040 80ab 	bne.w	8001626 <HAL_GPIO_DeInit+0x18e>
 80014d0:	4a5b      	ldr	r2, [pc, #364]	; (8001640 <HAL_GPIO_DeInit+0x1a8>)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	089b      	lsrs	r3, r3, #2
 80014d6:	3302      	adds	r3, #2
 80014d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	220f      	movs	r2, #15
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	4013      	ands	r3, r2
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a53      	ldr	r2, [pc, #332]	; (8001644 <HAL_GPIO_DeInit+0x1ac>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d019      	beq.n	800152e <HAL_GPIO_DeInit+0x96>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a52      	ldr	r2, [pc, #328]	; (8001648 <HAL_GPIO_DeInit+0x1b0>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d013      	beq.n	800152a <HAL_GPIO_DeInit+0x92>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a51      	ldr	r2, [pc, #324]	; (800164c <HAL_GPIO_DeInit+0x1b4>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d00d      	beq.n	8001526 <HAL_GPIO_DeInit+0x8e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a50      	ldr	r2, [pc, #320]	; (8001650 <HAL_GPIO_DeInit+0x1b8>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d007      	beq.n	8001522 <HAL_GPIO_DeInit+0x8a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4f      	ldr	r2, [pc, #316]	; (8001654 <HAL_GPIO_DeInit+0x1bc>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d101      	bne.n	800151e <HAL_GPIO_DeInit+0x86>
 800151a:	2304      	movs	r3, #4
 800151c:	e008      	b.n	8001530 <HAL_GPIO_DeInit+0x98>
 800151e:	2307      	movs	r3, #7
 8001520:	e006      	b.n	8001530 <HAL_GPIO_DeInit+0x98>
 8001522:	2303      	movs	r3, #3
 8001524:	e004      	b.n	8001530 <HAL_GPIO_DeInit+0x98>
 8001526:	2302      	movs	r3, #2
 8001528:	e002      	b.n	8001530 <HAL_GPIO_DeInit+0x98>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <HAL_GPIO_DeInit+0x98>
 800152e:	2300      	movs	r3, #0
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	f002 0203 	and.w	r2, r2, #3
 8001536:	0092      	lsls	r2, r2, #2
 8001538:	4093      	lsls	r3, r2
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	429a      	cmp	r2, r3
 800153e:	d132      	bne.n	80015a6 <HAL_GPIO_DeInit+0x10e>
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	220f      	movs	r2, #15
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	4a3b      	ldr	r2, [pc, #236]	; (8001640 <HAL_GPIO_DeInit+0x1a8>)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	089b      	lsrs	r3, r3, #2
 8001556:	3302      	adds	r3, #2
 8001558:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	43da      	mvns	r2, r3
 8001560:	4837      	ldr	r0, [pc, #220]	; (8001640 <HAL_GPIO_DeInit+0x1a8>)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	089b      	lsrs	r3, r3, #2
 8001566:	400a      	ands	r2, r1
 8001568:	3302      	adds	r3, #2
 800156a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800156e:	4b3a      	ldr	r3, [pc, #232]	; (8001658 <HAL_GPIO_DeInit+0x1c0>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	43db      	mvns	r3, r3
 8001576:	4938      	ldr	r1, [pc, #224]	; (8001658 <HAL_GPIO_DeInit+0x1c0>)
 8001578:	4013      	ands	r3, r2
 800157a:	600b      	str	r3, [r1, #0]
 800157c:	4b36      	ldr	r3, [pc, #216]	; (8001658 <HAL_GPIO_DeInit+0x1c0>)
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	43db      	mvns	r3, r3
 8001584:	4934      	ldr	r1, [pc, #208]	; (8001658 <HAL_GPIO_DeInit+0x1c0>)
 8001586:	4013      	ands	r3, r2
 8001588:	604b      	str	r3, [r1, #4]
 800158a:	4b33      	ldr	r3, [pc, #204]	; (8001658 <HAL_GPIO_DeInit+0x1c0>)
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	43db      	mvns	r3, r3
 8001592:	4931      	ldr	r1, [pc, #196]	; (8001658 <HAL_GPIO_DeInit+0x1c0>)
 8001594:	4013      	ands	r3, r2
 8001596:	608b      	str	r3, [r1, #8]
 8001598:	4b2f      	ldr	r3, [pc, #188]	; (8001658 <HAL_GPIO_DeInit+0x1c0>)
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43db      	mvns	r3, r3
 80015a0:	492d      	ldr	r1, [pc, #180]	; (8001658 <HAL_GPIO_DeInit+0x1c0>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	60cb      	str	r3, [r1, #12]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	2103      	movs	r1, #3
 80015b0:	fa01 f303 	lsl.w	r3, r1, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	401a      	ands	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	08da      	lsrs	r2, r3, #3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3208      	adds	r2, #8
 80015c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	220f      	movs	r2, #15
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	08d2      	lsrs	r2, r2, #3
 80015dc:	4019      	ands	r1, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3208      	adds	r2, #8
 80015e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	2103      	movs	r1, #3
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	401a      	ands	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	2101      	movs	r1, #1
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	401a      	ands	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	2103      	movs	r1, #3
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	401a      	ands	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	3301      	adds	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	2b0f      	cmp	r3, #15
 8001630:	f67f af40 	bls.w	80014b4 <HAL_GPIO_DeInit+0x1c>
 8001634:	bf00      	nop
 8001636:	371c      	adds	r7, #28
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	40013800 	.word	0x40013800
 8001644:	40020000 	.word	0x40020000
 8001648:	40020400 	.word	0x40020400
 800164c:	40020800 	.word	0x40020800
 8001650:	40020c00 	.word	0x40020c00
 8001654:	40021000 	.word	0x40021000
 8001658:	40013c00 	.word	0x40013c00

0800165c <HAL_GPIO_ReadPin>:
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	807b      	strh	r3, [r7, #2]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691a      	ldr	r2, [r3, #16]
 800166c:	887b      	ldrh	r3, [r7, #2]
 800166e:	4013      	ands	r3, r2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <HAL_GPIO_ReadPin+0x1e>
 8001674:	2301      	movs	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e001      	b.n	800167e <HAL_GPIO_ReadPin+0x22>
 800167a:	2300      	movs	r3, #0
 800167c:	73fb      	strb	r3, [r7, #15]
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_GPIO_WritePin>:
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	807b      	strh	r3, [r7, #2]
 8001698:	4613      	mov	r3, r2
 800169a:	707b      	strb	r3, [r7, #1]
 800169c:	787b      	ldrb	r3, [r7, #1]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_WritePin+0x1e>
 80016a2:	887a      	ldrh	r2, [r7, #2]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	619a      	str	r2, [r3, #24]
 80016a8:	e003      	b.n	80016b2 <HAL_GPIO_WritePin+0x26>
 80016aa:	887b      	ldrh	r3, [r7, #2]
 80016ac:	041a      	lsls	r2, r3, #16
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	619a      	str	r2, [r3, #24]
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <HAL_GPIO_TogglePin>:
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	460b      	mov	r3, r1
 80016c8:	807b      	strh	r3, [r7, #2]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	695a      	ldr	r2, [r3, #20]
 80016ce:	887b      	ldrh	r3, [r7, #2]
 80016d0:	401a      	ands	r2, r3
 80016d2:	887b      	ldrh	r3, [r7, #2]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d104      	bne.n	80016e2 <HAL_GPIO_TogglePin+0x24>
 80016d8:	887b      	ldrh	r3, [r7, #2]
 80016da:	041a      	lsls	r2, r3, #16
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	619a      	str	r2, [r3, #24]
 80016e0:	e002      	b.n	80016e8 <HAL_GPIO_TogglePin+0x2a>
 80016e2:	887a      	ldrh	r2, [r7, #2]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	619a      	str	r2, [r3, #24]
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_I2C_Init>:
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_I2C_Init+0x12>
 8001702:	2301      	movs	r3, #1
 8001704:	e10f      	b.n	8001926 <HAL_I2C_Init+0x232>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d106      	bne.n	8001720 <HAL_I2C_Init+0x2c>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f007 fefe 	bl	800951c <HAL_I2C_MspInit>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2224      	movs	r2, #36	; 0x24
 8001724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0201 	bic.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	f002 f8b8 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	4a7b      	ldr	r2, [pc, #492]	; (8001930 <HAL_I2C_Init+0x23c>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d807      	bhi.n	8001758 <HAL_I2C_Init+0x64>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4a7a      	ldr	r2, [pc, #488]	; (8001934 <HAL_I2C_Init+0x240>)
 800174c:	4293      	cmp	r3, r2
 800174e:	bf94      	ite	ls
 8001750:	2301      	movls	r3, #1
 8001752:	2300      	movhi	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	e006      	b.n	8001766 <HAL_I2C_Init+0x72>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4a77      	ldr	r2, [pc, #476]	; (8001938 <HAL_I2C_Init+0x244>)
 800175c:	4293      	cmp	r3, r2
 800175e:	bf94      	ite	ls
 8001760:	2301      	movls	r3, #1
 8001762:	2300      	movhi	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_I2C_Init+0x7a>
 800176a:	2301      	movs	r3, #1
 800176c:	e0db      	b.n	8001926 <HAL_I2C_Init+0x232>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4a72      	ldr	r2, [pc, #456]	; (800193c <HAL_I2C_Init+0x248>)
 8001772:	fba2 2303 	umull	r2, r3, r2, r3
 8001776:	0c9b      	lsrs	r3, r3, #18
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	430a      	orrs	r2, r1
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	4a64      	ldr	r2, [pc, #400]	; (8001930 <HAL_I2C_Init+0x23c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d802      	bhi.n	80017a8 <HAL_I2C_Init+0xb4>
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	3301      	adds	r3, #1
 80017a6:	e009      	b.n	80017bc <HAL_I2C_Init+0xc8>
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017ae:	fb02 f303 	mul.w	r3, r2, r3
 80017b2:	4a63      	ldr	r2, [pc, #396]	; (8001940 <HAL_I2C_Init+0x24c>)
 80017b4:	fba2 2303 	umull	r2, r3, r2, r3
 80017b8:	099b      	lsrs	r3, r3, #6
 80017ba:	3301      	adds	r3, #1
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	430b      	orrs	r3, r1
 80017c2:	6213      	str	r3, [r2, #32]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4956      	ldr	r1, [pc, #344]	; (8001930 <HAL_I2C_Init+0x23c>)
 80017d8:	428b      	cmp	r3, r1
 80017da:	d80d      	bhi.n	80017f8 <HAL_I2C_Init+0x104>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	1e59      	subs	r1, r3, #1
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ea:	3301      	adds	r3, #1
 80017ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	bf38      	it	cc
 80017f4:	2304      	movcc	r3, #4
 80017f6:	e04f      	b.n	8001898 <HAL_I2C_Init+0x1a4>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d111      	bne.n	8001824 <HAL_I2C_Init+0x130>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1e58      	subs	r0, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6859      	ldr	r1, [r3, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	440b      	add	r3, r1
 800180e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001812:	3301      	adds	r3, #1
 8001814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001818:	2b00      	cmp	r3, #0
 800181a:	bf0c      	ite	eq
 800181c:	2301      	moveq	r3, #1
 800181e:	2300      	movne	r3, #0
 8001820:	b2db      	uxtb	r3, r3
 8001822:	e012      	b.n	800184a <HAL_I2C_Init+0x156>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	1e58      	subs	r0, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	0099      	lsls	r1, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	fbb0 f3f3 	udiv	r3, r0, r3
 800183a:	3301      	adds	r3, #1
 800183c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001840:	2b00      	cmp	r3, #0
 8001842:	bf0c      	ite	eq
 8001844:	2301      	moveq	r3, #1
 8001846:	2300      	movne	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_I2C_Init+0x15e>
 800184e:	2301      	movs	r3, #1
 8001850:	e022      	b.n	8001898 <HAL_I2C_Init+0x1a4>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10e      	bne.n	8001878 <HAL_I2C_Init+0x184>
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	1e58      	subs	r0, r3, #1
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6859      	ldr	r1, [r3, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	440b      	add	r3, r1
 8001868:	fbb0 f3f3 	udiv	r3, r0, r3
 800186c:	3301      	adds	r3, #1
 800186e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001876:	e00f      	b.n	8001898 <HAL_I2C_Init+0x1a4>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	1e58      	subs	r0, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6859      	ldr	r1, [r3, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	0099      	lsls	r1, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	fbb0 f3f3 	udiv	r3, r0, r3
 800188e:	3301      	adds	r3, #1
 8001890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001894:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	6809      	ldr	r1, [r1, #0]
 800189c:	4313      	orrs	r3, r2
 800189e:	61cb      	str	r3, [r1, #28]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69da      	ldr	r2, [r3, #28]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6911      	ldr	r1, [r2, #16]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	68d2      	ldr	r2, [r2, #12]
 80018d2:	4311      	orrs	r1, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	430b      	orrs	r3, r1
 80018da:	6093      	str	r3, [r2, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695a      	ldr	r2, [r3, #20]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0201 	orr.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	641a      	str	r2, [r3, #64]	; 0x40
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2220      	movs	r2, #32
 8001912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	631a      	str	r2, [r3, #48]	; 0x30
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001924:	2300      	movs	r3, #0
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	000186a0 	.word	0x000186a0
 8001934:	001e847f 	.word	0x001e847f
 8001938:	003d08ff 	.word	0x003d08ff
 800193c:	431bde83 	.word	0x431bde83
 8001940:	10624dd3 	.word	0x10624dd3

08001944 <HAL_I2C_EV_IRQHandler>:
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	2300      	movs	r3, #0
 800194e:	61bb      	str	r3, [r7, #24]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800196c:	73bb      	strb	r3, [r7, #14]
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	2b10      	cmp	r3, #16
 8001972:	d003      	beq.n	800197c <HAL_I2C_EV_IRQHandler+0x38>
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	2b40      	cmp	r3, #64	; 0x40
 8001978:	f040 80b6 	bne.w	8001ae8 <HAL_I2C_EV_IRQHandler+0x1a4>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	61bb      	str	r3, [r7, #24]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	61fb      	str	r3, [r7, #28]
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10d      	bne.n	80019b2 <HAL_I2C_EV_IRQHandler+0x6e>
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800199c:	d003      	beq.n	80019a6 <HAL_I2C_EV_IRQHandler+0x62>
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80019a4:	d101      	bne.n	80019aa <HAL_I2C_EV_IRQHandler+0x66>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <HAL_I2C_EV_IRQHandler+0x68>
 80019aa:	2300      	movs	r3, #0
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	f000 8127 	beq.w	8001c00 <HAL_I2C_EV_IRQHandler+0x2bc>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00c      	beq.n	80019d6 <HAL_I2C_EV_IRQHandler+0x92>
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	0a5b      	lsrs	r3, r3, #9
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d006      	beq.n	80019d6 <HAL_I2C_EV_IRQHandler+0x92>
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f001 fb72 	bl	80030b2 <I2C_ConvertOtherXferOptions>
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 fd05 	bl	80023de <I2C_Master_SB>
 80019d4:	e087      	b.n	8001ae6 <HAL_I2C_EV_IRQHandler+0x1a2>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	08db      	lsrs	r3, r3, #3
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d009      	beq.n	80019f6 <HAL_I2C_EV_IRQHandler+0xb2>
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	0a5b      	lsrs	r3, r3, #9
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_I2C_EV_IRQHandler+0xb2>
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 fd7b 	bl	80024ea <I2C_Master_ADD10>
 80019f4:	e077      	b.n	8001ae6 <HAL_I2C_EV_IRQHandler+0x1a2>
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	085b      	lsrs	r3, r3, #1
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d009      	beq.n	8001a16 <HAL_I2C_EV_IRQHandler+0xd2>
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	0a5b      	lsrs	r3, r3, #9
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_I2C_EV_IRQHandler+0xd2>
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 fd95 	bl	800253e <I2C_Master_ADDR>
 8001a14:	e067      	b.n	8001ae6 <HAL_I2C_EV_IRQHandler+0x1a2>
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	089b      	lsrs	r3, r3, #2
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d030      	beq.n	8001a84 <HAL_I2C_EV_IRQHandler+0x140>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a30:	f000 80e8 	beq.w	8001c04 <HAL_I2C_EV_IRQHandler+0x2c0>
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	09db      	lsrs	r3, r3, #7
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00f      	beq.n	8001a60 <HAL_I2C_EV_IRQHandler+0x11c>
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	0a9b      	lsrs	r3, r3, #10
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d009      	beq.n	8001a60 <HAL_I2C_EV_IRQHandler+0x11c>
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d103      	bne.n	8001a60 <HAL_I2C_EV_IRQHandler+0x11c>
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f9e6 	bl	8001e2a <I2C_MasterTransmit_TXE>
 8001a5e:	e042      	b.n	8001ae6 <HAL_I2C_EV_IRQHandler+0x1a2>
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80cb 	beq.w	8001c04 <HAL_I2C_EV_IRQHandler+0x2c0>
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	0a5b      	lsrs	r3, r3, #9
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 80c4 	beq.w	8001c04 <HAL_I2C_EV_IRQHandler+0x2c0>
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 facc 	bl	800201a <I2C_MasterTransmit_BTF>
 8001a82:	e0bf      	b.n	8001c04 <HAL_I2C_EV_IRQHandler+0x2c0>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a92:	f000 80b7 	beq.w	8001c04 <HAL_I2C_EV_IRQHandler+0x2c0>
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	099b      	lsrs	r3, r3, #6
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00f      	beq.n	8001ac2 <HAL_I2C_EV_IRQHandler+0x17e>
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	0a9b      	lsrs	r3, r3, #10
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d009      	beq.n	8001ac2 <HAL_I2C_EV_IRQHandler+0x17e>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d103      	bne.n	8001ac2 <HAL_I2C_EV_IRQHandler+0x17e>
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 fb23 	bl	8002106 <I2C_MasterReceive_RXNE>
 8001ac0:	e011      	b.n	8001ae6 <HAL_I2C_EV_IRQHandler+0x1a2>
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 809a 	beq.w	8001c04 <HAL_I2C_EV_IRQHandler+0x2c0>
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	0a5b      	lsrs	r3, r3, #9
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 8093 	beq.w	8001c04 <HAL_I2C_EV_IRQHandler+0x2c0>
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 fb93 	bl	800220a <I2C_MasterReceive_BTF>
 8001ae4:	e08e      	b.n	8001c04 <HAL_I2C_EV_IRQHandler+0x2c0>
 8001ae6:	e08d      	b.n	8001c04 <HAL_I2C_EV_IRQHandler+0x2c0>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d004      	beq.n	8001afa <HAL_I2C_EV_IRQHandler+0x1b6>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	61fb      	str	r3, [r7, #28]
 8001af8:	e007      	b.n	8001b0a <HAL_I2C_EV_IRQHandler+0x1c6>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	61bb      	str	r3, [r7, #24]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	085b      	lsrs	r3, r3, #1
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d012      	beq.n	8001b3c <HAL_I2C_EV_IRQHandler+0x1f8>
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	0a5b      	lsrs	r3, r3, #9
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00c      	beq.n	8001b3c <HAL_I2C_EV_IRQHandler+0x1f8>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_I2C_EV_IRQHandler+0x1ee>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	61bb      	str	r3, [r7, #24]
 8001b32:	69b9      	ldr	r1, [r7, #24]
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 ff51 	bl	80029dc <I2C_Slave_ADDR>
 8001b3a:	e066      	b.n	8001c0a <HAL_I2C_EV_IRQHandler+0x2c6>
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	091b      	lsrs	r3, r3, #4
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d009      	beq.n	8001b5c <HAL_I2C_EV_IRQHandler+0x218>
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	0a5b      	lsrs	r3, r3, #9
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_I2C_EV_IRQHandler+0x218>
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 ff85 	bl	8002a64 <I2C_Slave_STOPF>
 8001b5a:	e056      	b.n	8001c0a <HAL_I2C_EV_IRQHandler+0x2c6>
 8001b5c:	7bbb      	ldrb	r3, [r7, #14]
 8001b5e:	2b21      	cmp	r3, #33	; 0x21
 8001b60:	d002      	beq.n	8001b68 <HAL_I2C_EV_IRQHandler+0x224>
 8001b62:	7bbb      	ldrb	r3, [r7, #14]
 8001b64:	2b29      	cmp	r3, #41	; 0x29
 8001b66:	d125      	bne.n	8001bb4 <HAL_I2C_EV_IRQHandler+0x270>
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	09db      	lsrs	r3, r3, #7
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00f      	beq.n	8001b94 <HAL_I2C_EV_IRQHandler+0x250>
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	0a9b      	lsrs	r3, r3, #10
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d009      	beq.n	8001b94 <HAL_I2C_EV_IRQHandler+0x250>
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	089b      	lsrs	r3, r3, #2
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d103      	bne.n	8001b94 <HAL_I2C_EV_IRQHandler+0x250>
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 fe67 	bl	8002860 <I2C_SlaveTransmit_TXE>
 8001b92:	e039      	b.n	8001c08 <HAL_I2C_EV_IRQHandler+0x2c4>
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	089b      	lsrs	r3, r3, #2
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d033      	beq.n	8001c08 <HAL_I2C_EV_IRQHandler+0x2c4>
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	0a5b      	lsrs	r3, r3, #9
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d02d      	beq.n	8001c08 <HAL_I2C_EV_IRQHandler+0x2c4>
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 fe94 	bl	80028da <I2C_SlaveTransmit_BTF>
 8001bb2:	e029      	b.n	8001c08 <HAL_I2C_EV_IRQHandler+0x2c4>
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	099b      	lsrs	r3, r3, #6
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00f      	beq.n	8001be0 <HAL_I2C_EV_IRQHandler+0x29c>
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	0a9b      	lsrs	r3, r3, #10
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d009      	beq.n	8001be0 <HAL_I2C_EV_IRQHandler+0x29c>
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d103      	bne.n	8001be0 <HAL_I2C_EV_IRQHandler+0x29c>
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 fe9f 	bl	800291c <I2C_SlaveReceive_RXNE>
 8001bde:	e014      	b.n	8001c0a <HAL_I2C_EV_IRQHandler+0x2c6>
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	089b      	lsrs	r3, r3, #2
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00e      	beq.n	8001c0a <HAL_I2C_EV_IRQHandler+0x2c6>
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	0a5b      	lsrs	r3, r3, #9
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_I2C_EV_IRQHandler+0x2c6>
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 fecd 	bl	8002998 <I2C_SlaveReceive_BTF>
 8001bfe:	e004      	b.n	8001c0a <HAL_I2C_EV_IRQHandler+0x2c6>
 8001c00:	bf00      	nop
 8001c02:	e002      	b.n	8001c0a <HAL_I2C_EV_IRQHandler+0x2c6>
 8001c04:	bf00      	nop
 8001c06:	e000      	b.n	8001c0a <HAL_I2C_EV_IRQHandler+0x2c6>
 8001c08:	bf00      	nop
 8001c0a:	3720      	adds	r7, #32
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_I2C_ER_IRQHandler>:
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	623b      	str	r3, [r7, #32]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61fb      	str	r3, [r7, #28]
 8001c28:	2300      	movs	r3, #0
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	0a1b      	lsrs	r3, r3, #8
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00e      	beq.n	8001c56 <HAL_I2C_ER_IRQHandler+0x46>
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	0a1b      	lsrs	r3, r3, #8
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d008      	beq.n	8001c56 <HAL_I2C_ER_IRQHandler+0x46>
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001c54:	615a      	str	r2, [r3, #20]
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	0a5b      	lsrs	r3, r3, #9
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00e      	beq.n	8001c80 <HAL_I2C_ER_IRQHandler+0x70>
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	0a1b      	lsrs	r3, r3, #8
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d008      	beq.n	8001c80 <HAL_I2C_ER_IRQHandler+0x70>
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001c7e:	615a      	str	r2, [r3, #20]
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	0a9b      	lsrs	r3, r3, #10
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d041      	beq.n	8001d10 <HAL_I2C_ER_IRQHandler+0x100>
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	0a1b      	lsrs	r3, r3, #8
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d03b      	beq.n	8001d10 <HAL_I2C_ER_IRQHandler+0x100>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c9e:	76fb      	strb	r3, [r7, #27]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cae:	74fb      	strb	r3, [r7, #19]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	7efb      	ldrb	r3, [r7, #27]
 8001cb8:	2b20      	cmp	r3, #32
 8001cba:	d112      	bne.n	8001ce2 <HAL_I2C_ER_IRQHandler+0xd2>
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10f      	bne.n	8001ce2 <HAL_I2C_ER_IRQHandler+0xd2>
 8001cc2:	7cfb      	ldrb	r3, [r7, #19]
 8001cc4:	2b21      	cmp	r3, #33	; 0x21
 8001cc6:	d008      	beq.n	8001cda <HAL_I2C_ER_IRQHandler+0xca>
 8001cc8:	7cfb      	ldrb	r3, [r7, #19]
 8001cca:	2b29      	cmp	r3, #41	; 0x29
 8001ccc:	d005      	beq.n	8001cda <HAL_I2C_ER_IRQHandler+0xca>
 8001cce:	7cfb      	ldrb	r3, [r7, #19]
 8001cd0:	2b28      	cmp	r3, #40	; 0x28
 8001cd2:	d106      	bne.n	8001ce2 <HAL_I2C_ER_IRQHandler+0xd2>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2b21      	cmp	r3, #33	; 0x21
 8001cd8:	d103      	bne.n	8001ce2 <HAL_I2C_ER_IRQHandler+0xd2>
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 fff2 	bl	8002cc4 <I2C_Slave_AF>
 8001ce0:	e016      	b.n	8001d10 <HAL_I2C_ER_IRQHandler+0x100>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cea:	615a      	str	r2, [r3, #20]
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	f043 0304 	orr.w	r3, r3, #4
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b10      	cmp	r3, #16
 8001cfe:	d107      	bne.n	8001d10 <HAL_I2C_ER_IRQHandler+0x100>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	0adb      	lsrs	r3, r3, #11
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00e      	beq.n	8001d3a <HAL_I2C_ER_IRQHandler+0x12a>
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	0a1b      	lsrs	r3, r3, #8
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d008      	beq.n	8001d3a <HAL_I2C_ER_IRQHandler+0x12a>
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	f043 0308 	orr.w	r3, r3, #8
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001d38:	615a      	str	r2, [r3, #20]
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <HAL_I2C_ER_IRQHandler+0x142>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f001 f829 	bl	8002da4 <I2C_ITError>
 8001d52:	bf00      	nop
 8001d54:	3728      	adds	r7, #40	; 0x28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_I2C_MasterTxCpltCallback>:
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_I2C_MasterRxCpltCallback>:
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_I2C_SlaveTxCpltCallback>:
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_I2C_SlaveRxCpltCallback>:
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_I2C_AddrCallback>:
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	70fb      	strb	r3, [r7, #3]
 8001db6:	4613      	mov	r3, r2
 8001db8:	803b      	strh	r3, [r7, #0]
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_I2C_ListenCpltCallback>:
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <HAL_I2C_MemTxCpltCallback>:
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HAL_I2C_MemRxCpltCallback>:
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HAL_I2C_ErrorCallback>:
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <HAL_I2C_AbortCpltCallback>:
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <I2C_MasterTransmit_TXE>:
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e38:	73fb      	strb	r3, [r7, #15]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e40:	73bb      	strb	r3, [r7, #14]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d150      	bne.n	8001ef2 <I2C_MasterTransmit_TXE+0xc8>
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	2b21      	cmp	r3, #33	; 0x21
 8001e54:	d14d      	bne.n	8001ef2 <I2C_MasterTransmit_TXE+0xc8>
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d01d      	beq.n	8001e98 <I2C_MasterTransmit_TXE+0x6e>
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2b20      	cmp	r3, #32
 8001e60:	d01a      	beq.n	8001e98 <I2C_MasterTransmit_TXE+0x6e>
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e68:	d016      	beq.n	8001e98 <I2C_MasterTransmit_TXE+0x6e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2211      	movs	r2, #17
 8001e7e:	631a      	str	r2, [r3, #48]	; 0x30
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff ff62 	bl	8001d5a <HAL_I2C_MasterTxCpltCallback>
 8001e96:	e0bc      	b.n	8002012 <I2C_MasterTransmit_TXE+0x1e8>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	631a      	str	r2, [r3, #48]	; 0x30
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b40      	cmp	r3, #64	; 0x40
 8001ed0:	d107      	bne.n	8001ee2 <I2C_MasterTransmit_TXE+0xb8>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ff7d 	bl	8001dda <HAL_I2C_MemTxCpltCallback>
 8001ee0:	e097      	b.n	8002012 <I2C_MasterTransmit_TXE+0x1e8>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff ff35 	bl	8001d5a <HAL_I2C_MasterTxCpltCallback>
 8001ef0:	e08f      	b.n	8002012 <I2C_MasterTransmit_TXE+0x1e8>
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	2b21      	cmp	r3, #33	; 0x21
 8001ef6:	d007      	beq.n	8001f08 <I2C_MasterTransmit_TXE+0xde>
 8001ef8:	7bbb      	ldrb	r3, [r7, #14]
 8001efa:	2b40      	cmp	r3, #64	; 0x40
 8001efc:	f040 8089 	bne.w	8002012 <I2C_MasterTransmit_TXE+0x1e8>
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	2b22      	cmp	r3, #34	; 0x22
 8001f04:	f040 8085 	bne.w	8002012 <I2C_MasterTransmit_TXE+0x1e8>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d108      	bne.n	8001f24 <I2C_MasterTransmit_TXE+0xfa>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	e076      	b.n	8002012 <I2C_MasterTransmit_TXE+0x1e8>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b40      	cmp	r3, #64	; 0x40
 8001f2e:	d15d      	bne.n	8001fec <I2C_MasterTransmit_TXE+0x1c2>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d11d      	bne.n	8001f74 <I2C_MasterTransmit_TXE+0x14a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d10b      	bne.n	8001f58 <I2C_MasterTransmit_TXE+0x12e>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	611a      	str	r2, [r3, #16]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f50:	1c9a      	adds	r2, r3, #2
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	651a      	str	r2, [r3, #80]	; 0x50
 8001f56:	e05c      	b.n	8002012 <I2C_MasterTransmit_TXE+0x1e8>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	121b      	asrs	r3, r3, #8
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	611a      	str	r2, [r3, #16]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	651a      	str	r2, [r3, #80]	; 0x50
 8001f72:	e04e      	b.n	8002012 <I2C_MasterTransmit_TXE+0x1e8>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d10b      	bne.n	8001f94 <I2C_MasterTransmit_TXE+0x16a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	611a      	str	r2, [r3, #16]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	651a      	str	r2, [r3, #80]	; 0x50
 8001f92:	e03e      	b.n	8002012 <I2C_MasterTransmit_TXE+0x1e8>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d13a      	bne.n	8002012 <I2C_MasterTransmit_TXE+0x1e8>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b22      	cmp	r3, #34	; 0x22
 8001fa6:	d108      	bne.n	8001fba <I2C_MasterTransmit_TXE+0x190>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	e02b      	b.n	8002012 <I2C_MasterTransmit_TXE+0x1e8>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b21      	cmp	r3, #33	; 0x21
 8001fc4:	d125      	bne.n	8002012 <I2C_MasterTransmit_TXE+0x1e8>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	781a      	ldrb	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	611a      	str	r2, [r3, #16]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	625a      	str	r2, [r3, #36]	; 0x24
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fea:	e012      	b.n	8002012 <I2C_MasterTransmit_TXE+0x1e8>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	781a      	ldrb	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	611a      	str	r2, [r3, #16]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	625a      	str	r2, [r3, #36]	; 0x24
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002010:	e7ff      	b.n	8002012 <I2C_MasterTransmit_TXE+0x1e8>
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <I2C_MasterTransmit_BTF>:
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b21      	cmp	r3, #33	; 0x21
 8002032:	d164      	bne.n	80020fe <I2C_MasterTransmit_BTF+0xe4>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002038:	b29b      	uxth	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d012      	beq.n	8002064 <I2C_MasterTransmit_BTF+0x4a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	781a      	ldrb	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	611a      	str	r2, [r3, #16]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	625a      	str	r2, [r3, #36]	; 0x24
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002058:	b29b      	uxth	r3, r3
 800205a:	3b01      	subs	r3, #1
 800205c:	b29a      	uxth	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002062:	e04c      	b.n	80020fe <I2C_MasterTransmit_BTF+0xe4>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b08      	cmp	r3, #8
 8002068:	d01d      	beq.n	80020a6 <I2C_MasterTransmit_BTF+0x8c>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2b20      	cmp	r3, #32
 800206e:	d01a      	beq.n	80020a6 <I2C_MasterTransmit_BTF+0x8c>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002076:	d016      	beq.n	80020a6 <I2C_MasterTransmit_BTF+0x8c>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2211      	movs	r2, #17
 800208c:	631a      	str	r2, [r3, #48]	; 0x30
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2220      	movs	r2, #32
 800209a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff fe5b 	bl	8001d5a <HAL_I2C_MasterTxCpltCallback>
 80020a4:	e02b      	b.n	80020fe <I2C_MasterTransmit_BTF+0xe4>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	631a      	str	r2, [r3, #48]	; 0x30
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2220      	movs	r2, #32
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b40      	cmp	r3, #64	; 0x40
 80020de:	d107      	bne.n	80020f0 <I2C_MasterTransmit_BTF+0xd6>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff fe76 	bl	8001dda <HAL_I2C_MemTxCpltCallback>
 80020ee:	e006      	b.n	80020fe <I2C_MasterTransmit_BTF+0xe4>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff fe2e 	bl	8001d5a <HAL_I2C_MasterTxCpltCallback>
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <I2C_MasterReceive_RXNE>:
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b22      	cmp	r3, #34	; 0x22
 8002118:	d173      	bne.n	8002202 <I2C_MasterReceive_RXNE+0xfc>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211e:	b29b      	uxth	r3, r3
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d920      	bls.n	800216a <I2C_MasterReceive_RXNE+0x64>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	625a      	str	r2, [r3, #36]	; 0x24
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002144:	b29b      	uxth	r3, r3
 8002146:	3b01      	subs	r3, #1
 8002148:	b29a      	uxth	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002152:	b29b      	uxth	r3, r3
 8002154:	2b03      	cmp	r3, #3
 8002156:	d154      	bne.n	8002202 <I2C_MasterReceive_RXNE+0xfc>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	e04b      	b.n	8002202 <I2C_MasterReceive_RXNE+0xfc>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	2b02      	cmp	r3, #2
 8002170:	d047      	beq.n	8002202 <I2C_MasterReceive_RXNE+0xfc>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d002      	beq.n	800217e <I2C_MasterReceive_RXNE+0x78>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d141      	bne.n	8002202 <I2C_MasterReceive_RXNE+0xfc>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	701a      	strb	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b40      	cmp	r3, #64	; 0x40
 80021d6:	d10a      	bne.n	80021ee <I2C_MasterReceive_RXNE+0xe8>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	631a      	str	r2, [r3, #48]	; 0x30
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff fe01 	bl	8001dee <HAL_I2C_MemRxCpltCallback>
 80021ec:	e009      	b.n	8002202 <I2C_MasterReceive_RXNE+0xfc>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2212      	movs	r2, #18
 80021fa:	631a      	str	r2, [r3, #48]	; 0x30
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff fdb6 	bl	8001d6e <HAL_I2C_MasterRxCpltCallback>
 8002202:	bf00      	nop
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <I2C_MasterReceive_BTF>:
 800220a:	b580      	push	{r7, lr}
 800220c:	b084      	sub	sp, #16
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221c:	b29b      	uxth	r3, r3
 800221e:	2b04      	cmp	r3, #4
 8002220:	d11b      	bne.n	800225a <I2C_MasterReceive_BTF+0x50>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	701a      	strb	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	625a      	str	r2, [r3, #36]	; 0x24
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224e:	b29b      	uxth	r3, r3
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002258:	e0bd      	b.n	80023d6 <I2C_MasterReceive_BTF+0x1cc>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225e:	b29b      	uxth	r3, r3
 8002260:	2b03      	cmp	r3, #3
 8002262:	d129      	bne.n	80022b8 <I2C_MasterReceive_BTF+0xae>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b04      	cmp	r3, #4
 8002278:	d00a      	beq.n	8002290 <I2C_MasterReceive_BTF+0x86>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d007      	beq.n	8002290 <I2C_MasterReceive_BTF+0x86>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	625a      	str	r2, [r3, #36]	; 0x24
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022b6:	e08e      	b.n	80023d6 <I2C_MasterReceive_BTF+0x1cc>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d176      	bne.n	80023b0 <I2C_MasterReceive_BTF+0x1a6>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d002      	beq.n	80022ce <I2C_MasterReceive_BTF+0xc4>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b10      	cmp	r3, #16
 80022cc:	d108      	bne.n	80022e0 <I2C_MasterReceive_BTF+0xd6>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	e019      	b.n	8002314 <I2C_MasterReceive_BTF+0x10a>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d002      	beq.n	80022ec <I2C_MasterReceive_BTF+0xe2>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d108      	bne.n	80022fe <I2C_MasterReceive_BTF+0xf4>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	e00a      	b.n	8002314 <I2C_MasterReceive_BTF+0x10a>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2b10      	cmp	r3, #16
 8002302:	d007      	beq.n	8002314 <I2C_MasterReceive_BTF+0x10a>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	701a      	strb	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	625a      	str	r2, [r3, #36]	; 0x24
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002330:	b29b      	uxth	r3, r3
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	855a      	strh	r2, [r3, #42]	; 0x2a
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	701a      	strb	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	625a      	str	r2, [r3, #36]	; 0x24
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b40      	cmp	r3, #64	; 0x40
 8002382:	d10a      	bne.n	800239a <I2C_MasterReceive_BTF+0x190>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	631a      	str	r2, [r3, #48]	; 0x30
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff fd2b 	bl	8001dee <HAL_I2C_MemRxCpltCallback>
 8002398:	e01d      	b.n	80023d6 <I2C_MasterReceive_BTF+0x1cc>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2212      	movs	r2, #18
 80023a6:	631a      	str	r2, [r3, #48]	; 0x30
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff fce0 	bl	8001d6e <HAL_I2C_MasterRxCpltCallback>
 80023ae:	e012      	b.n	80023d6 <I2C_MasterReceive_BTF+0x1cc>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	701a      	strb	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	625a      	str	r2, [r3, #36]	; 0x24
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <I2C_Master_SB>:
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b40      	cmp	r3, #64	; 0x40
 80023f0:	d117      	bne.n	8002422 <I2C_Master_SB+0x44>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <I2C_Master_SB+0x30>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	461a      	mov	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800240a:	611a      	str	r2, [r3, #16]
 800240c:	e067      	b.n	80024de <I2C_Master_SB+0x100>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002412:	b2db      	uxtb	r3, r3
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	b2da      	uxtb	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	611a      	str	r2, [r3, #16]
 8002420:	e05d      	b.n	80024de <I2C_Master_SB+0x100>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800242a:	d133      	bne.n	8002494 <I2C_Master_SB+0xb6>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b21      	cmp	r3, #33	; 0x21
 8002436:	d109      	bne.n	800244c <I2C_Master_SB+0x6e>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243c:	b2db      	uxtb	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002448:	611a      	str	r2, [r3, #16]
 800244a:	e008      	b.n	800245e <I2C_Master_SB+0x80>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	b2da      	uxtb	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	611a      	str	r2, [r3, #16]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002462:	2b00      	cmp	r3, #0
 8002464:	d103      	bne.n	800246e <I2C_Master_SB+0x90>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246a:	2b00      	cmp	r3, #0
 800246c:	d037      	beq.n	80024de <I2C_Master_SB+0x100>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d104      	bne.n	8002482 <I2C_Master_SB+0xa4>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247e:	2b00      	cmp	r3, #0
 8002480:	d02d      	beq.n	80024de <I2C_Master_SB+0x100>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	e024      	b.n	80024de <I2C_Master_SB+0x100>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10e      	bne.n	80024ba <I2C_Master_SB+0xdc>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	11db      	asrs	r3, r3, #7
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	f003 0306 	and.w	r3, r3, #6
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	f063 030f 	orn	r3, r3, #15
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	611a      	str	r2, [r3, #16]
 80024b8:	e011      	b.n	80024de <I2C_Master_SB+0x100>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d10d      	bne.n	80024de <I2C_Master_SB+0x100>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	11db      	asrs	r3, r3, #7
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f003 0306 	and.w	r3, r3, #6
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f063 030e 	orn	r3, r3, #14
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	611a      	str	r2, [r3, #16]
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <I2C_Master_ADD10>:
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	611a      	str	r2, [r3, #16]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002502:	2b00      	cmp	r3, #0
 8002504:	d103      	bne.n	800250e <I2C_Master_ADD10+0x24>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250a:	2b00      	cmp	r3, #0
 800250c:	d011      	beq.n	8002532 <I2C_Master_ADD10+0x48>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002514:	2b00      	cmp	r3, #0
 8002516:	d104      	bne.n	8002522 <I2C_Master_ADD10+0x38>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <I2C_Master_ADD10+0x48>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <I2C_Master_ADDR>:
 800253e:	b480      	push	{r7}
 8002540:	b091      	sub	sp, #68	; 0x44
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800254c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	63bb      	str	r3, [r7, #56]	; 0x38
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	637b      	str	r3, [r7, #52]	; 0x34
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b22      	cmp	r3, #34	; 0x22
 8002566:	f040 8169 	bne.w	800283c <I2C_Master_ADDR+0x2fe>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10f      	bne.n	8002592 <I2C_Master_ADDR+0x54>
 8002572:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002576:	2b40      	cmp	r3, #64	; 0x40
 8002578:	d10b      	bne.n	8002592 <I2C_Master_ADDR+0x54>
 800257a:	2300      	movs	r3, #0
 800257c:	633b      	str	r3, [r7, #48]	; 0x30
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	633b      	str	r3, [r7, #48]	; 0x30
 800258e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002590:	e160      	b.n	8002854 <I2C_Master_ADDR+0x316>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002596:	2b00      	cmp	r3, #0
 8002598:	d11d      	bne.n	80025d6 <I2C_Master_ADDR+0x98>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80025a2:	d118      	bne.n	80025d6 <I2C_Master_ADDR+0x98>
 80025a4:	2300      	movs	r3, #0
 80025a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ce:	1c5a      	adds	r2, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	651a      	str	r2, [r3, #80]	; 0x50
 80025d4:	e13e      	b.n	8002854 <I2C_Master_ADDR+0x316>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d113      	bne.n	8002608 <I2C_Master_ADDR+0xca>
 80025e0:	2300      	movs	r3, #0
 80025e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80025f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e115      	b.n	8002834 <I2C_Master_ADDR+0x2f6>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b01      	cmp	r3, #1
 8002610:	f040 808a 	bne.w	8002728 <I2C_Master_ADDR+0x1ea>
 8002614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002616:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800261a:	d137      	bne.n	800268c <I2C_Master_ADDR+0x14e>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800263a:	d113      	bne.n	8002664 <I2C_Master_ADDR+0x126>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	2300      	movs	r3, #0
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	e0e7      	b.n	8002834 <I2C_Master_ADDR+0x2f6>
 8002664:	2300      	movs	r3, #0
 8002666:	623b      	str	r3, [r7, #32]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	623b      	str	r3, [r7, #32]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	623b      	str	r3, [r7, #32]
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	e0d3      	b.n	8002834 <I2C_Master_ADDR+0x2f6>
 800268c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800268e:	2b08      	cmp	r3, #8
 8002690:	d02e      	beq.n	80026f0 <I2C_Master_ADDR+0x1b2>
 8002692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002694:	2b20      	cmp	r3, #32
 8002696:	d02b      	beq.n	80026f0 <I2C_Master_ADDR+0x1b2>
 8002698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269a:	2b12      	cmp	r3, #18
 800269c:	d102      	bne.n	80026a4 <I2C_Master_ADDR+0x166>
 800269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d125      	bne.n	80026f0 <I2C_Master_ADDR+0x1b2>
 80026a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d00e      	beq.n	80026c8 <I2C_Master_ADDR+0x18a>
 80026aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d00b      	beq.n	80026c8 <I2C_Master_ADDR+0x18a>
 80026b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b2:	2b10      	cmp	r3, #16
 80026b4:	d008      	beq.n	80026c8 <I2C_Master_ADDR+0x18a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	e007      	b.n	80026d8 <I2C_Master_ADDR+0x19a>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	2300      	movs	r3, #0
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	61fb      	str	r3, [r7, #28]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	e0a1      	b.n	8002834 <I2C_Master_ADDR+0x2f6>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	2300      	movs	r3, #0
 8002702:	61bb      	str	r3, [r7, #24]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	61bb      	str	r3, [r7, #24]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	61bb      	str	r3, [r7, #24]
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	e085      	b.n	8002834 <I2C_Master_ADDR+0x2f6>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d14d      	bne.n	80027ce <I2C_Master_ADDR+0x290>
 8002732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002734:	2b04      	cmp	r3, #4
 8002736:	d016      	beq.n	8002766 <I2C_Master_ADDR+0x228>
 8002738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273a:	2b02      	cmp	r3, #2
 800273c:	d013      	beq.n	8002766 <I2C_Master_ADDR+0x228>
 800273e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002740:	2b10      	cmp	r3, #16
 8002742:	d010      	beq.n	8002766 <I2C_Master_ADDR+0x228>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	e007      	b.n	8002776 <I2C_Master_ADDR+0x238>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002784:	d117      	bne.n	80027b6 <I2C_Master_ADDR+0x278>
 8002786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002788:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800278c:	d00b      	beq.n	80027a6 <I2C_Master_ADDR+0x268>
 800278e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002790:	2b01      	cmp	r3, #1
 8002792:	d008      	beq.n	80027a6 <I2C_Master_ADDR+0x268>
 8002794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002796:	2b08      	cmp	r3, #8
 8002798:	d005      	beq.n	80027a6 <I2C_Master_ADDR+0x268>
 800279a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279c:	2b10      	cmp	r3, #16
 800279e:	d002      	beq.n	80027a6 <I2C_Master_ADDR+0x268>
 80027a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	d107      	bne.n	80027b6 <I2C_Master_ADDR+0x278>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	e032      	b.n	8002834 <I2C_Master_ADDR+0x2f6>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027ec:	d117      	bne.n	800281e <I2C_Master_ADDR+0x2e0>
 80027ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027f4:	d00b      	beq.n	800280e <I2C_Master_ADDR+0x2d0>
 80027f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d008      	beq.n	800280e <I2C_Master_ADDR+0x2d0>
 80027fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d005      	beq.n	800280e <I2C_Master_ADDR+0x2d0>
 8002802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002804:	2b10      	cmp	r3, #16
 8002806:	d002      	beq.n	800280e <I2C_Master_ADDR+0x2d0>
 8002808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280a:	2b20      	cmp	r3, #32
 800280c:	d107      	bne.n	800281e <I2C_Master_ADDR+0x2e0>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	651a      	str	r2, [r3, #80]	; 0x50
 800283a:	e00b      	b.n	8002854 <I2C_Master_ADDR+0x316>
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	e7ff      	b.n	8002854 <I2C_Master_ADDR+0x316>
 8002854:	bf00      	nop
 8002856:	3744      	adds	r7, #68	; 0x44
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <I2C_SlaveTransmit_TXE>:
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286e:	73fb      	strb	r3, [r7, #15]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002874:	b29b      	uxth	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d02b      	beq.n	80028d2 <I2C_SlaveTransmit_TXE+0x72>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	781a      	ldrb	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	611a      	str	r2, [r3, #16]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	625a      	str	r2, [r3, #36]	; 0x24
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d114      	bne.n	80028d2 <I2C_SlaveTransmit_TXE+0x72>
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b29      	cmp	r3, #41	; 0x29
 80028ac:	d111      	bne.n	80028d2 <I2C_SlaveTransmit_TXE+0x72>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2221      	movs	r2, #33	; 0x21
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2228      	movs	r2, #40	; 0x28
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff fa58 	bl	8001d82 <HAL_I2C_SlaveTxCpltCallback>
 80028d2:	bf00      	nop
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <I2C_SlaveTransmit_BTF>:
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d011      	beq.n	8002910 <I2C_SlaveTransmit_BTF+0x36>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	781a      	ldrb	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	611a      	str	r2, [r3, #16]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	625a      	str	r2, [r3, #36]	; 0x24
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <I2C_SlaveReceive_RXNE>:
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292a:	73fb      	strb	r3, [r7, #15]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d02c      	beq.n	8002990 <I2C_SlaveReceive_RXNE+0x74>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	701a      	strb	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	625a      	str	r2, [r3, #36]	; 0x24
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002960:	b29b      	uxth	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d114      	bne.n	8002990 <I2C_SlaveReceive_RXNE+0x74>
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	2b2a      	cmp	r3, #42	; 0x2a
 800296a:	d111      	bne.n	8002990 <I2C_SlaveReceive_RXNE+0x74>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2222      	movs	r2, #34	; 0x22
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2228      	movs	r2, #40	; 0x28
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff fa03 	bl	8001d96 <HAL_I2C_SlaveRxCpltCallback>
 8002990:	bf00      	nop
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <I2C_SlaveReceive_BTF>:
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d012      	beq.n	80029d0 <I2C_SlaveReceive_BTF+0x38>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	625a      	str	r2, [r3, #36]	; 0x24
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <I2C_Slave_ADDR>:
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029f6:	2b28      	cmp	r3, #40	; 0x28
 80029f8:	d127      	bne.n	8002a4a <I2C_Slave_ADDR+0x6e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	089b      	lsrs	r3, r3, #2
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <I2C_Slave_ADDR+0x3e>
 8002a16:	2301      	movs	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	09db      	lsrs	r3, r3, #7
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d103      	bne.n	8002a2e <I2C_Slave_ADDR+0x52>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	81bb      	strh	r3, [r7, #12]
 8002a2c:	e002      	b.n	8002a34 <I2C_Slave_ADDR+0x58>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	81bb      	strh	r3, [r7, #12]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a3c:	89ba      	ldrh	r2, [r7, #12]
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
 8002a40:	4619      	mov	r1, r3
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff f9b1 	bl	8001daa <HAL_I2C_AddrCallback>
 8002a48:	e008      	b.n	8002a5c <I2C_Slave_ADDR+0x80>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f06f 0202 	mvn.w	r2, #2
 8002a52:	615a      	str	r2, [r3, #20]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a5c:	bf00      	nop
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <I2C_Slave_STOPF>:
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a72:	73fb      	strb	r3, [r7, #15]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a82:	605a      	str	r2, [r3, #4]
 8002a84:	2300      	movs	r3, #0
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ac0:	d172      	bne.n	8002ba8 <I2C_Slave_STOPF+0x144>
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	2b22      	cmp	r3, #34	; 0x22
 8002ac6:	d002      	beq.n	8002ace <I2C_Slave_STOPF+0x6a>
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2b2a      	cmp	r3, #42	; 0x2a
 8002acc:	d135      	bne.n	8002b3a <I2C_Slave_STOPF+0xd6>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d005      	beq.n	8002af2 <I2C_Slave_STOPF+0x8e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f043 0204 	orr.w	r2, r3, #4
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe fb36 	bl	8001178 <HAL_DMA_GetState>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d049      	beq.n	8002ba6 <I2C_Slave_STOPF+0x142>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b16:	4a69      	ldr	r2, [pc, #420]	; (8002cbc <I2C_Slave_STOPF+0x258>)
 8002b18:	651a      	str	r2, [r3, #80]	; 0x50
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe fb08 	bl	8001134 <HAL_DMA_Abort_IT>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d03d      	beq.n	8002ba6 <I2C_Slave_STOPF+0x142>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b34:	4610      	mov	r0, r2
 8002b36:	4798      	blx	r3
 8002b38:	e035      	b.n	8002ba6 <I2C_Slave_STOPF+0x142>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <I2C_Slave_STOPF+0xfa>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f043 0204 	orr.w	r2, r3, #4
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe fb00 	bl	8001178 <HAL_DMA_GetState>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d014      	beq.n	8002ba8 <I2C_Slave_STOPF+0x144>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b82:	4a4e      	ldr	r2, [pc, #312]	; (8002cbc <I2C_Slave_STOPF+0x258>)
 8002b84:	651a      	str	r2, [r3, #80]	; 0x50
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe fad2 	bl	8001134 <HAL_DMA_Abort_IT>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d008      	beq.n	8002ba8 <I2C_Slave_STOPF+0x144>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	4798      	blx	r3
 8002ba4:	e000      	b.n	8002ba8 <I2C_Slave_STOPF+0x144>
 8002ba6:	bf00      	nop
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d03e      	beq.n	8002c30 <I2C_Slave_STOPF+0x1cc>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d112      	bne.n	8002be6 <I2C_Slave_STOPF+0x182>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691a      	ldr	r2, [r3, #16]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf0:	2b40      	cmp	r3, #64	; 0x40
 8002bf2:	d112      	bne.n	8002c1a <I2C_Slave_STOPF+0x1b6>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <I2C_Slave_STOPF+0x1cc>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	f043 0204 	orr.w	r2, r3, #4
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <I2C_Slave_STOPF+0x1dc>
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f8b3 	bl	8002da4 <I2C_ITError>
 8002c3e:	e039      	b.n	8002cb4 <I2C_Slave_STOPF+0x250>
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	2b2a      	cmp	r3, #42	; 0x2a
 8002c44:	d109      	bne.n	8002c5a <I2C_Slave_STOPF+0x1f6>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2228      	movs	r2, #40	; 0x28
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff f89e 	bl	8001d96 <HAL_I2C_SlaveRxCpltCallback>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b28      	cmp	r3, #40	; 0x28
 8002c64:	d111      	bne.n	8002c8a <I2C_Slave_STOPF+0x226>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a15      	ldr	r2, [pc, #84]	; (8002cc0 <I2C_Slave_STOPF+0x25c>)
 8002c6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	631a      	str	r2, [r3, #48]	; 0x30
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff f89f 	bl	8001dc6 <HAL_I2C_ListenCpltCallback>
 8002c88:	e014      	b.n	8002cb4 <I2C_Slave_STOPF+0x250>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	2b22      	cmp	r3, #34	; 0x22
 8002c90:	d002      	beq.n	8002c98 <I2C_Slave_STOPF+0x234>
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	2b22      	cmp	r3, #34	; 0x22
 8002c96:	d10d      	bne.n	8002cb4 <I2C_Slave_STOPF+0x250>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	631a      	str	r2, [r3, #48]	; 0x30
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff f871 	bl	8001d96 <HAL_I2C_SlaveRxCpltCallback>
 8002cb4:	bf00      	nop
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	08002fd5 	.word	0x08002fd5
 8002cc0:	ffff0000 	.word	0xffff0000

08002cc4 <I2C_Slave_AF>:
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd2:	73fb      	strb	r3, [r7, #15]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d002      	beq.n	8002ce6 <I2C_Slave_AF+0x22>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b20      	cmp	r3, #32
 8002ce4:	d129      	bne.n	8002d3a <I2C_Slave_AF+0x76>
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	2b28      	cmp	r3, #40	; 0x28
 8002cea:	d126      	bne.n	8002d3a <I2C_Slave_AF+0x76>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a2c      	ldr	r2, [pc, #176]	; (8002da0 <I2C_Slave_AF+0xdc>)
 8002cf0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d0a:	615a      	str	r2, [r3, #20]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	631a      	str	r2, [r3, #48]	; 0x30
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff f847 	bl	8001dc6 <HAL_I2C_ListenCpltCallback>
 8002d38:	e02e      	b.n	8002d98 <I2C_Slave_AF+0xd4>
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	2b21      	cmp	r3, #33	; 0x21
 8002d3e:	d126      	bne.n	8002d8e <I2C_Slave_AF+0xca>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a17      	ldr	r2, [pc, #92]	; (8002da0 <I2C_Slave_AF+0xdc>)
 8002d44:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2221      	movs	r2, #33	; 0x21
 8002d4a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d6a:	605a      	str	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d74:	615a      	str	r2, [r3, #20]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fe fffb 	bl	8001d82 <HAL_I2C_SlaveTxCpltCallback>
 8002d8c:	e004      	b.n	8002d98 <I2C_Slave_AF+0xd4>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d96:	615a      	str	r2, [r3, #20]
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	ffff0000 	.word	0xffff0000

08002da4 <I2C_ITError>:
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db2:	73fb      	strb	r3, [r7, #15]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b10      	cmp	r3, #16
 8002dbe:	d10a      	bne.n	8002dd6 <I2C_ITError+0x32>
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	2b22      	cmp	r3, #34	; 0x22
 8002dc4:	d107      	bne.n	8002dd6 <I2C_ITError+0x32>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ddc:	2b28      	cmp	r3, #40	; 0x28
 8002dde:	d107      	bne.n	8002df0 <I2C_ITError+0x4c>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2228      	movs	r2, #40	; 0x28
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002dee:	e015      	b.n	8002e1c <I2C_ITError+0x78>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dfe:	d006      	beq.n	8002e0e <I2C_ITError+0x6a>
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	2b60      	cmp	r3, #96	; 0x60
 8002e04:	d003      	beq.n	8002e0e <I2C_ITError+0x6a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e2a:	d162      	bne.n	8002ef2 <I2C_ITError+0x14e>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d020      	beq.n	8002e8c <I2C_ITError+0xe8>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4e:	4a5f      	ldr	r2, [pc, #380]	; (8002fcc <I2C_ITError+0x228>)
 8002e50:	651a      	str	r2, [r3, #80]	; 0x50
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe f96c 	bl	8001134 <HAL_DMA_Abort_IT>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 8089 	beq.w	8002f76 <I2C_ITError+0x1d2>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e86:	4610      	mov	r0, r2
 8002e88:	4798      	blx	r3
 8002e8a:	e074      	b.n	8002f76 <I2C_ITError+0x1d2>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	4a4e      	ldr	r2, [pc, #312]	; (8002fcc <I2C_ITError+0x228>)
 8002e92:	651a      	str	r2, [r3, #80]	; 0x50
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe f94b 	bl	8001134 <HAL_DMA_Abort_IT>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d068      	beq.n	8002f76 <I2C_ITError+0x1d2>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eae:	2b40      	cmp	r3, #64	; 0x40
 8002eb0:	d10b      	bne.n	8002eca <I2C_ITError+0x126>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	701a      	strb	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0201 	bic.w	r2, r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002eec:	4610      	mov	r0, r2
 8002eee:	4798      	blx	r3
 8002ef0:	e041      	b.n	8002f76 <I2C_ITError+0x1d2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b60      	cmp	r3, #96	; 0x60
 8002efc:	d125      	bne.n	8002f4a <I2C_ITError+0x1a6>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	641a      	str	r2, [r3, #64]	; 0x40
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f16:	2b40      	cmp	r3, #64	; 0x40
 8002f18:	d10b      	bne.n	8002f32 <I2C_ITError+0x18e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	691a      	ldr	r2, [r3, #16]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	701a      	strb	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0201 	bic.w	r2, r2, #1
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fe ff67 	bl	8001e16 <HAL_I2C_AbortCpltCallback>
 8002f48:	e015      	b.n	8002f76 <I2C_ITError+0x1d2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f54:	2b40      	cmp	r3, #64	; 0x40
 8002f56:	d10b      	bne.n	8002f70 <I2C_ITError+0x1cc>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691a      	ldr	r2, [r3, #16]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7fe ff46 	bl	8001e02 <HAL_I2C_ErrorCallback>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7c:	73fb      	strb	r3, [r7, #15]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d11b      	bne.n	8002fc2 <I2C_ITError+0x21e>
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	2b28      	cmp	r3, #40	; 0x28
 8002f8e:	d118      	bne.n	8002fc2 <I2C_ITError+0x21e>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a0b      	ldr	r2, [pc, #44]	; (8002fd0 <I2C_ITError+0x22c>)
 8002fa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7fe ff02 	bl	8001dc6 <HAL_I2C_ListenCpltCallback>
 8002fc2:	bf00      	nop
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	08002fd5 	.word	0x08002fd5
 8002fd0:	ffff0000 	.word	0xffff0000

08002fd4 <I2C_DMAAbort>:
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe8:	72fb      	strb	r3, [r7, #11]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fee:	2200      	movs	r2, #0
 8002ff0:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003014:	2200      	movs	r2, #0
 8003016:	651a      	str	r2, [r3, #80]	; 0x50
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301c:	2200      	movs	r2, #0
 800301e:	651a      	str	r2, [r3, #80]	; 0x50
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0201 	bic.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b60      	cmp	r3, #96	; 0x60
 800303a:	d10e      	bne.n	800305a <I2C_DMAAbort+0x86>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	641a      	str	r2, [r3, #64]	; 0x40
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f7fe fedf 	bl	8001e16 <HAL_I2C_AbortCpltCallback>
 8003058:	e027      	b.n	80030aa <I2C_DMAAbort+0xd6>
 800305a:	7afb      	ldrb	r3, [r7, #11]
 800305c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003060:	2b28      	cmp	r3, #40	; 0x28
 8003062:	d117      	bne.n	8003094 <I2C_DMAAbort+0xc0>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	631a      	str	r2, [r3, #48]	; 0x30
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2228      	movs	r2, #40	; 0x28
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003092:	e007      	b.n	80030a4 <I2C_DMAAbort+0xd0>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f7fe feac 	bl	8001e02 <HAL_I2C_ErrorCallback>
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <I2C_ConvertOtherXferOptions>:
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80030c2:	d103      	bne.n	80030cc <I2C_ConvertOtherXferOptions+0x1a>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80030ca:	e007      	b.n	80030dc <I2C_ConvertOtherXferOptions+0x2a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80030d4:	d102      	bne.n	80030dc <I2C_ConvertOtherXferOptions+0x2a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2208      	movs	r2, #8
 80030da:	62da      	str	r2, [r3, #44]	; 0x2c
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_RCC_OscConfig>:
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_RCC_OscConfig+0x12>
 80030f6:	2301      	movs	r3, #1
 80030f8:	e22d      	b.n	8003556 <HAL_RCC_OscConfig+0x46e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d075      	beq.n	80031f2 <HAL_RCC_OscConfig+0x10a>
 8003106:	4ba3      	ldr	r3, [pc, #652]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b04      	cmp	r3, #4
 8003110:	d00c      	beq.n	800312c <HAL_RCC_OscConfig+0x44>
 8003112:	4ba0      	ldr	r3, [pc, #640]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 030c 	and.w	r3, r3, #12
 800311a:	2b08      	cmp	r3, #8
 800311c:	d112      	bne.n	8003144 <HAL_RCC_OscConfig+0x5c>
 800311e:	4b9d      	ldr	r3, [pc, #628]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800312a:	d10b      	bne.n	8003144 <HAL_RCC_OscConfig+0x5c>
 800312c:	4b99      	ldr	r3, [pc, #612]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d05b      	beq.n	80031f0 <HAL_RCC_OscConfig+0x108>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d157      	bne.n	80031f0 <HAL_RCC_OscConfig+0x108>
 8003140:	2301      	movs	r3, #1
 8003142:	e208      	b.n	8003556 <HAL_RCC_OscConfig+0x46e>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800314c:	d106      	bne.n	800315c <HAL_RCC_OscConfig+0x74>
 800314e:	4b91      	ldr	r3, [pc, #580]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a90      	ldr	r2, [pc, #576]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	e01d      	b.n	8003198 <HAL_RCC_OscConfig+0xb0>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003164:	d10c      	bne.n	8003180 <HAL_RCC_OscConfig+0x98>
 8003166:	4b8b      	ldr	r3, [pc, #556]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a8a      	ldr	r2, [pc, #552]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800316c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	4b88      	ldr	r3, [pc, #544]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a87      	ldr	r2, [pc, #540]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	e00b      	b.n	8003198 <HAL_RCC_OscConfig+0xb0>
 8003180:	4b84      	ldr	r3, [pc, #528]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a83      	ldr	r2, [pc, #524]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800318a:	6013      	str	r3, [r2, #0]
 800318c:	4b81      	ldr	r3, [pc, #516]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a80      	ldr	r2, [pc, #512]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003196:	6013      	str	r3, [r2, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d013      	beq.n	80031c8 <HAL_RCC_OscConfig+0xe0>
 80031a0:	f7fd feaa 	bl	8000ef8 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0xd2>
 80031a8:	f7fd fea6 	bl	8000ef8 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b64      	cmp	r3, #100	; 0x64
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0xd2>
 80031b6:	2303      	movs	r3, #3
 80031b8:	e1cd      	b.n	8003556 <HAL_RCC_OscConfig+0x46e>
 80031ba:	4b76      	ldr	r3, [pc, #472]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0xc0>
 80031c6:	e014      	b.n	80031f2 <HAL_RCC_OscConfig+0x10a>
 80031c8:	f7fd fe96 	bl	8000ef8 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0xfa>
 80031d0:	f7fd fe92 	bl	8000ef8 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b64      	cmp	r3, #100	; 0x64
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0xfa>
 80031de:	2303      	movs	r3, #3
 80031e0:	e1b9      	b.n	8003556 <HAL_RCC_OscConfig+0x46e>
 80031e2:	4b6c      	ldr	r3, [pc, #432]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0xe8>
 80031ee:	e000      	b.n	80031f2 <HAL_RCC_OscConfig+0x10a>
 80031f0:	bf00      	nop
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d063      	beq.n	80032c6 <HAL_RCC_OscConfig+0x1de>
 80031fe:	4b65      	ldr	r3, [pc, #404]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00b      	beq.n	8003222 <HAL_RCC_OscConfig+0x13a>
 800320a:	4b62      	ldr	r3, [pc, #392]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	2b08      	cmp	r3, #8
 8003214:	d11c      	bne.n	8003250 <HAL_RCC_OscConfig+0x168>
 8003216:	4b5f      	ldr	r3, [pc, #380]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d116      	bne.n	8003250 <HAL_RCC_OscConfig+0x168>
 8003222:	4b5c      	ldr	r3, [pc, #368]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d005      	beq.n	800323a <HAL_RCC_OscConfig+0x152>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d001      	beq.n	800323a <HAL_RCC_OscConfig+0x152>
 8003236:	2301      	movs	r3, #1
 8003238:	e18d      	b.n	8003556 <HAL_RCC_OscConfig+0x46e>
 800323a:	4b56      	ldr	r3, [pc, #344]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4952      	ldr	r1, [pc, #328]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800324a:	4313      	orrs	r3, r2
 800324c:	600b      	str	r3, [r1, #0]
 800324e:	e03a      	b.n	80032c6 <HAL_RCC_OscConfig+0x1de>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d020      	beq.n	800329a <HAL_RCC_OscConfig+0x1b2>
 8003258:	4b4f      	ldr	r3, [pc, #316]	; (8003398 <HAL_RCC_OscConfig+0x2b0>)
 800325a:	2201      	movs	r2, #1
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	f7fd fe4b 	bl	8000ef8 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x190>
 8003266:	f7fd fe47 	bl	8000ef8 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x190>
 8003274:	2303      	movs	r3, #3
 8003276:	e16e      	b.n	8003556 <HAL_RCC_OscConfig+0x46e>
 8003278:	4b46      	ldr	r3, [pc, #280]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0f0      	beq.n	8003266 <HAL_RCC_OscConfig+0x17e>
 8003284:	4b43      	ldr	r3, [pc, #268]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4940      	ldr	r1, [pc, #256]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003294:	4313      	orrs	r3, r2
 8003296:	600b      	str	r3, [r1, #0]
 8003298:	e015      	b.n	80032c6 <HAL_RCC_OscConfig+0x1de>
 800329a:	4b3f      	ldr	r3, [pc, #252]	; (8003398 <HAL_RCC_OscConfig+0x2b0>)
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	f7fd fe2a 	bl	8000ef8 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x1d2>
 80032a8:	f7fd fe26 	bl	8000ef8 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x1d2>
 80032b6:	2303      	movs	r3, #3
 80032b8:	e14d      	b.n	8003556 <HAL_RCC_OscConfig+0x46e>
 80032ba:	4b36      	ldr	r3, [pc, #216]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x1c0>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d030      	beq.n	8003334 <HAL_RCC_OscConfig+0x24c>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d016      	beq.n	8003308 <HAL_RCC_OscConfig+0x220>
 80032da:	4b30      	ldr	r3, [pc, #192]	; (800339c <HAL_RCC_OscConfig+0x2b4>)
 80032dc:	2201      	movs	r2, #1
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	f7fd fe0a 	bl	8000ef8 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x212>
 80032e8:	f7fd fe06 	bl	8000ef8 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x212>
 80032f6:	2303      	movs	r3, #3
 80032f8:	e12d      	b.n	8003556 <HAL_RCC_OscConfig+0x46e>
 80032fa:	4b26      	ldr	r3, [pc, #152]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 80032fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x200>
 8003306:	e015      	b.n	8003334 <HAL_RCC_OscConfig+0x24c>
 8003308:	4b24      	ldr	r3, [pc, #144]	; (800339c <HAL_RCC_OscConfig+0x2b4>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	f7fd fdf3 	bl	8000ef8 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x240>
 8003316:	f7fd fdef 	bl	8000ef8 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x240>
 8003324:	2303      	movs	r3, #3
 8003326:	e116      	b.n	8003556 <HAL_RCC_OscConfig+0x46e>
 8003328:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800332a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f0      	bne.n	8003316 <HAL_RCC_OscConfig+0x22e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 80a0 	beq.w	8003482 <HAL_RCC_OscConfig+0x39a>
 8003342:	2300      	movs	r3, #0
 8003344:	75fb      	strb	r3, [r7, #23]
 8003346:	4b13      	ldr	r3, [pc, #76]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10f      	bne.n	8003372 <HAL_RCC_OscConfig+0x28a>
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	4a0e      	ldr	r2, [pc, #56]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800335c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003360:	6413      	str	r3, [r2, #64]	; 0x40
 8003362:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2301      	movs	r3, #1
 8003370:	75fb      	strb	r3, [r7, #23]
 8003372:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <HAL_RCC_OscConfig+0x2b8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d121      	bne.n	80033c2 <HAL_RCC_OscConfig+0x2da>
 800337e:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <HAL_RCC_OscConfig+0x2b8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a07      	ldr	r2, [pc, #28]	; (80033a0 <HAL_RCC_OscConfig+0x2b8>)
 8003384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	f7fd fdb5 	bl	8000ef8 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]
 8003390:	e011      	b.n	80033b6 <HAL_RCC_OscConfig+0x2ce>
 8003392:	bf00      	nop
 8003394:	40023800 	.word	0x40023800
 8003398:	42470000 	.word	0x42470000
 800339c:	42470e80 	.word	0x42470e80
 80033a0:	40007000 	.word	0x40007000
 80033a4:	f7fd fda8 	bl	8000ef8 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x2ce>
 80033b2:	2303      	movs	r3, #3
 80033b4:	e0cf      	b.n	8003556 <HAL_RCC_OscConfig+0x46e>
 80033b6:	4b6a      	ldr	r3, [pc, #424]	; (8003560 <HAL_RCC_OscConfig+0x478>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0x2bc>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d106      	bne.n	80033d8 <HAL_RCC_OscConfig+0x2f0>
 80033ca:	4b66      	ldr	r3, [pc, #408]	; (8003564 <HAL_RCC_OscConfig+0x47c>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ce:	4a65      	ldr	r2, [pc, #404]	; (8003564 <HAL_RCC_OscConfig+0x47c>)
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	6713      	str	r3, [r2, #112]	; 0x70
 80033d6:	e01c      	b.n	8003412 <HAL_RCC_OscConfig+0x32a>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b05      	cmp	r3, #5
 80033de:	d10c      	bne.n	80033fa <HAL_RCC_OscConfig+0x312>
 80033e0:	4b60      	ldr	r3, [pc, #384]	; (8003564 <HAL_RCC_OscConfig+0x47c>)
 80033e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e4:	4a5f      	ldr	r2, [pc, #380]	; (8003564 <HAL_RCC_OscConfig+0x47c>)
 80033e6:	f043 0304 	orr.w	r3, r3, #4
 80033ea:	6713      	str	r3, [r2, #112]	; 0x70
 80033ec:	4b5d      	ldr	r3, [pc, #372]	; (8003564 <HAL_RCC_OscConfig+0x47c>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	4a5c      	ldr	r2, [pc, #368]	; (8003564 <HAL_RCC_OscConfig+0x47c>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	6713      	str	r3, [r2, #112]	; 0x70
 80033f8:	e00b      	b.n	8003412 <HAL_RCC_OscConfig+0x32a>
 80033fa:	4b5a      	ldr	r3, [pc, #360]	; (8003564 <HAL_RCC_OscConfig+0x47c>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	4a59      	ldr	r2, [pc, #356]	; (8003564 <HAL_RCC_OscConfig+0x47c>)
 8003400:	f023 0301 	bic.w	r3, r3, #1
 8003404:	6713      	str	r3, [r2, #112]	; 0x70
 8003406:	4b57      	ldr	r3, [pc, #348]	; (8003564 <HAL_RCC_OscConfig+0x47c>)
 8003408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340a:	4a56      	ldr	r2, [pc, #344]	; (8003564 <HAL_RCC_OscConfig+0x47c>)
 800340c:	f023 0304 	bic.w	r3, r3, #4
 8003410:	6713      	str	r3, [r2, #112]	; 0x70
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d015      	beq.n	8003446 <HAL_RCC_OscConfig+0x35e>
 800341a:	f7fd fd6d 	bl	8000ef8 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]
 8003420:	e00a      	b.n	8003438 <HAL_RCC_OscConfig+0x350>
 8003422:	f7fd fd69 	bl	8000ef8 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003430:	4293      	cmp	r3, r2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x350>
 8003434:	2303      	movs	r3, #3
 8003436:	e08e      	b.n	8003556 <HAL_RCC_OscConfig+0x46e>
 8003438:	4b4a      	ldr	r3, [pc, #296]	; (8003564 <HAL_RCC_OscConfig+0x47c>)
 800343a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0ee      	beq.n	8003422 <HAL_RCC_OscConfig+0x33a>
 8003444:	e014      	b.n	8003470 <HAL_RCC_OscConfig+0x388>
 8003446:	f7fd fd57 	bl	8000ef8 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]
 800344c:	e00a      	b.n	8003464 <HAL_RCC_OscConfig+0x37c>
 800344e:	f7fd fd53 	bl	8000ef8 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	f241 3288 	movw	r2, #5000	; 0x1388
 800345c:	4293      	cmp	r3, r2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x37c>
 8003460:	2303      	movs	r3, #3
 8003462:	e078      	b.n	8003556 <HAL_RCC_OscConfig+0x46e>
 8003464:	4b3f      	ldr	r3, [pc, #252]	; (8003564 <HAL_RCC_OscConfig+0x47c>)
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1ee      	bne.n	800344e <HAL_RCC_OscConfig+0x366>
 8003470:	7dfb      	ldrb	r3, [r7, #23]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d105      	bne.n	8003482 <HAL_RCC_OscConfig+0x39a>
 8003476:	4b3b      	ldr	r3, [pc, #236]	; (8003564 <HAL_RCC_OscConfig+0x47c>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	4a3a      	ldr	r2, [pc, #232]	; (8003564 <HAL_RCC_OscConfig+0x47c>)
 800347c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003480:	6413      	str	r3, [r2, #64]	; 0x40
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d064      	beq.n	8003554 <HAL_RCC_OscConfig+0x46c>
 800348a:	4b36      	ldr	r3, [pc, #216]	; (8003564 <HAL_RCC_OscConfig+0x47c>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b08      	cmp	r3, #8
 8003494:	d05c      	beq.n	8003550 <HAL_RCC_OscConfig+0x468>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d141      	bne.n	8003522 <HAL_RCC_OscConfig+0x43a>
 800349e:	4b32      	ldr	r3, [pc, #200]	; (8003568 <HAL_RCC_OscConfig+0x480>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	f7fd fd28 	bl	8000ef8 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x3d6>
 80034ac:	f7fd fd24 	bl	8000ef8 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x3d6>
 80034ba:	2303      	movs	r3, #3
 80034bc:	e04b      	b.n	8003556 <HAL_RCC_OscConfig+0x46e>
 80034be:	4b29      	ldr	r3, [pc, #164]	; (8003564 <HAL_RCC_OscConfig+0x47c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x3c4>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69da      	ldr	r2, [r3, #28]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	019b      	lsls	r3, r3, #6
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	085b      	lsrs	r3, r3, #1
 80034e2:	3b01      	subs	r3, #1
 80034e4:	041b      	lsls	r3, r3, #16
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	061b      	lsls	r3, r3, #24
 80034ee:	491d      	ldr	r1, [pc, #116]	; (8003564 <HAL_RCC_OscConfig+0x47c>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	604b      	str	r3, [r1, #4]
 80034f4:	4b1c      	ldr	r3, [pc, #112]	; (8003568 <HAL_RCC_OscConfig+0x480>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	f7fd fcfd 	bl	8000ef8 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x42c>
 8003502:	f7fd fcf9 	bl	8000ef8 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x42c>
 8003510:	2303      	movs	r3, #3
 8003512:	e020      	b.n	8003556 <HAL_RCC_OscConfig+0x46e>
 8003514:	4b13      	ldr	r3, [pc, #76]	; (8003564 <HAL_RCC_OscConfig+0x47c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0x41a>
 8003520:	e018      	b.n	8003554 <HAL_RCC_OscConfig+0x46c>
 8003522:	4b11      	ldr	r3, [pc, #68]	; (8003568 <HAL_RCC_OscConfig+0x480>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	f7fd fce6 	bl	8000ef8 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x45a>
 8003530:	f7fd fce2 	bl	8000ef8 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x45a>
 800353e:	2303      	movs	r3, #3
 8003540:	e009      	b.n	8003556 <HAL_RCC_OscConfig+0x46e>
 8003542:	4b08      	ldr	r3, [pc, #32]	; (8003564 <HAL_RCC_OscConfig+0x47c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x448>
 800354e:	e001      	b.n	8003554 <HAL_RCC_OscConfig+0x46c>
 8003550:	2301      	movs	r3, #1
 8003552:	e000      	b.n	8003556 <HAL_RCC_OscConfig+0x46e>
 8003554:	2300      	movs	r3, #0
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40007000 	.word	0x40007000
 8003564:	40023800 	.word	0x40023800
 8003568:	42470060 	.word	0x42470060

0800356c <HAL_RCC_ClockConfig>:
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_RCC_ClockConfig+0x14>
 800357c:	2301      	movs	r3, #1
 800357e:	e0ca      	b.n	8003716 <HAL_RCC_ClockConfig+0x1aa>
 8003580:	4b67      	ldr	r3, [pc, #412]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d90c      	bls.n	80035a8 <HAL_RCC_ClockConfig+0x3c>
 800358e:	4b64      	ldr	r3, [pc, #400]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	4b62      	ldr	r3, [pc, #392]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x3c>
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0b6      	b.n	8003716 <HAL_RCC_ClockConfig+0x1aa>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d020      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x8a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <HAL_RCC_ClockConfig+0x60>
 80035c0:	4b58      	ldr	r3, [pc, #352]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	4a57      	ldr	r2, [pc, #348]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 80035c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035ca:	6093      	str	r3, [r2, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x78>
 80035d8:	4b52      	ldr	r3, [pc, #328]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	4a51      	ldr	r2, [pc, #324]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 80035de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035e2:	6093      	str	r3, [r2, #8]
 80035e4:	4b4f      	ldr	r3, [pc, #316]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	494c      	ldr	r1, [pc, #304]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	608b      	str	r3, [r1, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d044      	beq.n	800368c <HAL_RCC_ClockConfig+0x120>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d107      	bne.n	800361a <HAL_RCC_ClockConfig+0xae>
 800360a:	4b46      	ldr	r3, [pc, #280]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d119      	bne.n	800364a <HAL_RCC_ClockConfig+0xde>
 8003616:	2301      	movs	r3, #1
 8003618:	e07d      	b.n	8003716 <HAL_RCC_ClockConfig+0x1aa>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d003      	beq.n	800362a <HAL_RCC_ClockConfig+0xbe>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b03      	cmp	r3, #3
 8003628:	d107      	bne.n	800363a <HAL_RCC_ClockConfig+0xce>
 800362a:	4b3e      	ldr	r3, [pc, #248]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d109      	bne.n	800364a <HAL_RCC_ClockConfig+0xde>
 8003636:	2301      	movs	r3, #1
 8003638:	e06d      	b.n	8003716 <HAL_RCC_ClockConfig+0x1aa>
 800363a:	4b3a      	ldr	r3, [pc, #232]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_RCC_ClockConfig+0xde>
 8003646:	2301      	movs	r3, #1
 8003648:	e065      	b.n	8003716 <HAL_RCC_ClockConfig+0x1aa>
 800364a:	4b36      	ldr	r3, [pc, #216]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f023 0203 	bic.w	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	4933      	ldr	r1, [pc, #204]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 8003658:	4313      	orrs	r3, r2
 800365a:	608b      	str	r3, [r1, #8]
 800365c:	f7fd fc4c 	bl	8000ef8 <HAL_GetTick>
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	e00a      	b.n	800367a <HAL_RCC_ClockConfig+0x10e>
 8003664:	f7fd fc48 	bl	8000ef8 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003672:	4293      	cmp	r3, r2
 8003674:	d901      	bls.n	800367a <HAL_RCC_ClockConfig+0x10e>
 8003676:	2303      	movs	r3, #3
 8003678:	e04d      	b.n	8003716 <HAL_RCC_ClockConfig+0x1aa>
 800367a:	4b2a      	ldr	r3, [pc, #168]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 020c 	and.w	r2, r3, #12
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	429a      	cmp	r2, r3
 800368a:	d1eb      	bne.n	8003664 <HAL_RCC_ClockConfig+0xf8>
 800368c:	4b24      	ldr	r3, [pc, #144]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d20c      	bcs.n	80036b4 <HAL_RCC_ClockConfig+0x148>
 800369a:	4b21      	ldr	r3, [pc, #132]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	701a      	strb	r2, [r3, #0]
 80036a2:	4b1f      	ldr	r3, [pc, #124]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x148>
 80036b0:	2301      	movs	r3, #1
 80036b2:	e030      	b.n	8003716 <HAL_RCC_ClockConfig+0x1aa>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x166>
 80036c0:	4b18      	ldr	r3, [pc, #96]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	4915      	ldr	r1, [pc, #84]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	608b      	str	r3, [r1, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d009      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x186>
 80036de:	4b11      	ldr	r3, [pc, #68]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	490d      	ldr	r1, [pc, #52]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	608b      	str	r3, [r1, #8]
 80036f2:	f000 f81d 	bl	8003730 <HAL_RCC_GetSysClockFreq>
 80036f6:	4601      	mov	r1, r0
 80036f8:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	4a09      	ldr	r2, [pc, #36]	; (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	5cd3      	ldrb	r3, [r2, r3]
 8003706:	fa21 f303 	lsr.w	r3, r1, r3
 800370a:	4a08      	ldr	r2, [pc, #32]	; (800372c <HAL_RCC_ClockConfig+0x1c0>)
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	2000      	movs	r0, #0
 8003710:	f006 fa40 	bl	8009b94 <HAL_InitTick>
 8003714:	2300      	movs	r3, #0
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40023c00 	.word	0x40023c00
 8003724:	40023800 	.word	0x40023800
 8003728:	0800c328 	.word	0x0800c328
 800372c:	20000058 	.word	0x20000058

08003730 <HAL_RCC_GetSysClockFreq>:
 8003730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	2300      	movs	r3, #0
 8003738:	607b      	str	r3, [r7, #4]
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	2300      	movs	r3, #0
 8003740:	603b      	str	r3, [r7, #0]
 8003742:	2300      	movs	r3, #0
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	4b50      	ldr	r3, [pc, #320]	; (8003888 <HAL_RCC_GetSysClockFreq+0x158>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b04      	cmp	r3, #4
 8003750:	d007      	beq.n	8003762 <HAL_RCC_GetSysClockFreq+0x32>
 8003752:	2b08      	cmp	r3, #8
 8003754:	d008      	beq.n	8003768 <HAL_RCC_GetSysClockFreq+0x38>
 8003756:	2b00      	cmp	r3, #0
 8003758:	f040 808d 	bne.w	8003876 <HAL_RCC_GetSysClockFreq+0x146>
 800375c:	4b4b      	ldr	r3, [pc, #300]	; (800388c <HAL_RCC_GetSysClockFreq+0x15c>)
 800375e:	60bb      	str	r3, [r7, #8]
 8003760:	e08c      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x14c>
 8003762:	4b4b      	ldr	r3, [pc, #300]	; (8003890 <HAL_RCC_GetSysClockFreq+0x160>)
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	e089      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x14c>
 8003768:	4b47      	ldr	r3, [pc, #284]	; (8003888 <HAL_RCC_GetSysClockFreq+0x158>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003770:	607b      	str	r3, [r7, #4]
 8003772:	4b45      	ldr	r3, [pc, #276]	; (8003888 <HAL_RCC_GetSysClockFreq+0x158>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d023      	beq.n	80037c6 <HAL_RCC_GetSysClockFreq+0x96>
 800377e:	4b42      	ldr	r3, [pc, #264]	; (8003888 <HAL_RCC_GetSysClockFreq+0x158>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	099b      	lsrs	r3, r3, #6
 8003784:	f04f 0400 	mov.w	r4, #0
 8003788:	f240 11ff 	movw	r1, #511	; 0x1ff
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	ea03 0501 	and.w	r5, r3, r1
 8003794:	ea04 0602 	and.w	r6, r4, r2
 8003798:	4a3d      	ldr	r2, [pc, #244]	; (8003890 <HAL_RCC_GetSysClockFreq+0x160>)
 800379a:	fb02 f106 	mul.w	r1, r2, r6
 800379e:	2200      	movs	r2, #0
 80037a0:	fb02 f205 	mul.w	r2, r2, r5
 80037a4:	440a      	add	r2, r1
 80037a6:	493a      	ldr	r1, [pc, #232]	; (8003890 <HAL_RCC_GetSysClockFreq+0x160>)
 80037a8:	fba5 0101 	umull	r0, r1, r5, r1
 80037ac:	1853      	adds	r3, r2, r1
 80037ae:	4619      	mov	r1, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f04f 0400 	mov.w	r4, #0
 80037b6:	461a      	mov	r2, r3
 80037b8:	4623      	mov	r3, r4
 80037ba:	f7fd f9e7 	bl	8000b8c <__aeabi_uldivmod>
 80037be:	4603      	mov	r3, r0
 80037c0:	460c      	mov	r4, r1
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	e049      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x12a>
 80037c6:	4b30      	ldr	r3, [pc, #192]	; (8003888 <HAL_RCC_GetSysClockFreq+0x158>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	099b      	lsrs	r3, r3, #6
 80037cc:	f04f 0400 	mov.w	r4, #0
 80037d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	ea03 0501 	and.w	r5, r3, r1
 80037dc:	ea04 0602 	and.w	r6, r4, r2
 80037e0:	4629      	mov	r1, r5
 80037e2:	4632      	mov	r2, r6
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	f04f 0400 	mov.w	r4, #0
 80037ec:	0154      	lsls	r4, r2, #5
 80037ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037f2:	014b      	lsls	r3, r1, #5
 80037f4:	4619      	mov	r1, r3
 80037f6:	4622      	mov	r2, r4
 80037f8:	1b49      	subs	r1, r1, r5
 80037fa:	eb62 0206 	sbc.w	r2, r2, r6
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	f04f 0400 	mov.w	r4, #0
 8003806:	0194      	lsls	r4, r2, #6
 8003808:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800380c:	018b      	lsls	r3, r1, #6
 800380e:	1a5b      	subs	r3, r3, r1
 8003810:	eb64 0402 	sbc.w	r4, r4, r2
 8003814:	f04f 0100 	mov.w	r1, #0
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	00e2      	lsls	r2, r4, #3
 800381e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003822:	00d9      	lsls	r1, r3, #3
 8003824:	460b      	mov	r3, r1
 8003826:	4614      	mov	r4, r2
 8003828:	195b      	adds	r3, r3, r5
 800382a:	eb44 0406 	adc.w	r4, r4, r6
 800382e:	f04f 0100 	mov.w	r1, #0
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	02a2      	lsls	r2, r4, #10
 8003838:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800383c:	0299      	lsls	r1, r3, #10
 800383e:	460b      	mov	r3, r1
 8003840:	4614      	mov	r4, r2
 8003842:	4618      	mov	r0, r3
 8003844:	4621      	mov	r1, r4
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f04f 0400 	mov.w	r4, #0
 800384c:	461a      	mov	r2, r3
 800384e:	4623      	mov	r3, r4
 8003850:	f7fd f99c 	bl	8000b8c <__aeabi_uldivmod>
 8003854:	4603      	mov	r3, r0
 8003856:	460c      	mov	r4, r1
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <HAL_RCC_GetSysClockFreq+0x158>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	0c1b      	lsrs	r3, r3, #16
 8003860:	f003 0303 	and.w	r3, r3, #3
 8003864:	3301      	adds	r3, #1
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003872:	60bb      	str	r3, [r7, #8]
 8003874:	e002      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x14c>
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	bf00      	nop
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003886:	bf00      	nop
 8003888:	40023800 	.word	0x40023800
 800388c:	00f42400 	.word	0x00f42400
 8003890:	017d7840 	.word	0x017d7840

08003894 <HAL_RCC_GetHCLKFreq>:
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
 8003898:	4b03      	ldr	r3, [pc, #12]	; (80038a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20000058 	.word	0x20000058

080038ac <HAL_RCC_GetPCLK1Freq>:
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	f7ff fff0 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038b4:	4601      	mov	r1, r0
 80038b6:	4b05      	ldr	r3, [pc, #20]	; (80038cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	0a9b      	lsrs	r3, r3, #10
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	4a03      	ldr	r2, [pc, #12]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c2:	5cd3      	ldrb	r3, [r2, r3]
 80038c4:	fa21 f303 	lsr.w	r3, r1, r3
 80038c8:	4618      	mov	r0, r3
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40023800 	.word	0x40023800
 80038d0:	0800c338 	.word	0x0800c338

080038d4 <HAL_RCC_GetPCLK2Freq>:
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	f7ff ffdc 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038dc:	4601      	mov	r1, r0
 80038de:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	0b5b      	lsrs	r3, r3, #13
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	4a03      	ldr	r2, [pc, #12]	; (80038f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ea:	5cd3      	ldrb	r3, [r2, r3]
 80038ec:	fa21 f303 	lsr.w	r3, r1, r3
 80038f0:	4618      	mov	r0, r3
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40023800 	.word	0x40023800
 80038f8:	0800c338 	.word	0x0800c338

080038fc <HAL_RCC_GetClockConfig>:
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	220f      	movs	r2, #15
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	4b12      	ldr	r3, [pc, #72]	; (8003958 <HAL_RCC_GetClockConfig+0x5c>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 0203 	and.w	r2, r3, #3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	605a      	str	r2, [r3, #4]
 8003918:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <HAL_RCC_GetClockConfig+0x5c>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <HAL_RCC_GetClockConfig+0x5c>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	60da      	str	r2, [r3, #12]
 8003930:	4b09      	ldr	r3, [pc, #36]	; (8003958 <HAL_RCC_GetClockConfig+0x5c>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	08db      	lsrs	r3, r3, #3
 8003936:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	611a      	str	r2, [r3, #16]
 800393e:	4b07      	ldr	r3, [pc, #28]	; (800395c <HAL_RCC_GetClockConfig+0x60>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 020f 	and.w	r2, r3, #15
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40023800 	.word	0x40023800
 800395c:	40023c00 	.word	0x40023c00

08003960 <HAL_SPI_Init>:
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_SPI_Init+0x12>
 800396e:	2301      	movs	r3, #1
 8003970:	e056      	b.n	8003a20 <HAL_SPI_Init+0xc0>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	629a      	str	r2, [r3, #40]	; 0x28
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d106      	bne.n	8003992 <HAL_SPI_Init+0x32>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f005 fe61 	bl	8009654 <HAL_SPI_MspInit>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2202      	movs	r2, #2
 8003996:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	431a      	orrs	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	ea42 0103 	orr.w	r1, r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	0c1b      	lsrs	r3, r3, #16
 80039f0:	f003 0104 	and.w	r1, r3, #4
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	605a      	str	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	69da      	ldr	r2, [r3, #28]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a0e:	61da      	str	r2, [r3, #28]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	655a      	str	r2, [r3, #84]	; 0x54
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003a1e:	2300      	movs	r3, #0
 8003a20:	4618      	mov	r0, r3
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_TIM_Base_Init>:
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_TIM_Base_Init+0x12>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e01d      	b.n	8003a76 <HAL_TIM_Base_Init+0x4e>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <HAL_TIM_Base_Init+0x2c>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f005 febc 	bl	80097cc <HAL_TIM_Base_MspInit>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3304      	adds	r3, #4
 8003a64:	4619      	mov	r1, r3
 8003a66:	4610      	mov	r0, r2
 8003a68:	f000 fcaa 	bl	80043c0 <TIM_Base_SetConfig>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a74:	2300      	movs	r3, #0
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_TIM_Base_DeInit>:
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6a1a      	ldr	r2, [r3, #32]
 8003a94:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10f      	bne.n	8003abe <HAL_TIM_Base_DeInit+0x40>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6a1a      	ldr	r2, [r3, #32]
 8003aa4:	f240 4344 	movw	r3, #1092	; 0x444
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d107      	bne.n	8003abe <HAL_TIM_Base_DeInit+0x40>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0201 	bic.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f005 ff6c 	bl	800999c <HAL_TIM_Base_MspDeInit>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_TIM_Base_Start_IT>:
 8003ade:	b480      	push	{r7}
 8003ae0:	b085      	sub	sp, #20
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0201 	orr.w	r2, r2, #1
 8003af4:	60da      	str	r2, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b06      	cmp	r3, #6
 8003b06:	d007      	beq.n	8003b18 <HAL_TIM_Base_Start_IT+0x3a>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	2300      	movs	r3, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <HAL_TIM_PWM_Init>:
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_TIM_PWM_Init+0x12>
 8003b34:	2301      	movs	r3, #1
 8003b36:	e01d      	b.n	8003b74 <HAL_TIM_PWM_Init+0x4e>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d106      	bne.n	8003b52 <HAL_TIM_PWM_Init+0x2c>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f815 	bl	8003b7c <HAL_TIM_PWM_MspInit>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2202      	movs	r2, #2
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3304      	adds	r3, #4
 8003b62:	4619      	mov	r1, r3
 8003b64:	4610      	mov	r0, r2
 8003b66:	f000 fc2b 	bl	80043c0 <TIM_Base_SetConfig>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b72:	2300      	movs	r3, #0
 8003b74:	4618      	mov	r0, r3
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_TIM_PWM_MspInit>:
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_TIM_PWM_Start>:
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	6839      	ldr	r1, [r7, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 ffd0 	bl	8004b48 <TIM_CCxChannelCmd>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a10      	ldr	r2, [pc, #64]	; (8003bf0 <HAL_TIM_PWM_Start+0x60>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d107      	bne.n	8003bc2 <HAL_TIM_PWM_Start+0x32>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bc0:	645a      	str	r2, [r3, #68]	; 0x44
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2b06      	cmp	r3, #6
 8003bd2:	d007      	beq.n	8003be4 <HAL_TIM_PWM_Start+0x54>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0201 	orr.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	2300      	movs	r3, #0
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40010000 	.word	0x40010000

08003bf4 <HAL_TIM_IC_Init>:
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_TIM_IC_Init+0x12>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e01d      	b.n	8003c42 <HAL_TIM_IC_Init+0x4e>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_TIM_IC_Init+0x2c>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f815 	bl	8003c4a <HAL_TIM_IC_MspInit>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	4619      	mov	r1, r3
 8003c32:	4610      	mov	r0, r2
 8003c34:	f000 fbc4 	bl	80043c0 <TIM_Base_SetConfig>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c40:	2300      	movs	r3, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_TIM_IC_MspInit>:
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
	...

08003c60 <HAL_TIM_IC_Stop_IT>:
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b0c      	cmp	r3, #12
 8003c6e:	d841      	bhi.n	8003cf4 <HAL_TIM_IC_Stop_IT+0x94>
 8003c70:	a201      	add	r2, pc, #4	; (adr r2, 8003c78 <HAL_TIM_IC_Stop_IT+0x18>)
 8003c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c76:	bf00      	nop
 8003c78:	08003cad 	.word	0x08003cad
 8003c7c:	08003cf5 	.word	0x08003cf5
 8003c80:	08003cf5 	.word	0x08003cf5
 8003c84:	08003cf5 	.word	0x08003cf5
 8003c88:	08003cbf 	.word	0x08003cbf
 8003c8c:	08003cf5 	.word	0x08003cf5
 8003c90:	08003cf5 	.word	0x08003cf5
 8003c94:	08003cf5 	.word	0x08003cf5
 8003c98:	08003cd1 	.word	0x08003cd1
 8003c9c:	08003cf5 	.word	0x08003cf5
 8003ca0:	08003cf5 	.word	0x08003cf5
 8003ca4:	08003cf5 	.word	0x08003cf5
 8003ca8:	08003ce3 	.word	0x08003ce3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0202 	bic.w	r2, r2, #2
 8003cba:	60da      	str	r2, [r3, #12]
 8003cbc:	e01b      	b.n	8003cf6 <HAL_TIM_IC_Stop_IT+0x96>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0204 	bic.w	r2, r2, #4
 8003ccc:	60da      	str	r2, [r3, #12]
 8003cce:	e012      	b.n	8003cf6 <HAL_TIM_IC_Stop_IT+0x96>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0208 	bic.w	r2, r2, #8
 8003cde:	60da      	str	r2, [r3, #12]
 8003ce0:	e009      	b.n	8003cf6 <HAL_TIM_IC_Stop_IT+0x96>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68da      	ldr	r2, [r3, #12]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0210 	bic.w	r2, r2, #16
 8003cf0:	60da      	str	r2, [r3, #12]
 8003cf2:	e000      	b.n	8003cf6 <HAL_TIM_IC_Stop_IT+0x96>
 8003cf4:	bf00      	nop
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	6839      	ldr	r1, [r7, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 ff22 	bl	8004b48 <TIM_CCxChannelCmd>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6a1a      	ldr	r2, [r3, #32]
 8003d0a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10f      	bne.n	8003d34 <HAL_TIM_IC_Stop_IT+0xd4>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6a1a      	ldr	r2, [r3, #32]
 8003d1a:	f240 4344 	movw	r3, #1092	; 0x444
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d107      	bne.n	8003d34 <HAL_TIM_IC_Stop_IT+0xd4>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0201 	bic.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	2300      	movs	r3, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop

08003d40 <HAL_TIM_IRQHandler>:
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d122      	bne.n	8003d9c <HAL_TIM_IRQHandler+0x5c>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d11b      	bne.n	8003d9c <HAL_TIM_IRQHandler+0x5c>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f06f 0202 	mvn.w	r2, #2
 8003d6c:	611a      	str	r2, [r3, #16]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	771a      	strb	r2, [r3, #28]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_TIM_IRQHandler+0x4a>
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f005 fa76 	bl	8009274 <HAL_TIM_IC_CaptureCallback>
 8003d88:	e005      	b.n	8003d96 <HAL_TIM_IRQHandler+0x56>
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 faf9 	bl	8004382 <HAL_TIM_OC_DelayElapsedCallback>
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 fb00 	bl	8004396 <HAL_TIM_PWM_PulseFinishedCallback>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	771a      	strb	r2, [r3, #28]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d122      	bne.n	8003df0 <HAL_TIM_IRQHandler+0xb0>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d11b      	bne.n	8003df0 <HAL_TIM_IRQHandler+0xb0>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0204 	mvn.w	r2, #4
 8003dc0:	611a      	str	r2, [r3, #16]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	771a      	strb	r2, [r3, #28]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_TIM_IRQHandler+0x9e>
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f005 fa4c 	bl	8009274 <HAL_TIM_IC_CaptureCallback>
 8003ddc:	e005      	b.n	8003dea <HAL_TIM_IRQHandler+0xaa>
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 facf 	bl	8004382 <HAL_TIM_OC_DelayElapsedCallback>
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 fad6 	bl	8004396 <HAL_TIM_PWM_PulseFinishedCallback>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	771a      	strb	r2, [r3, #28]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d122      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x104>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d11b      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x104>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f06f 0208 	mvn.w	r2, #8
 8003e14:	611a      	str	r2, [r3, #16]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2204      	movs	r2, #4
 8003e1a:	771a      	strb	r2, [r3, #28]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_TIM_IRQHandler+0xf2>
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f005 fa22 	bl	8009274 <HAL_TIM_IC_CaptureCallback>
 8003e30:	e005      	b.n	8003e3e <HAL_TIM_IRQHandler+0xfe>
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 faa5 	bl	8004382 <HAL_TIM_OC_DelayElapsedCallback>
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 faac 	bl	8004396 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	771a      	strb	r2, [r3, #28]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	2b10      	cmp	r3, #16
 8003e50:	d122      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x158>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b10      	cmp	r3, #16
 8003e5e:	d11b      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x158>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0210 	mvn.w	r2, #16
 8003e68:	611a      	str	r2, [r3, #16]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2208      	movs	r2, #8
 8003e6e:	771a      	strb	r2, [r3, #28]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_TIM_IRQHandler+0x146>
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f005 f9f8 	bl	8009274 <HAL_TIM_IC_CaptureCallback>
 8003e84:	e005      	b.n	8003e92 <HAL_TIM_IRQHandler+0x152>
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fa7b 	bl	8004382 <HAL_TIM_OC_DelayElapsedCallback>
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 fa82 	bl	8004396 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	771a      	strb	r2, [r3, #28]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d10e      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x184>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d107      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x184>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0201 	mvn.w	r2, #1
 8003ebc:	611a      	str	r2, [r3, #16]
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f005 fae4 	bl	800948c <HAL_TIM_PeriodElapsedCallback>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ece:	2b80      	cmp	r3, #128	; 0x80
 8003ed0:	d10e      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x1b0>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003edc:	2b80      	cmp	r3, #128	; 0x80
 8003ede:	d107      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x1b0>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ee8:	611a      	str	r2, [r3, #16]
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fef2 	bl	8004cd4 <HAL_TIMEx_BreakCallback>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efa:	2b40      	cmp	r3, #64	; 0x40
 8003efc:	d10e      	bne.n	8003f1c <HAL_TIM_IRQHandler+0x1dc>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f08:	2b40      	cmp	r3, #64	; 0x40
 8003f0a:	d107      	bne.n	8003f1c <HAL_TIM_IRQHandler+0x1dc>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f14:	611a      	str	r2, [r3, #16]
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fa47 	bl	80043aa <HAL_TIM_TriggerCallback>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b20      	cmp	r3, #32
 8003f28:	d10e      	bne.n	8003f48 <HAL_TIM_IRQHandler+0x208>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d107      	bne.n	8003f48 <HAL_TIM_IRQHandler+0x208>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f06f 0220 	mvn.w	r2, #32
 8003f40:	611a      	str	r2, [r3, #16]
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 febc 	bl	8004cc0 <HAL_TIMEx_CommutCallback>
 8003f48:	bf00      	nop
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_TIM_IC_ConfigChannel>:
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_TIM_IC_ConfigChannel+0x1a>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e08a      	b.n	8004080 <HAL_TIM_IC_ConfigChannel+0x130>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2202      	movs	r2, #2
 8003f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d11b      	bne.n	8003fb8 <HAL_TIM_IC_ConfigChannel+0x68>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6818      	ldr	r0, [r3, #0]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	6819      	ldr	r1, [r3, #0]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f000 fc22 	bl	80047d8 <TIM_TI1_SetConfig>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699a      	ldr	r2, [r3, #24]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 020c 	bic.w	r2, r2, #12
 8003fa2:	619a      	str	r2, [r3, #24]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6999      	ldr	r1, [r3, #24]
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	619a      	str	r2, [r3, #24]
 8003fb6:	e05a      	b.n	800406e <HAL_TIM_IC_ConfigChannel+0x11e>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d11c      	bne.n	8003ff8 <HAL_TIM_IC_ConfigChannel+0xa8>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	6819      	ldr	r1, [r3, #0]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f000 fc9a 	bl	8004906 <TIM_TI2_SetConfig>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	699a      	ldr	r2, [r3, #24]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003fe0:	619a      	str	r2, [r3, #24]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6999      	ldr	r1, [r3, #24]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	021a      	lsls	r2, r3, #8
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	619a      	str	r2, [r3, #24]
 8003ff6:	e03a      	b.n	800406e <HAL_TIM_IC_ConfigChannel+0x11e>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	d11b      	bne.n	8004036 <HAL_TIM_IC_ConfigChannel+0xe6>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	6819      	ldr	r1, [r3, #0]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f000 fce7 	bl	80049e0 <TIM_TI3_SetConfig>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69da      	ldr	r2, [r3, #28]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 020c 	bic.w	r2, r2, #12
 8004020:	61da      	str	r2, [r3, #28]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69d9      	ldr	r1, [r3, #28]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	61da      	str	r2, [r3, #28]
 8004034:	e01b      	b.n	800406e <HAL_TIM_IC_ConfigChannel+0x11e>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6818      	ldr	r0, [r3, #0]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	6819      	ldr	r1, [r3, #0]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f000 fd07 	bl	8004a58 <TIM_TI4_SetConfig>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69da      	ldr	r2, [r3, #28]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004058:	61da      	str	r2, [r3, #28]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69d9      	ldr	r1, [r3, #28]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	021a      	lsls	r2, r3, #8
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	61da      	str	r2, [r3, #28]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800407e:	2300      	movs	r3, #0
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_TIM_PWM_ConfigChannel>:
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409a:	2b01      	cmp	r3, #1
 800409c:	d101      	bne.n	80040a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800409e:	2302      	movs	r3, #2
 80040a0:	e0b4      	b.n	800420c <HAL_TIM_PWM_ConfigChannel+0x184>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2202      	movs	r2, #2
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b0c      	cmp	r3, #12
 80040b6:	f200 809f 	bhi.w	80041f8 <HAL_TIM_PWM_ConfigChannel+0x170>
 80040ba:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80040bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c0:	080040f5 	.word	0x080040f5
 80040c4:	080041f9 	.word	0x080041f9
 80040c8:	080041f9 	.word	0x080041f9
 80040cc:	080041f9 	.word	0x080041f9
 80040d0:	08004135 	.word	0x08004135
 80040d4:	080041f9 	.word	0x080041f9
 80040d8:	080041f9 	.word	0x080041f9
 80040dc:	080041f9 	.word	0x080041f9
 80040e0:	08004177 	.word	0x08004177
 80040e4:	080041f9 	.word	0x080041f9
 80040e8:	080041f9 	.word	0x080041f9
 80040ec:	080041f9 	.word	0x080041f9
 80040f0:	080041b7 	.word	0x080041b7
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68b9      	ldr	r1, [r7, #8]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 f9e0 	bl	80044c0 <TIM_OC1_SetConfig>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699a      	ldr	r2, [r3, #24]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0208 	orr.w	r2, r2, #8
 800410e:	619a      	str	r2, [r3, #24]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0204 	bic.w	r2, r2, #4
 800411e:	619a      	str	r2, [r3, #24]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6999      	ldr	r1, [r3, #24]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	691a      	ldr	r2, [r3, #16]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	619a      	str	r2, [r3, #24]
 8004132:	e062      	b.n	80041fa <HAL_TIM_PWM_ConfigChannel+0x172>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	4618      	mov	r0, r3
 800413c:	f000 fa26 	bl	800458c <TIM_OC2_SetConfig>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699a      	ldr	r2, [r3, #24]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800414e:	619a      	str	r2, [r3, #24]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800415e:	619a      	str	r2, [r3, #24]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6999      	ldr	r1, [r3, #24]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	021a      	lsls	r2, r3, #8
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	619a      	str	r2, [r3, #24]
 8004174:	e041      	b.n	80041fa <HAL_TIM_PWM_ConfigChannel+0x172>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68b9      	ldr	r1, [r7, #8]
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fa71 	bl	8004664 <TIM_OC3_SetConfig>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69da      	ldr	r2, [r3, #28]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 0208 	orr.w	r2, r2, #8
 8004190:	61da      	str	r2, [r3, #28]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	69da      	ldr	r2, [r3, #28]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0204 	bic.w	r2, r2, #4
 80041a0:	61da      	str	r2, [r3, #28]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69d9      	ldr	r1, [r3, #28]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	61da      	str	r2, [r3, #28]
 80041b4:	e021      	b.n	80041fa <HAL_TIM_PWM_ConfigChannel+0x172>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68b9      	ldr	r1, [r7, #8]
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fabb 	bl	8004738 <TIM_OC4_SetConfig>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69da      	ldr	r2, [r3, #28]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d0:	61da      	str	r2, [r3, #28]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69da      	ldr	r2, [r3, #28]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e0:	61da      	str	r2, [r3, #28]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69d9      	ldr	r1, [r3, #28]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	021a      	lsls	r2, r3, #8
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	61da      	str	r2, [r3, #28]
 80041f6:	e000      	b.n	80041fa <HAL_TIM_PWM_ConfigChannel+0x172>
 80041f8:	bf00      	nop
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800420a:	2300      	movs	r3, #0
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_TIM_ConfigClockSource>:
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_TIM_ConfigClockSource+0x18>
 8004228:	2302      	movs	r3, #2
 800422a:	e0a6      	b.n	800437a <HAL_TIM_ConfigClockSource+0x166>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b40      	cmp	r3, #64	; 0x40
 8004262:	d067      	beq.n	8004334 <HAL_TIM_ConfigClockSource+0x120>
 8004264:	2b40      	cmp	r3, #64	; 0x40
 8004266:	d80b      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x6c>
 8004268:	2b10      	cmp	r3, #16
 800426a:	d073      	beq.n	8004354 <HAL_TIM_ConfigClockSource+0x140>
 800426c:	2b10      	cmp	r3, #16
 800426e:	d802      	bhi.n	8004276 <HAL_TIM_ConfigClockSource+0x62>
 8004270:	2b00      	cmp	r3, #0
 8004272:	d06f      	beq.n	8004354 <HAL_TIM_ConfigClockSource+0x140>
 8004274:	e078      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x154>
 8004276:	2b20      	cmp	r3, #32
 8004278:	d06c      	beq.n	8004354 <HAL_TIM_ConfigClockSource+0x140>
 800427a:	2b30      	cmp	r3, #48	; 0x30
 800427c:	d06a      	beq.n	8004354 <HAL_TIM_ConfigClockSource+0x140>
 800427e:	e073      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x154>
 8004280:	2b70      	cmp	r3, #112	; 0x70
 8004282:	d00d      	beq.n	80042a0 <HAL_TIM_ConfigClockSource+0x8c>
 8004284:	2b70      	cmp	r3, #112	; 0x70
 8004286:	d804      	bhi.n	8004292 <HAL_TIM_ConfigClockSource+0x7e>
 8004288:	2b50      	cmp	r3, #80	; 0x50
 800428a:	d033      	beq.n	80042f4 <HAL_TIM_ConfigClockSource+0xe0>
 800428c:	2b60      	cmp	r3, #96	; 0x60
 800428e:	d041      	beq.n	8004314 <HAL_TIM_ConfigClockSource+0x100>
 8004290:	e06a      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x154>
 8004292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004296:	d066      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x152>
 8004298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800429c:	d017      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0xba>
 800429e:	e063      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x154>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6818      	ldr	r0, [r3, #0]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	6899      	ldr	r1, [r3, #8]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f000 fc2a 	bl	8004b08 <TIM_ETR_SetConfig>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	609a      	str	r2, [r3, #8]
 80042cc:	e04c      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x154>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	6899      	ldr	r1, [r3, #8]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f000 fc13 	bl	8004b08 <TIM_ETR_SetConfig>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042f0:	609a      	str	r2, [r3, #8]
 80042f2:	e039      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x154>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	6859      	ldr	r1, [r3, #4]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	461a      	mov	r2, r3
 8004302:	f000 fad1 	bl	80048a8 <TIM_TI1_ConfigInputStage>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2150      	movs	r1, #80	; 0x50
 800430c:	4618      	mov	r0, r3
 800430e:	f000 fbe0 	bl	8004ad2 <TIM_ITRx_SetConfig>
 8004312:	e029      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x154>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	6859      	ldr	r1, [r3, #4]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	461a      	mov	r2, r3
 8004322:	f000 fb2d 	bl	8004980 <TIM_TI2_ConfigInputStage>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2160      	movs	r1, #96	; 0x60
 800432c:	4618      	mov	r0, r3
 800432e:	f000 fbd0 	bl	8004ad2 <TIM_ITRx_SetConfig>
 8004332:	e019      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x154>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	6859      	ldr	r1, [r3, #4]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	461a      	mov	r2, r3
 8004342:	f000 fab1 	bl	80048a8 <TIM_TI1_ConfigInputStage>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2140      	movs	r1, #64	; 0x40
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fbc0 	bl	8004ad2 <TIM_ITRx_SetConfig>
 8004352:	e009      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x154>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4619      	mov	r1, r3
 800435e:	4610      	mov	r0, r2
 8004360:	f000 fbb7 	bl	8004ad2 <TIM_ITRx_SetConfig>
 8004364:	e000      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x154>
 8004366:	bf00      	nop
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004378:	2300      	movs	r3, #0
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_TIM_OC_DelayElapsedCallback>:
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <HAL_TIM_TriggerCallback>:
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
	...

080043c0 <TIM_Base_SetConfig>:
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a34      	ldr	r2, [pc, #208]	; (80044a4 <TIM_Base_SetConfig+0xe4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00f      	beq.n	80043f8 <TIM_Base_SetConfig+0x38>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043de:	d00b      	beq.n	80043f8 <TIM_Base_SetConfig+0x38>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a31      	ldr	r2, [pc, #196]	; (80044a8 <TIM_Base_SetConfig+0xe8>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d007      	beq.n	80043f8 <TIM_Base_SetConfig+0x38>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a30      	ldr	r2, [pc, #192]	; (80044ac <TIM_Base_SetConfig+0xec>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d003      	beq.n	80043f8 <TIM_Base_SetConfig+0x38>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a2f      	ldr	r2, [pc, #188]	; (80044b0 <TIM_Base_SetConfig+0xf0>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d108      	bne.n	800440a <TIM_Base_SetConfig+0x4a>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a25      	ldr	r2, [pc, #148]	; (80044a4 <TIM_Base_SetConfig+0xe4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d01b      	beq.n	800444a <TIM_Base_SetConfig+0x8a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004418:	d017      	beq.n	800444a <TIM_Base_SetConfig+0x8a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a22      	ldr	r2, [pc, #136]	; (80044a8 <TIM_Base_SetConfig+0xe8>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d013      	beq.n	800444a <TIM_Base_SetConfig+0x8a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a21      	ldr	r2, [pc, #132]	; (80044ac <TIM_Base_SetConfig+0xec>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00f      	beq.n	800444a <TIM_Base_SetConfig+0x8a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a20      	ldr	r2, [pc, #128]	; (80044b0 <TIM_Base_SetConfig+0xf0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00b      	beq.n	800444a <TIM_Base_SetConfig+0x8a>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a1f      	ldr	r2, [pc, #124]	; (80044b4 <TIM_Base_SetConfig+0xf4>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d007      	beq.n	800444a <TIM_Base_SetConfig+0x8a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a1e      	ldr	r2, [pc, #120]	; (80044b8 <TIM_Base_SetConfig+0xf8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d003      	beq.n	800444a <TIM_Base_SetConfig+0x8a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a1d      	ldr	r2, [pc, #116]	; (80044bc <TIM_Base_SetConfig+0xfc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d108      	bne.n	800445c <TIM_Base_SetConfig+0x9c>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	4313      	orrs	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	62da      	str	r2, [r3, #44]	; 0x2c
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	629a      	str	r2, [r3, #40]	; 0x28
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a08      	ldr	r2, [pc, #32]	; (80044a4 <TIM_Base_SetConfig+0xe4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d103      	bne.n	8004490 <TIM_Base_SetConfig+0xd0>
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	631a      	str	r2, [r3, #48]	; 0x30
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	615a      	str	r2, [r3, #20]
 8004496:	bf00      	nop
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40010000 	.word	0x40010000
 80044a8:	40000400 	.word	0x40000400
 80044ac:	40000800 	.word	0x40000800
 80044b0:	40000c00 	.word	0x40000c00
 80044b4:	40014000 	.word	0x40014000
 80044b8:	40014400 	.word	0x40014400
 80044bc:	40014800 	.word	0x40014800

080044c0 <TIM_OC1_SetConfig>:
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	f023 0201 	bic.w	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	621a      	str	r2, [r3, #32]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0303 	bic.w	r3, r3, #3
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f023 0302 	bic.w	r3, r3, #2
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a1c      	ldr	r2, [pc, #112]	; (8004588 <TIM_OC1_SetConfig+0xc8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d10c      	bne.n	8004536 <TIM_OC1_SetConfig+0x76>
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f023 0308 	bic.w	r3, r3, #8
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	4313      	orrs	r3, r2
 800452c:	617b      	str	r3, [r7, #20]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f023 0304 	bic.w	r3, r3, #4
 8004534:	617b      	str	r3, [r7, #20]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a13      	ldr	r2, [pc, #76]	; (8004588 <TIM_OC1_SetConfig+0xc8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d111      	bne.n	8004562 <TIM_OC1_SetConfig+0xa2>
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800454c:	613b      	str	r3, [r7, #16]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	605a      	str	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	619a      	str	r2, [r3, #24]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	635a      	str	r2, [r3, #52]	; 0x34
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	621a      	str	r2, [r3, #32]
 800457c:	bf00      	nop
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	40010000 	.word	0x40010000

0800458c <TIM_OC2_SetConfig>:
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	f023 0210 	bic.w	r2, r3, #16
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	621a      	str	r2, [r3, #32]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f023 0320 	bic.w	r3, r3, #32
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a1e      	ldr	r2, [pc, #120]	; (8004660 <TIM_OC2_SetConfig+0xd4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d10d      	bne.n	8004608 <TIM_OC2_SetConfig+0x7c>
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a15      	ldr	r2, [pc, #84]	; (8004660 <TIM_OC2_SetConfig+0xd4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d113      	bne.n	8004638 <TIM_OC2_SetConfig+0xac>
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004616:	613b      	str	r3, [r7, #16]
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	605a      	str	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	619a      	str	r2, [r3, #24]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	639a      	str	r2, [r3, #56]	; 0x38
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	621a      	str	r2, [r3, #32]
 8004652:	bf00      	nop
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40010000 	.word	0x40010000

08004664 <TIM_OC3_SetConfig>:
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	621a      	str	r2, [r3, #32]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0303 	bic.w	r3, r3, #3
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	021b      	lsls	r3, r3, #8
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a1d      	ldr	r2, [pc, #116]	; (8004734 <TIM_OC3_SetConfig+0xd0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d10d      	bne.n	80046de <TIM_OC3_SetConfig+0x7a>
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	021b      	lsls	r3, r3, #8
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a14      	ldr	r2, [pc, #80]	; (8004734 <TIM_OC3_SetConfig+0xd0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d113      	bne.n	800470e <TIM_OC3_SetConfig+0xaa>
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046f4:	613b      	str	r3, [r7, #16]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4313      	orrs	r3, r2
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	605a      	str	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	61da      	str	r2, [r3, #28]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	63da      	str	r2, [r3, #60]	; 0x3c
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	621a      	str	r2, [r3, #32]
 8004728:	bf00      	nop
 800472a:	371c      	adds	r7, #28
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	40010000 	.word	0x40010000

08004738 <TIM_OC4_SetConfig>:
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	621a      	str	r2, [r3, #32]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	613b      	str	r3, [r7, #16]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	021b      	lsls	r3, r3, #8
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4313      	orrs	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004782:	613b      	str	r3, [r7, #16]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	031b      	lsls	r3, r3, #12
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a10      	ldr	r2, [pc, #64]	; (80047d4 <TIM_OC4_SetConfig+0x9c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d109      	bne.n	80047ac <TIM_OC4_SetConfig+0x74>
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	019b      	lsls	r3, r3, #6
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	605a      	str	r2, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	61da      	str	r2, [r3, #28]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	641a      	str	r2, [r3, #64]	; 0x40
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	621a      	str	r2, [r3, #32]
 80047c6:	bf00      	nop
 80047c8:	371c      	adds	r7, #28
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40010000 	.word	0x40010000

080047d8 <TIM_TI1_SetConfig>:
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	603b      	str	r3, [r7, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	f023 0201 	bic.w	r2, r3, #1
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	621a      	str	r2, [r3, #32]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	613b      	str	r3, [r7, #16]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4a24      	ldr	r2, [pc, #144]	; (8004894 <TIM_TI1_SetConfig+0xbc>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d013      	beq.n	800482e <TIM_TI1_SetConfig+0x56>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480c:	d00f      	beq.n	800482e <TIM_TI1_SetConfig+0x56>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4a21      	ldr	r2, [pc, #132]	; (8004898 <TIM_TI1_SetConfig+0xc0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00b      	beq.n	800482e <TIM_TI1_SetConfig+0x56>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4a20      	ldr	r2, [pc, #128]	; (800489c <TIM_TI1_SetConfig+0xc4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d007      	beq.n	800482e <TIM_TI1_SetConfig+0x56>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4a1f      	ldr	r2, [pc, #124]	; (80048a0 <TIM_TI1_SetConfig+0xc8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d003      	beq.n	800482e <TIM_TI1_SetConfig+0x56>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4a1e      	ldr	r2, [pc, #120]	; (80048a4 <TIM_TI1_SetConfig+0xcc>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d101      	bne.n	8004832 <TIM_TI1_SetConfig+0x5a>
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <TIM_TI1_SetConfig+0x5c>
 8004832:	2300      	movs	r3, #0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d008      	beq.n	800484a <TIM_TI1_SetConfig+0x72>
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f023 0303 	bic.w	r3, r3, #3
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	e003      	b.n	8004852 <TIM_TI1_SetConfig+0x7a>
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f043 0301 	orr.w	r3, r3, #1
 8004850:	617b      	str	r3, [r7, #20]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	b2db      	uxtb	r3, r3
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f023 030a 	bic.w	r3, r3, #10
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f003 030a 	and.w	r3, r3, #10
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	619a      	str	r2, [r3, #24]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	621a      	str	r2, [r3, #32]
 8004886:	bf00      	nop
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	40010000 	.word	0x40010000
 8004898:	40000400 	.word	0x40000400
 800489c:	40000800 	.word	0x40000800
 80048a0:	40000c00 	.word	0x40000c00
 80048a4:	40014000 	.word	0x40014000

080048a8 <TIM_TI1_ConfigInputStage>:
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	f023 0201 	bic.w	r2, r3, #1
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	621a      	str	r2, [r3, #32]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	613b      	str	r3, [r7, #16]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048d2:	613b      	str	r3, [r7, #16]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f023 030a 	bic.w	r3, r3, #10
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	619a      	str	r2, [r3, #24]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	621a      	str	r2, [r3, #32]
 80048fa:	bf00      	nop
 80048fc:	371c      	adds	r7, #28
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <TIM_TI2_SetConfig>:
 8004906:	b480      	push	{r7}
 8004908:	b087      	sub	sp, #28
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	607a      	str	r2, [r7, #4]
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f023 0210 	bic.w	r2, r3, #16
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	621a      	str	r2, [r3, #32]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	613b      	str	r3, [r7, #16]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	021b      	lsls	r3, r3, #8
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	4313      	orrs	r3, r2
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004944:	617b      	str	r3, [r7, #20]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	031b      	lsls	r3, r3, #12
 800494a:	b29b      	uxth	r3, r3
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	4313      	orrs	r3, r2
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	619a      	str	r2, [r3, #24]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	621a      	str	r2, [r3, #32]
 8004974:	bf00      	nop
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <TIM_TI2_ConfigInputStage>:
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	f023 0210 	bic.w	r2, r3, #16
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	621a      	str	r2, [r3, #32]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	613b      	str	r3, [r7, #16]
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	031b      	lsls	r3, r3, #12
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	619a      	str	r2, [r3, #24]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	621a      	str	r2, [r3, #32]
 80049d4:	bf00      	nop
 80049d6:	371c      	adds	r7, #28
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <TIM_TI3_SetConfig>:
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	621a      	str	r2, [r3, #32]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f023 0303 	bic.w	r3, r3, #3
 8004a0c:	617b      	str	r3, [r7, #20]
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004a30:	613b      	str	r3, [r7, #16]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	021b      	lsls	r3, r3, #8
 8004a36:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	61da      	str	r2, [r3, #28]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	621a      	str	r2, [r3, #32]
 8004a4c:	bf00      	nop
 8004a4e:	371c      	adds	r7, #28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <TIM_TI4_SetConfig>:
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	603b      	str	r3, [r7, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	621a      	str	r2, [r3, #32]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	021b      	lsls	r3, r3, #8
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a96:	617b      	str	r3, [r7, #20]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	031b      	lsls	r3, r3, #12
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004aaa:	613b      	str	r3, [r7, #16]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	031b      	lsls	r3, r3, #12
 8004ab0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	61da      	str	r2, [r3, #28]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	621a      	str	r2, [r3, #32]
 8004ac6:	bf00      	nop
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <TIM_ITRx_SetConfig>:
 8004ad2:	b480      	push	{r7}
 8004ad4:	b085      	sub	sp, #20
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	6039      	str	r1, [r7, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f043 0307 	orr.w	r3, r3, #7
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	609a      	str	r2, [r3, #8]
 8004afc:	bf00      	nop
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <TIM_ETR_SetConfig>:
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	603b      	str	r3, [r7, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	021a      	lsls	r2, r3, #8
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	609a      	str	r2, [r3, #8]
 8004b3c:	bf00      	nop
 8004b3e:	371c      	adds	r7, #28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <TIM_CCxChannelCmd>:
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f003 031f 	and.w	r3, r3, #31
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6a1a      	ldr	r2, [r3, #32]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	401a      	ands	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	621a      	str	r2, [r3, #32]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a1a      	ldr	r2, [r3, #32]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f003 031f 	and.w	r3, r3, #31
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b80:	431a      	orrs	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	621a      	str	r2, [r3, #32]
 8004b86:	bf00      	nop
 8004b88:	371c      	adds	r7, #28
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <HAL_TIMEx_MasterConfigSynchronization>:
 8004b92:	b480      	push	{r7}
 8004b94:	b085      	sub	sp, #20
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
 8004b9a:	6039      	str	r1, [r7, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d101      	bne.n	8004baa <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e032      	b.n	8004c10 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	60bb      	str	r3, [r7, #8]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004be2:	60bb      	str	r3, [r7, #8]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60bb      	str	r3, [r7, #8]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	605a      	str	r2, [r3, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	609a      	str	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c0e:	2300      	movs	r3, #0
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_TIMEx_ConfigBreakDeadTime>:
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
 8004c26:	2300      	movs	r3, #0
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d101      	bne.n	8004c38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c34:	2302      	movs	r3, #2
 8004c36:	e03d      	b.n	8004cb4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	645a      	str	r2, [r3, #68]	; 0x44
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_TIMEx_CommutCallback>:
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_TIMEx_BreakCallback>:
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_UART_Init>:
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_UART_Init+0x12>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e03f      	b.n	8004d7a <HAL_UART_Init+0x92>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <HAL_UART_Init+0x2c>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f004 fe86 	bl	8009a20 <HAL_UART_MspInit>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2224      	movs	r2, #36	; 0x24
 8004d18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d2a:	60da      	str	r2, [r3, #12]
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fb47 	bl	80053c0 <UART_SetConfig>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d40:	611a      	str	r2, [r3, #16]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695a      	ldr	r2, [r3, #20]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d50:	615a      	str	r2, [r3, #20]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d60:	60da      	str	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004d78:	2300      	movs	r3, #0
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_UART_Transmit>:
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b088      	sub	sp, #32
 8004d86:	af02      	add	r7, sp, #8
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	603b      	str	r3, [r7, #0]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	80fb      	strh	r3, [r7, #6]
 8004d92:	2300      	movs	r3, #0
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	f040 8083 	bne.w	8004eaa <HAL_UART_Transmit+0x128>
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <HAL_UART_Transmit+0x2e>
 8004daa:	88fb      	ldrh	r3, [r7, #6]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_UART_Transmit+0x32>
 8004db0:	2301      	movs	r3, #1
 8004db2:	e07b      	b.n	8004eac <HAL_UART_Transmit+0x12a>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_UART_Transmit+0x40>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e074      	b.n	8004eac <HAL_UART_Transmit+0x12a>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	63da      	str	r2, [r3, #60]	; 0x3c
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2221      	movs	r2, #33	; 0x21
 8004dd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004dd8:	f7fc f88e 	bl	8000ef8 <HAL_GetTick>
 8004ddc:	6178      	str	r0, [r7, #20]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	88fa      	ldrh	r2, [r7, #6]
 8004de2:	849a      	strh	r2, [r3, #36]	; 0x24
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	88fa      	ldrh	r2, [r7, #6]
 8004de8:	84da      	strh	r2, [r3, #38]	; 0x26
 8004dea:	e042      	b.n	8004e72 <HAL_UART_Transmit+0xf0>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	84da      	strh	r2, [r3, #38]	; 0x26
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e02:	d122      	bne.n	8004e4a <HAL_UART_Transmit+0xc8>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2180      	movs	r1, #128	; 0x80
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 f96a 	bl	80050e8 <UART_WaitOnFlagUntilTimeout>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <HAL_UART_Transmit+0x9c>
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e046      	b.n	8004eac <HAL_UART_Transmit+0x12a>
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	613b      	str	r3, [r7, #16]
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	461a      	mov	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e30:	605a      	str	r2, [r3, #4]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d103      	bne.n	8004e42 <HAL_UART_Transmit+0xc0>
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	3302      	adds	r3, #2
 8004e3e:	60bb      	str	r3, [r7, #8]
 8004e40:	e017      	b.n	8004e72 <HAL_UART_Transmit+0xf0>
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	3301      	adds	r3, #1
 8004e46:	60bb      	str	r3, [r7, #8]
 8004e48:	e013      	b.n	8004e72 <HAL_UART_Transmit+0xf0>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2200      	movs	r2, #0
 8004e52:	2180      	movs	r1, #128	; 0x80
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 f947 	bl	80050e8 <UART_WaitOnFlagUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <HAL_UART_Transmit+0xe2>
 8004e60:	2303      	movs	r3, #3
 8004e62:	e023      	b.n	8004eac <HAL_UART_Transmit+0x12a>
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	60ba      	str	r2, [r7, #8]
 8004e6a:	781a      	ldrb	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	605a      	str	r2, [r3, #4]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1b7      	bne.n	8004dec <HAL_UART_Transmit+0x6a>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	2200      	movs	r2, #0
 8004e84:	2140      	movs	r1, #64	; 0x40
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 f92e 	bl	80050e8 <UART_WaitOnFlagUntilTimeout>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_UART_Transmit+0x114>
 8004e92:	2303      	movs	r3, #3
 8004e94:	e00a      	b.n	8004eac <HAL_UART_Transmit+0x12a>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	e000      	b.n	8004eac <HAL_UART_Transmit+0x12a>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	4618      	mov	r0, r3
 8004eae:	3718      	adds	r7, #24
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_UART_IRQHandler>:
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	61fb      	str	r3, [r7, #28]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	61bb      	str	r3, [r7, #24]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	613b      	str	r3, [r7, #16]
 8004ed8:	2300      	movs	r3, #0
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	613b      	str	r3, [r7, #16]
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10d      	bne.n	8004f06 <HAL_UART_IRQHandler+0x52>
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	f003 0320 	and.w	r3, r3, #32
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d008      	beq.n	8004f06 <HAL_UART_IRQHandler+0x52>
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	f003 0320 	and.w	r3, r3, #32
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_UART_IRQHandler+0x52>
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f9dc 	bl	80052bc <UART_Receive_IT>
 8004f04:	e0cc      	b.n	80050a0 <HAL_UART_IRQHandler+0x1ec>
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 80ab 	beq.w	8005064 <HAL_UART_IRQHandler+0x1b0>
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d105      	bne.n	8004f24 <HAL_UART_IRQHandler+0x70>
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f000 80a0 	beq.w	8005064 <HAL_UART_IRQHandler+0x1b0>
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00a      	beq.n	8004f44 <HAL_UART_IRQHandler+0x90>
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d005      	beq.n	8004f44 <HAL_UART_IRQHandler+0x90>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3c:	f043 0201 	orr.w	r2, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <HAL_UART_IRQHandler+0xb0>
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <HAL_UART_IRQHandler+0xb0>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5c:	f043 0202 	orr.w	r2, r3, #2
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <HAL_UART_IRQHandler+0xd0>
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d005      	beq.n	8004f84 <HAL_UART_IRQHandler+0xd0>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7c:	f043 0204 	orr.w	r2, r3, #4
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f003 0308 	and.w	r3, r3, #8
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <HAL_UART_IRQHandler+0xf0>
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d005      	beq.n	8004fa4 <HAL_UART_IRQHandler+0xf0>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9c:	f043 0208 	orr.w	r2, r3, #8
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	63da      	str	r2, [r3, #60]	; 0x3c
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d078      	beq.n	800509e <HAL_UART_IRQHandler+0x1ea>
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f003 0320 	and.w	r3, r3, #32
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d007      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x112>
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x112>
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f97b 	bl	80052bc <UART_Receive_IT>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd0:	2b40      	cmp	r3, #64	; 0x40
 8004fd2:	bf0c      	ite	eq
 8004fd4:	2301      	moveq	r3, #1
 8004fd6:	2300      	movne	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d102      	bne.n	8004fee <HAL_UART_IRQHandler+0x13a>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d031      	beq.n	8005052 <HAL_UART_IRQHandler+0x19e>
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f8c4 	bl	800517c <UART_EndRxTransfer>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffe:	2b40      	cmp	r3, #64	; 0x40
 8005000:	d123      	bne.n	800504a <HAL_UART_IRQHandler+0x196>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695a      	ldr	r2, [r3, #20]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005010:	615a      	str	r2, [r3, #20]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005016:	2b00      	cmp	r3, #0
 8005018:	d013      	beq.n	8005042 <HAL_UART_IRQHandler+0x18e>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501e:	4a22      	ldr	r2, [pc, #136]	; (80050a8 <HAL_UART_IRQHandler+0x1f4>)
 8005020:	651a      	str	r2, [r3, #80]	; 0x50
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005026:	4618      	mov	r0, r3
 8005028:	f7fc f884 	bl	8001134 <HAL_DMA_Abort_IT>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d016      	beq.n	8005060 <HAL_UART_IRQHandler+0x1ac>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800503c:	4610      	mov	r0, r2
 800503e:	4798      	blx	r3
 8005040:	e00e      	b.n	8005060 <HAL_UART_IRQHandler+0x1ac>
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f846 	bl	80050d4 <HAL_UART_ErrorCallback>
 8005048:	e00a      	b.n	8005060 <HAL_UART_IRQHandler+0x1ac>
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f842 	bl	80050d4 <HAL_UART_ErrorCallback>
 8005050:	e006      	b.n	8005060 <HAL_UART_IRQHandler+0x1ac>
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f83e 	bl	80050d4 <HAL_UART_ErrorCallback>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	63da      	str	r2, [r3, #60]	; 0x3c
 800505e:	e01e      	b.n	800509e <HAL_UART_IRQHandler+0x1ea>
 8005060:	bf00      	nop
 8005062:	e01c      	b.n	800509e <HAL_UART_IRQHandler+0x1ea>
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506a:	2b00      	cmp	r3, #0
 800506c:	d008      	beq.n	8005080 <HAL_UART_IRQHandler+0x1cc>
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <HAL_UART_IRQHandler+0x1cc>
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f8b1 	bl	80051e0 <UART_Transmit_IT>
 800507e:	e00f      	b.n	80050a0 <HAL_UART_IRQHandler+0x1ec>
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <HAL_UART_IRQHandler+0x1ec>
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	d005      	beq.n	80050a0 <HAL_UART_IRQHandler+0x1ec>
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f8f9 	bl	800528c <UART_EndTransmit_IT>
 800509a:	bf00      	nop
 800509c:	e000      	b.n	80050a0 <HAL_UART_IRQHandler+0x1ec>
 800509e:	bf00      	nop
 80050a0:	3720      	adds	r7, #32
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	080051b9 	.word	0x080051b9

080050ac <HAL_UART_TxCpltCallback>:
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_UART_RxCpltCallback>:
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_UART_ErrorCallback>:
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <UART_WaitOnFlagUntilTimeout>:
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	4613      	mov	r3, r2
 80050f6:	71fb      	strb	r3, [r7, #7]
 80050f8:	e02c      	b.n	8005154 <UART_WaitOnFlagUntilTimeout+0x6c>
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005100:	d028      	beq.n	8005154 <UART_WaitOnFlagUntilTimeout+0x6c>
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d007      	beq.n	8005118 <UART_WaitOnFlagUntilTimeout+0x30>
 8005108:	f7fb fef6 	bl	8000ef8 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	429a      	cmp	r2, r3
 8005116:	d21d      	bcs.n	8005154 <UART_WaitOnFlagUntilTimeout+0x6c>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005126:	60da      	str	r2, [r3, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695a      	ldr	r2, [r3, #20]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0201 	bic.w	r2, r2, #1
 8005136:	615a      	str	r2, [r3, #20]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005150:	2303      	movs	r3, #3
 8005152:	e00f      	b.n	8005174 <UART_WaitOnFlagUntilTimeout+0x8c>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	4013      	ands	r3, r2
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	429a      	cmp	r2, r3
 8005162:	bf0c      	ite	eq
 8005164:	2301      	moveq	r3, #1
 8005166:	2300      	movne	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	461a      	mov	r2, r3
 800516c:	79fb      	ldrb	r3, [r7, #7]
 800516e:	429a      	cmp	r2, r3
 8005170:	d0c3      	beq.n	80050fa <UART_WaitOnFlagUntilTimeout+0x12>
 8005172:	2300      	movs	r3, #0
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <UART_EndRxTransfer>:
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005192:	60da      	str	r2, [r3, #12]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695a      	ldr	r2, [r3, #20]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0201 	bic.w	r2, r2, #1
 80051a2:	615a      	str	r2, [r3, #20]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <UART_DMAAbortOnError>:
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	85da      	strh	r2, [r3, #46]	; 0x2e
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	84da      	strh	r2, [r3, #38]	; 0x26
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f7ff ff7e 	bl	80050d4 <HAL_UART_ErrorCallback>
 80051d8:	bf00      	nop
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <UART_Transmit_IT>:
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b21      	cmp	r3, #33	; 0x21
 80051f2:	d144      	bne.n	800527e <UART_Transmit_IT+0x9e>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051fc:	d11a      	bne.n	8005234 <UART_Transmit_IT+0x54>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	461a      	mov	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005212:	605a      	str	r2, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d105      	bne.n	8005228 <UART_Transmit_IT+0x48>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	1c9a      	adds	r2, r3, #2
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	621a      	str	r2, [r3, #32]
 8005226:	e00e      	b.n	8005246 <UART_Transmit_IT+0x66>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	621a      	str	r2, [r3, #32]
 8005232:	e008      	b.n	8005246 <UART_Transmit_IT+0x66>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	1c59      	adds	r1, r3, #1
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6211      	str	r1, [r2, #32]
 800523e:	781a      	ldrb	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	605a      	str	r2, [r3, #4]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29b      	uxth	r3, r3
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	4619      	mov	r1, r3
 8005254:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10f      	bne.n	800527a <UART_Transmit_IT+0x9a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005268:	60da      	str	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005278:	60da      	str	r2, [r3, #12]
 800527a:	2300      	movs	r3, #0
 800527c:	e000      	b.n	8005280 <UART_Transmit_IT+0xa0>
 800527e:	2302      	movs	r3, #2
 8005280:	4618      	mov	r0, r3
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <UART_EndTransmit_IT>:
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68da      	ldr	r2, [r3, #12]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052a2:	60da      	str	r2, [r3, #12]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7ff fefd 	bl	80050ac <HAL_UART_TxCpltCallback>
 80052b2:	2300      	movs	r3, #0
 80052b4:	4618      	mov	r0, r3
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <UART_Receive_IT>:
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b22      	cmp	r3, #34	; 0x22
 80052ce:	d171      	bne.n	80053b4 <UART_Receive_IT+0xf8>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d8:	d123      	bne.n	8005322 <UART_Receive_IT+0x66>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10e      	bne.n	8005306 <UART_Receive_IT+0x4a>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	801a      	strh	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	1c9a      	adds	r2, r3, #2
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	629a      	str	r2, [r3, #40]	; 0x28
 8005304:	e029      	b.n	800535a <UART_Receive_IT+0x9e>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	b29b      	uxth	r3, r3
 800530e:	b2db      	uxtb	r3, r3
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	801a      	strh	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531a:	1c5a      	adds	r2, r3, #1
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	629a      	str	r2, [r3, #40]	; 0x28
 8005320:	e01b      	b.n	800535a <UART_Receive_IT+0x9e>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10a      	bne.n	8005340 <UART_Receive_IT+0x84>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6858      	ldr	r0, [r3, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	1c59      	adds	r1, r3, #1
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6291      	str	r1, [r2, #40]	; 0x28
 800533a:	b2c2      	uxtb	r2, r0
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	e00c      	b.n	800535a <UART_Receive_IT+0x9e>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	b2da      	uxtb	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534c:	1c58      	adds	r0, r3, #1
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	6288      	str	r0, [r1, #40]	; 0x28
 8005352:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005356:	b2d2      	uxtb	r2, r2
 8005358:	701a      	strb	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800535e:	b29b      	uxth	r3, r3
 8005360:	3b01      	subs	r3, #1
 8005362:	b29b      	uxth	r3, r3
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	4619      	mov	r1, r3
 8005368:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800536a:	2b00      	cmp	r3, #0
 800536c:	d120      	bne.n	80053b0 <UART_Receive_IT+0xf4>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 0220 	bic.w	r2, r2, #32
 800537c:	60da      	str	r2, [r3, #12]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800538c:	60da      	str	r2, [r3, #12]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	695a      	ldr	r2, [r3, #20]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0201 	bic.w	r2, r2, #1
 800539c:	615a      	str	r2, [r3, #20]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7ff fe8a 	bl	80050c0 <HAL_UART_RxCpltCallback>
 80053ac:	2300      	movs	r3, #0
 80053ae:	e002      	b.n	80053b6 <UART_Receive_IT+0xfa>
 80053b0:	2300      	movs	r3, #0
 80053b2:	e000      	b.n	80053b6 <UART_Receive_IT+0xfa>
 80053b4:	2302      	movs	r3, #2
 80053b6:	4618      	mov	r0, r3
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
	...

080053c0 <UART_SetConfig>:
 80053c0:	b5b0      	push	{r4, r5, r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	611a      	str	r2, [r3, #16]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	431a      	orrs	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005400:	f023 030c 	bic.w	r3, r3, #12
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6812      	ldr	r2, [r2, #0]
 8005408:	68f9      	ldr	r1, [r7, #12]
 800540a:	430b      	orrs	r3, r1
 800540c:	60d3      	str	r3, [r2, #12]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699a      	ldr	r2, [r3, #24]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	615a      	str	r2, [r3, #20]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800542c:	f040 80e4 	bne.w	80055f8 <UART_SetConfig+0x238>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4aab      	ldr	r2, [pc, #684]	; (80056e4 <UART_SetConfig+0x324>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d004      	beq.n	8005444 <UART_SetConfig+0x84>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4aaa      	ldr	r2, [pc, #680]	; (80056e8 <UART_SetConfig+0x328>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d16c      	bne.n	800551e <UART_SetConfig+0x15e>
 8005444:	f7fe fa46 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 8005448:	4602      	mov	r2, r0
 800544a:	4613      	mov	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	009a      	lsls	r2, r3, #2
 8005452:	441a      	add	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	fbb2 f3f3 	udiv	r3, r2, r3
 800545e:	4aa3      	ldr	r2, [pc, #652]	; (80056ec <UART_SetConfig+0x32c>)
 8005460:	fba2 2303 	umull	r2, r3, r2, r3
 8005464:	095b      	lsrs	r3, r3, #5
 8005466:	011c      	lsls	r4, r3, #4
 8005468:	f7fe fa34 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 800546c:	4602      	mov	r2, r0
 800546e:	4613      	mov	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	009a      	lsls	r2, r3, #2
 8005476:	441a      	add	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	fbb2 f5f3 	udiv	r5, r2, r3
 8005482:	f7fe fa27 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 8005486:	4602      	mov	r2, r0
 8005488:	4613      	mov	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	009a      	lsls	r2, r3, #2
 8005490:	441a      	add	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	fbb2 f3f3 	udiv	r3, r2, r3
 800549c:	4a93      	ldr	r2, [pc, #588]	; (80056ec <UART_SetConfig+0x32c>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	2264      	movs	r2, #100	; 0x64
 80054a6:	fb02 f303 	mul.w	r3, r2, r3
 80054aa:	1aeb      	subs	r3, r5, r3
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	3332      	adds	r3, #50	; 0x32
 80054b0:	4a8e      	ldr	r2, [pc, #568]	; (80056ec <UART_SetConfig+0x32c>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054be:	441c      	add	r4, r3
 80054c0:	f7fe fa08 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 80054c4:	4602      	mov	r2, r0
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	009a      	lsls	r2, r3, #2
 80054ce:	441a      	add	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	fbb2 f5f3 	udiv	r5, r2, r3
 80054da:	f7fe f9fb 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 80054de:	4602      	mov	r2, r0
 80054e0:	4613      	mov	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	009a      	lsls	r2, r3, #2
 80054e8:	441a      	add	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f4:	4a7d      	ldr	r2, [pc, #500]	; (80056ec <UART_SetConfig+0x32c>)
 80054f6:	fba2 2303 	umull	r2, r3, r2, r3
 80054fa:	095b      	lsrs	r3, r3, #5
 80054fc:	2264      	movs	r2, #100	; 0x64
 80054fe:	fb02 f303 	mul.w	r3, r2, r3
 8005502:	1aeb      	subs	r3, r5, r3
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	3332      	adds	r3, #50	; 0x32
 8005508:	4a78      	ldr	r2, [pc, #480]	; (80056ec <UART_SetConfig+0x32c>)
 800550a:	fba2 2303 	umull	r2, r3, r2, r3
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	f003 0207 	and.w	r2, r3, #7
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4422      	add	r2, r4
 800551a:	609a      	str	r2, [r3, #8]
 800551c:	e154      	b.n	80057c8 <UART_SetConfig+0x408>
 800551e:	f7fe f9c5 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8005522:	4602      	mov	r2, r0
 8005524:	4613      	mov	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	009a      	lsls	r2, r3, #2
 800552c:	441a      	add	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	fbb2 f3f3 	udiv	r3, r2, r3
 8005538:	4a6c      	ldr	r2, [pc, #432]	; (80056ec <UART_SetConfig+0x32c>)
 800553a:	fba2 2303 	umull	r2, r3, r2, r3
 800553e:	095b      	lsrs	r3, r3, #5
 8005540:	011c      	lsls	r4, r3, #4
 8005542:	f7fe f9b3 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8005546:	4602      	mov	r2, r0
 8005548:	4613      	mov	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	009a      	lsls	r2, r3, #2
 8005550:	441a      	add	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	fbb2 f5f3 	udiv	r5, r2, r3
 800555c:	f7fe f9a6 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8005560:	4602      	mov	r2, r0
 8005562:	4613      	mov	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	009a      	lsls	r2, r3, #2
 800556a:	441a      	add	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	fbb2 f3f3 	udiv	r3, r2, r3
 8005576:	4a5d      	ldr	r2, [pc, #372]	; (80056ec <UART_SetConfig+0x32c>)
 8005578:	fba2 2303 	umull	r2, r3, r2, r3
 800557c:	095b      	lsrs	r3, r3, #5
 800557e:	2264      	movs	r2, #100	; 0x64
 8005580:	fb02 f303 	mul.w	r3, r2, r3
 8005584:	1aeb      	subs	r3, r5, r3
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	3332      	adds	r3, #50	; 0x32
 800558a:	4a58      	ldr	r2, [pc, #352]	; (80056ec <UART_SetConfig+0x32c>)
 800558c:	fba2 2303 	umull	r2, r3, r2, r3
 8005590:	095b      	lsrs	r3, r3, #5
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005598:	441c      	add	r4, r3
 800559a:	f7fe f987 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 800559e:	4602      	mov	r2, r0
 80055a0:	4613      	mov	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	009a      	lsls	r2, r3, #2
 80055a8:	441a      	add	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	fbb2 f5f3 	udiv	r5, r2, r3
 80055b4:	f7fe f97a 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 80055b8:	4602      	mov	r2, r0
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	009a      	lsls	r2, r3, #2
 80055c2:	441a      	add	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ce:	4a47      	ldr	r2, [pc, #284]	; (80056ec <UART_SetConfig+0x32c>)
 80055d0:	fba2 2303 	umull	r2, r3, r2, r3
 80055d4:	095b      	lsrs	r3, r3, #5
 80055d6:	2264      	movs	r2, #100	; 0x64
 80055d8:	fb02 f303 	mul.w	r3, r2, r3
 80055dc:	1aeb      	subs	r3, r5, r3
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	3332      	adds	r3, #50	; 0x32
 80055e2:	4a42      	ldr	r2, [pc, #264]	; (80056ec <UART_SetConfig+0x32c>)
 80055e4:	fba2 2303 	umull	r2, r3, r2, r3
 80055e8:	095b      	lsrs	r3, r3, #5
 80055ea:	f003 0207 	and.w	r2, r3, #7
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4422      	add	r2, r4
 80055f4:	609a      	str	r2, [r3, #8]
 80055f6:	e0e7      	b.n	80057c8 <UART_SetConfig+0x408>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a39      	ldr	r2, [pc, #228]	; (80056e4 <UART_SetConfig+0x324>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d004      	beq.n	800560c <UART_SetConfig+0x24c>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a38      	ldr	r2, [pc, #224]	; (80056e8 <UART_SetConfig+0x328>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d171      	bne.n	80056f0 <UART_SetConfig+0x330>
 800560c:	f7fe f962 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 8005610:	4602      	mov	r2, r0
 8005612:	4613      	mov	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	009a      	lsls	r2, r3, #2
 800561a:	441a      	add	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	fbb2 f3f3 	udiv	r3, r2, r3
 8005626:	4a31      	ldr	r2, [pc, #196]	; (80056ec <UART_SetConfig+0x32c>)
 8005628:	fba2 2303 	umull	r2, r3, r2, r3
 800562c:	095b      	lsrs	r3, r3, #5
 800562e:	011c      	lsls	r4, r3, #4
 8005630:	f7fe f950 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 8005634:	4602      	mov	r2, r0
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	009a      	lsls	r2, r3, #2
 800563e:	441a      	add	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	fbb2 f5f3 	udiv	r5, r2, r3
 800564a:	f7fe f943 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 800564e:	4602      	mov	r2, r0
 8005650:	4613      	mov	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	009a      	lsls	r2, r3, #2
 8005658:	441a      	add	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	fbb2 f3f3 	udiv	r3, r2, r3
 8005664:	4a21      	ldr	r2, [pc, #132]	; (80056ec <UART_SetConfig+0x32c>)
 8005666:	fba2 2303 	umull	r2, r3, r2, r3
 800566a:	095b      	lsrs	r3, r3, #5
 800566c:	2264      	movs	r2, #100	; 0x64
 800566e:	fb02 f303 	mul.w	r3, r2, r3
 8005672:	1aeb      	subs	r3, r5, r3
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	3332      	adds	r3, #50	; 0x32
 8005678:	4a1c      	ldr	r2, [pc, #112]	; (80056ec <UART_SetConfig+0x32c>)
 800567a:	fba2 2303 	umull	r2, r3, r2, r3
 800567e:	095b      	lsrs	r3, r3, #5
 8005680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005684:	441c      	add	r4, r3
 8005686:	f7fe f925 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 800568a:	4602      	mov	r2, r0
 800568c:	4613      	mov	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	009a      	lsls	r2, r3, #2
 8005694:	441a      	add	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	fbb2 f5f3 	udiv	r5, r2, r3
 80056a0:	f7fe f918 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 80056a4:	4602      	mov	r2, r0
 80056a6:	4613      	mov	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	009a      	lsls	r2, r3, #2
 80056ae:	441a      	add	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ba:	4a0c      	ldr	r2, [pc, #48]	; (80056ec <UART_SetConfig+0x32c>)
 80056bc:	fba2 2303 	umull	r2, r3, r2, r3
 80056c0:	095b      	lsrs	r3, r3, #5
 80056c2:	2264      	movs	r2, #100	; 0x64
 80056c4:	fb02 f303 	mul.w	r3, r2, r3
 80056c8:	1aeb      	subs	r3, r5, r3
 80056ca:	011b      	lsls	r3, r3, #4
 80056cc:	3332      	adds	r3, #50	; 0x32
 80056ce:	4a07      	ldr	r2, [pc, #28]	; (80056ec <UART_SetConfig+0x32c>)
 80056d0:	fba2 2303 	umull	r2, r3, r2, r3
 80056d4:	095b      	lsrs	r3, r3, #5
 80056d6:	f003 020f 	and.w	r2, r3, #15
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4422      	add	r2, r4
 80056e0:	609a      	str	r2, [r3, #8]
 80056e2:	e071      	b.n	80057c8 <UART_SetConfig+0x408>
 80056e4:	40011000 	.word	0x40011000
 80056e8:	40011400 	.word	0x40011400
 80056ec:	51eb851f 	.word	0x51eb851f
 80056f0:	f7fe f8dc 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 80056f4:	4602      	mov	r2, r0
 80056f6:	4613      	mov	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	009a      	lsls	r2, r3, #2
 80056fe:	441a      	add	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	fbb2 f3f3 	udiv	r3, r2, r3
 800570a:	4a31      	ldr	r2, [pc, #196]	; (80057d0 <UART_SetConfig+0x410>)
 800570c:	fba2 2303 	umull	r2, r3, r2, r3
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	011c      	lsls	r4, r3, #4
 8005714:	f7fe f8ca 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8005718:	4602      	mov	r2, r0
 800571a:	4613      	mov	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	009a      	lsls	r2, r3, #2
 8005722:	441a      	add	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	fbb2 f5f3 	udiv	r5, r2, r3
 800572e:	f7fe f8bd 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8005732:	4602      	mov	r2, r0
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	009a      	lsls	r2, r3, #2
 800573c:	441a      	add	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	fbb2 f3f3 	udiv	r3, r2, r3
 8005748:	4a21      	ldr	r2, [pc, #132]	; (80057d0 <UART_SetConfig+0x410>)
 800574a:	fba2 2303 	umull	r2, r3, r2, r3
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	2264      	movs	r2, #100	; 0x64
 8005752:	fb02 f303 	mul.w	r3, r2, r3
 8005756:	1aeb      	subs	r3, r5, r3
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	3332      	adds	r3, #50	; 0x32
 800575c:	4a1c      	ldr	r2, [pc, #112]	; (80057d0 <UART_SetConfig+0x410>)
 800575e:	fba2 2303 	umull	r2, r3, r2, r3
 8005762:	095b      	lsrs	r3, r3, #5
 8005764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005768:	441c      	add	r4, r3
 800576a:	f7fe f89f 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 800576e:	4602      	mov	r2, r0
 8005770:	4613      	mov	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	009a      	lsls	r2, r3, #2
 8005778:	441a      	add	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	fbb2 f5f3 	udiv	r5, r2, r3
 8005784:	f7fe f892 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8005788:	4602      	mov	r2, r0
 800578a:	4613      	mov	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	009a      	lsls	r2, r3, #2
 8005792:	441a      	add	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	fbb2 f3f3 	udiv	r3, r2, r3
 800579e:	4a0c      	ldr	r2, [pc, #48]	; (80057d0 <UART_SetConfig+0x410>)
 80057a0:	fba2 2303 	umull	r2, r3, r2, r3
 80057a4:	095b      	lsrs	r3, r3, #5
 80057a6:	2264      	movs	r2, #100	; 0x64
 80057a8:	fb02 f303 	mul.w	r3, r2, r3
 80057ac:	1aeb      	subs	r3, r5, r3
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	3332      	adds	r3, #50	; 0x32
 80057b2:	4a07      	ldr	r2, [pc, #28]	; (80057d0 <UART_SetConfig+0x410>)
 80057b4:	fba2 2303 	umull	r2, r3, r2, r3
 80057b8:	095b      	lsrs	r3, r3, #5
 80057ba:	f003 020f 	and.w	r2, r3, #15
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4422      	add	r2, r4
 80057c4:	609a      	str	r2, [r3, #8]
 80057c6:	e7ff      	b.n	80057c8 <UART_SetConfig+0x408>
 80057c8:	bf00      	nop
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bdb0      	pop	{r4, r5, r7, pc}
 80057d0:	51eb851f 	.word	0x51eb851f

080057d4 <makeFreeRtosPriority>:
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	4603      	mov	r3, r0
 80057dc:	80fb      	strh	r3, [r7, #6]
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]
 80057e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057e6:	2b84      	cmp	r3, #132	; 0x84
 80057e8:	d005      	beq.n	80057f6 <makeFreeRtosPriority+0x22>
 80057ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4413      	add	r3, r2
 80057f2:	3303      	adds	r3, #3
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4618      	mov	r0, r3
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <osKernelStart>:
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
 8005808:	f000 fad2 	bl	8005db0 <vTaskStartScheduler>
 800580c:	2300      	movs	r3, #0
 800580e:	4618      	mov	r0, r3
 8005810:	bd80      	pop	{r7, pc}

08005812 <osThreadCreate>:
 8005812:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005814:	b089      	sub	sp, #36	; 0x24
 8005816:	af04      	add	r7, sp, #16
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	6039      	str	r1, [r7, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d020      	beq.n	8005866 <osThreadCreate+0x54>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d01c      	beq.n	8005866 <osThreadCreate+0x54>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685c      	ldr	r4, [r3, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681d      	ldr	r5, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691e      	ldr	r6, [r3, #16]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff ffc8 	bl	80057d4 <makeFreeRtosPriority>
 8005844:	4601      	mov	r1, r0
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6992      	ldr	r2, [r2, #24]
 800584e:	9202      	str	r2, [sp, #8]
 8005850:	9301      	str	r3, [sp, #4]
 8005852:	9100      	str	r1, [sp, #0]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	4632      	mov	r2, r6
 8005858:	4629      	mov	r1, r5
 800585a:	4620      	mov	r0, r4
 800585c:	f000 f8ed 	bl	8005a3a <xTaskCreateStatic>
 8005860:	4603      	mov	r3, r0
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	e01c      	b.n	80058a0 <osThreadCreate+0x8e>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685c      	ldr	r4, [r3, #4]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681d      	ldr	r5, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	b29e      	uxth	r6, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff ffaa 	bl	80057d4 <makeFreeRtosPriority>
 8005880:	4602      	mov	r2, r0
 8005882:	f107 030c 	add.w	r3, r7, #12
 8005886:	9301      	str	r3, [sp, #4]
 8005888:	9200      	str	r2, [sp, #0]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	4632      	mov	r2, r6
 800588e:	4629      	mov	r1, r5
 8005890:	4620      	mov	r0, r4
 8005892:	f000 f92b 	bl	8005aec <xTaskCreate>
 8005896:	4603      	mov	r3, r0
 8005898:	2b01      	cmp	r3, #1
 800589a:	d001      	beq.n	80058a0 <osThreadCreate+0x8e>
 800589c:	2300      	movs	r3, #0
 800589e:	e000      	b.n	80058a2 <osThreadCreate+0x90>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080058aa <osDelay>:
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b084      	sub	sp, #16
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <osDelay+0x16>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	e000      	b.n	80058c2 <osDelay+0x18>
 80058c0:	2301      	movs	r3, #1
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fa40 	bl	8005d48 <vTaskDelay>
 80058c8:	2300      	movs	r3, #0
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <vListInitialise>:
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f103 0208 	add.w	r2, r3, #8
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	605a      	str	r2, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f04f 32ff 	mov.w	r2, #4294967295
 80058ea:	609a      	str	r2, [r3, #8]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f103 0208 	add.w	r2, r3, #8
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	60da      	str	r2, [r3, #12]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f103 0208 	add.w	r2, r3, #8
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	611a      	str	r2, [r3, #16]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <vListInitialiseItem>:
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	611a      	str	r2, [r3, #16]
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <vListInsertEnd>:
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	605a      	str	r2, [r3, #4]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	609a      	str	r2, [r3, #8]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	605a      	str	r2, [r3, #4]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	609a      	str	r2, [r3, #8]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	611a      	str	r2, [r3, #16]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	bf00      	nop
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <vListInsert>:
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	60bb      	str	r3, [r7, #8]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598a:	d103      	bne.n	8005994 <vListInsert+0x20>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	e00c      	b.n	80059ae <vListInsert+0x3a>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3308      	adds	r3, #8
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	e002      	b.n	80059a2 <vListInsert+0x2e>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d2f6      	bcs.n	800599c <vListInsert+0x28>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	605a      	str	r2, [r3, #4]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	609a      	str	r2, [r3, #8]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	609a      	str	r2, [r3, #8]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	605a      	str	r2, [r3, #4]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	611a      	str	r2, [r3, #16]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	bf00      	nop
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <uxListRemove>:
 80059e6:	b480      	push	{r7}
 80059e8:	b085      	sub	sp, #20
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6892      	ldr	r2, [r2, #8]
 80059fc:	609a      	str	r2, [r3, #8]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6852      	ldr	r2, [r2, #4]
 8005a06:	605a      	str	r2, [r3, #4]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d103      	bne.n	8005a1a <uxListRemove+0x34>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	605a      	str	r2, [r3, #4]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	611a      	str	r2, [r3, #16]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	1e5a      	subs	r2, r3, #1
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <xTaskCreateStatic>:
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b08e      	sub	sp, #56	; 0x38
 8005a3e:	af04      	add	r7, sp, #16
 8005a40:	60f8      	str	r0, [r7, #12]
 8005a42:	60b9      	str	r1, [r7, #8]
 8005a44:	607a      	str	r2, [r7, #4]
 8005a46:	603b      	str	r3, [r7, #0]
 8005a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d109      	bne.n	8005a62 <xTaskCreateStatic+0x28>
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	623b      	str	r3, [r7, #32]
 8005a60:	e7fe      	b.n	8005a60 <xTaskCreateStatic+0x26>
 8005a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d109      	bne.n	8005a7c <xTaskCreateStatic+0x42>
 8005a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	61fb      	str	r3, [r7, #28]
 8005a7a:	e7fe      	b.n	8005a7a <xTaskCreateStatic+0x40>
 8005a7c:	2354      	movs	r3, #84	; 0x54
 8005a7e:	613b      	str	r3, [r7, #16]
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	2b54      	cmp	r3, #84	; 0x54
 8005a84:	d009      	beq.n	8005a9a <xTaskCreateStatic+0x60>
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	61bb      	str	r3, [r7, #24]
 8005a98:	e7fe      	b.n	8005a98 <xTaskCreateStatic+0x5e>
 8005a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d01e      	beq.n	8005ade <xTaskCreateStatic+0xa4>
 8005aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d01b      	beq.n	8005ade <xTaskCreateStatic+0xa4>
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005aae:	631a      	str	r2, [r3, #48]	; 0x30
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005ab8:	2300      	movs	r3, #0
 8005aba:	9303      	str	r3, [sp, #12]
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	9302      	str	r3, [sp, #8]
 8005ac0:	f107 0314 	add.w	r3, r7, #20
 8005ac4:	9301      	str	r3, [sp, #4]
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 f850 	bl	8005b76 <prvInitialiseNewTask>
 8005ad6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ad8:	f000 f8cc 	bl	8005c74 <prvAddNewTaskToReadyList>
 8005adc:	e001      	b.n	8005ae2 <xTaskCreateStatic+0xa8>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3728      	adds	r7, #40	; 0x28
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <xTaskCreate>:
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08c      	sub	sp, #48	; 0x30
 8005af0:	af04      	add	r7, sp, #16
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	603b      	str	r3, [r7, #0]
 8005af8:	4613      	mov	r3, r2
 8005afa:	80fb      	strh	r3, [r7, #6]
 8005afc:	88fb      	ldrh	r3, [r7, #6]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 feb7 	bl	8006874 <pvPortMalloc>
 8005b06:	6178      	str	r0, [r7, #20]
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00e      	beq.n	8005b2c <xTaskCreate+0x40>
 8005b0e:	2054      	movs	r0, #84	; 0x54
 8005b10:	f000 feb0 	bl	8006874 <pvPortMalloc>
 8005b14:	61f8      	str	r0, [r7, #28]
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <xTaskCreate+0x38>
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	631a      	str	r2, [r3, #48]	; 0x30
 8005b22:	e005      	b.n	8005b30 <xTaskCreate+0x44>
 8005b24:	6978      	ldr	r0, [r7, #20]
 8005b26:	f000 ff67 	bl	80069f8 <vPortFree>
 8005b2a:	e001      	b.n	8005b30 <xTaskCreate+0x44>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	61fb      	str	r3, [r7, #28]
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d017      	beq.n	8005b66 <xTaskCreate+0x7a>
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005b3e:	88fa      	ldrh	r2, [r7, #6]
 8005b40:	2300      	movs	r3, #0
 8005b42:	9303      	str	r3, [sp, #12]
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	9302      	str	r3, [sp, #8]
 8005b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4a:	9301      	str	r3, [sp, #4]
 8005b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	68b9      	ldr	r1, [r7, #8]
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 f80e 	bl	8005b76 <prvInitialiseNewTask>
 8005b5a:	69f8      	ldr	r0, [r7, #28]
 8005b5c:	f000 f88a 	bl	8005c74 <prvAddNewTaskToReadyList>
 8005b60:	2301      	movs	r3, #1
 8005b62:	61bb      	str	r3, [r7, #24]
 8005b64:	e002      	b.n	8005b6c <xTaskCreate+0x80>
 8005b66:	f04f 33ff 	mov.w	r3, #4294967295
 8005b6a:	61bb      	str	r3, [r7, #24]
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3720      	adds	r7, #32
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <prvInitialiseNewTask>:
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b088      	sub	sp, #32
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	60f8      	str	r0, [r7, #12]
 8005b7e:	60b9      	str	r1, [r7, #8]
 8005b80:	607a      	str	r2, [r7, #4]
 8005b82:	603b      	str	r3, [r7, #0]
 8005b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	61bb      	str	r3, [r7, #24]
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	f023 0307 	bic.w	r3, r3, #7
 8005b9c:	61bb      	str	r3, [r7, #24]
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	f003 0307 	and.w	r3, r3, #7
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d009      	beq.n	8005bbc <prvInitialiseNewTask+0x46>
 8005ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	617b      	str	r3, [r7, #20]
 8005bba:	e7fe      	b.n	8005bba <prvInitialiseNewTask+0x44>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	61fb      	str	r3, [r7, #28]
 8005bc0:	e012      	b.n	8005be8 <prvInitialiseNewTask+0x72>
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	7819      	ldrb	r1, [r3, #0]
 8005bca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	4413      	add	r3, r2
 8005bd0:	3334      	adds	r3, #52	; 0x34
 8005bd2:	460a      	mov	r2, r1
 8005bd4:	701a      	strb	r2, [r3, #0]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	4413      	add	r3, r2
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d006      	beq.n	8005bf0 <prvInitialiseNewTask+0x7a>
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	3301      	adds	r3, #1
 8005be6:	61fb      	str	r3, [r7, #28]
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	2b0f      	cmp	r3, #15
 8005bec:	d9e9      	bls.n	8005bc2 <prvInitialiseNewTask+0x4c>
 8005bee:	e000      	b.n	8005bf2 <prvInitialiseNewTask+0x7c>
 8005bf0:	bf00      	nop
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfc:	2b06      	cmp	r3, #6
 8005bfe:	d901      	bls.n	8005c04 <prvInitialiseNewTask+0x8e>
 8005c00:	2306      	movs	r3, #6
 8005c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c08:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c0e:	645a      	str	r2, [r3, #68]	; 0x44
 8005c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c12:	2200      	movs	r2, #0
 8005c14:	649a      	str	r2, [r3, #72]	; 0x48
 8005c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c18:	3304      	adds	r3, #4
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7ff fe79 	bl	8005912 <vListInitialiseItem>
 8005c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c22:	3318      	adds	r3, #24
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff fe74 	bl	8005912 <vListInitialiseItem>
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c2e:	611a      	str	r2, [r3, #16]
 8005c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c32:	f1c3 0207 	rsb	r2, r3, #7
 8005c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c38:	619a      	str	r2, [r3, #24]
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c3e:	625a      	str	r2, [r3, #36]	; 0x24
 8005c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c42:	2200      	movs	r2, #0
 8005c44:	64da      	str	r2, [r3, #76]	; 0x4c
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	68f9      	ldr	r1, [r7, #12]
 8005c52:	69b8      	ldr	r0, [r7, #24]
 8005c54:	f000 fc08 	bl	8006468 <pxPortInitialiseStack>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5c:	601a      	str	r2, [r3, #0]
 8005c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <prvInitialiseNewTask+0xf4>
 8005c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	bf00      	nop
 8005c6c:	3720      	adds	r7, #32
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <prvAddNewTaskToReadyList>:
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	f000 fd1e 	bl	80066bc <vPortEnterCritical>
 8005c80:	4b2a      	ldr	r3, [pc, #168]	; (8005d2c <prvAddNewTaskToReadyList+0xb8>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3301      	adds	r3, #1
 8005c86:	4a29      	ldr	r2, [pc, #164]	; (8005d2c <prvAddNewTaskToReadyList+0xb8>)
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	4b29      	ldr	r3, [pc, #164]	; (8005d30 <prvAddNewTaskToReadyList+0xbc>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d109      	bne.n	8005ca6 <prvAddNewTaskToReadyList+0x32>
 8005c92:	4a27      	ldr	r2, [pc, #156]	; (8005d30 <prvAddNewTaskToReadyList+0xbc>)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	4b24      	ldr	r3, [pc, #144]	; (8005d2c <prvAddNewTaskToReadyList+0xb8>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d110      	bne.n	8005cc2 <prvAddNewTaskToReadyList+0x4e>
 8005ca0:	f000 fabc 	bl	800621c <prvInitialiseTaskLists>
 8005ca4:	e00d      	b.n	8005cc2 <prvAddNewTaskToReadyList+0x4e>
 8005ca6:	4b23      	ldr	r3, [pc, #140]	; (8005d34 <prvAddNewTaskToReadyList+0xc0>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d109      	bne.n	8005cc2 <prvAddNewTaskToReadyList+0x4e>
 8005cae:	4b20      	ldr	r3, [pc, #128]	; (8005d30 <prvAddNewTaskToReadyList+0xbc>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d802      	bhi.n	8005cc2 <prvAddNewTaskToReadyList+0x4e>
 8005cbc:	4a1c      	ldr	r2, [pc, #112]	; (8005d30 <prvAddNewTaskToReadyList+0xbc>)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	4b1d      	ldr	r3, [pc, #116]	; (8005d38 <prvAddNewTaskToReadyList+0xc4>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	4a1b      	ldr	r2, [pc, #108]	; (8005d38 <prvAddNewTaskToReadyList+0xc4>)
 8005cca:	6013      	str	r3, [r2, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	409a      	lsls	r2, r3
 8005cd4:	4b19      	ldr	r3, [pc, #100]	; (8005d3c <prvAddNewTaskToReadyList+0xc8>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	4a18      	ldr	r2, [pc, #96]	; (8005d3c <prvAddNewTaskToReadyList+0xc8>)
 8005cdc:	6013      	str	r3, [r2, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4a15      	ldr	r2, [pc, #84]	; (8005d40 <prvAddNewTaskToReadyList+0xcc>)
 8005cec:	441a      	add	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	f7ff fe19 	bl	800592c <vListInsertEnd>
 8005cfa:	f000 fd0d 	bl	8006718 <vPortExitCritical>
 8005cfe:	4b0d      	ldr	r3, [pc, #52]	; (8005d34 <prvAddNewTaskToReadyList+0xc0>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00e      	beq.n	8005d24 <prvAddNewTaskToReadyList+0xb0>
 8005d06:	4b0a      	ldr	r3, [pc, #40]	; (8005d30 <prvAddNewTaskToReadyList+0xbc>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d207      	bcs.n	8005d24 <prvAddNewTaskToReadyList+0xb0>
 8005d14:	4b0b      	ldr	r3, [pc, #44]	; (8005d44 <prvAddNewTaskToReadyList+0xd0>)
 8005d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	bf00      	nop
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	200001dc 	.word	0x200001dc
 8005d30:	200000dc 	.word	0x200000dc
 8005d34:	200001e8 	.word	0x200001e8
 8005d38:	200001f8 	.word	0x200001f8
 8005d3c:	200001e4 	.word	0x200001e4
 8005d40:	200000e0 	.word	0x200000e0
 8005d44:	e000ed04 	.word	0xe000ed04

08005d48 <vTaskDelay>:
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	2300      	movs	r3, #0
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d016      	beq.n	8005d88 <vTaskDelay+0x40>
 8005d5a:	4b13      	ldr	r3, [pc, #76]	; (8005da8 <vTaskDelay+0x60>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d009      	beq.n	8005d76 <vTaskDelay+0x2e>
 8005d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	60bb      	str	r3, [r7, #8]
 8005d74:	e7fe      	b.n	8005d74 <vTaskDelay+0x2c>
 8005d76:	f000 f879 	bl	8005e6c <vTaskSuspendAll>
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fb0d 	bl	800639c <prvAddCurrentTaskToDelayedList>
 8005d82:	f000 f881 	bl	8005e88 <xTaskResumeAll>
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d107      	bne.n	8005d9e <vTaskDelay+0x56>
 8005d8e:	4b07      	ldr	r3, [pc, #28]	; (8005dac <vTaskDelay+0x64>)
 8005d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	bf00      	nop
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000204 	.word	0x20000204
 8005dac:	e000ed04 	.word	0xe000ed04

08005db0 <vTaskStartScheduler>:
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b08a      	sub	sp, #40	; 0x28
 8005db4:	af04      	add	r7, sp, #16
 8005db6:	2300      	movs	r3, #0
 8005db8:	60bb      	str	r3, [r7, #8]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	607b      	str	r3, [r7, #4]
 8005dbe:	463a      	mov	r2, r7
 8005dc0:	1d39      	adds	r1, r7, #4
 8005dc2:	f107 0308 	add.w	r3, r7, #8
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f001 fb64 	bl	8007494 <vApplicationGetIdleTaskMemory>
 8005dcc:	6839      	ldr	r1, [r7, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	9202      	str	r2, [sp, #8]
 8005dd4:	9301      	str	r3, [sp, #4]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	460a      	mov	r2, r1
 8005dde:	491d      	ldr	r1, [pc, #116]	; (8005e54 <vTaskStartScheduler+0xa4>)
 8005de0:	481d      	ldr	r0, [pc, #116]	; (8005e58 <vTaskStartScheduler+0xa8>)
 8005de2:	f7ff fe2a 	bl	8005a3a <xTaskCreateStatic>
 8005de6:	4602      	mov	r2, r0
 8005de8:	4b1c      	ldr	r3, [pc, #112]	; (8005e5c <vTaskStartScheduler+0xac>)
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	4b1b      	ldr	r3, [pc, #108]	; (8005e5c <vTaskStartScheduler+0xac>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d002      	beq.n	8005dfa <vTaskStartScheduler+0x4a>
 8005df4:	2301      	movs	r3, #1
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	e001      	b.n	8005dfe <vTaskStartScheduler+0x4e>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	617b      	str	r3, [r7, #20]
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d115      	bne.n	8005e30 <vTaskStartScheduler+0x80>
 8005e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	613b      	str	r3, [r7, #16]
 8005e16:	4b12      	ldr	r3, [pc, #72]	; (8005e60 <vTaskStartScheduler+0xb0>)
 8005e18:	f04f 32ff 	mov.w	r2, #4294967295
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	4b11      	ldr	r3, [pc, #68]	; (8005e64 <vTaskStartScheduler+0xb4>)
 8005e20:	2201      	movs	r2, #1
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	4b10      	ldr	r3, [pc, #64]	; (8005e68 <vTaskStartScheduler+0xb8>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	f000 fba9 	bl	8006580 <xPortStartScheduler>
 8005e2e:	e00d      	b.n	8005e4c <vTaskStartScheduler+0x9c>
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e36:	d109      	bne.n	8005e4c <vTaskStartScheduler+0x9c>
 8005e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3c:	f383 8811 	msr	BASEPRI, r3
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	60fb      	str	r3, [r7, #12]
 8005e4a:	e7fe      	b.n	8005e4a <vTaskStartScheduler+0x9a>
 8005e4c:	bf00      	nop
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	0800bc78 	.word	0x0800bc78
 8005e58:	080061ed 	.word	0x080061ed
 8005e5c:	20000200 	.word	0x20000200
 8005e60:	200001fc 	.word	0x200001fc
 8005e64:	200001e8 	.word	0x200001e8
 8005e68:	200001e0 	.word	0x200001e0

08005e6c <vTaskSuspendAll>:
 8005e6c:	b480      	push	{r7}
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	4b04      	ldr	r3, [pc, #16]	; (8005e84 <vTaskSuspendAll+0x18>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3301      	adds	r3, #1
 8005e76:	4a03      	ldr	r2, [pc, #12]	; (8005e84 <vTaskSuspendAll+0x18>)
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	bf00      	nop
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	20000204 	.word	0x20000204

08005e88 <xTaskResumeAll>:
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	2300      	movs	r3, #0
 8005e94:	60bb      	str	r3, [r7, #8]
 8005e96:	4b41      	ldr	r3, [pc, #260]	; (8005f9c <xTaskResumeAll+0x114>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d109      	bne.n	8005eb2 <xTaskResumeAll+0x2a>
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	603b      	str	r3, [r7, #0]
 8005eb0:	e7fe      	b.n	8005eb0 <xTaskResumeAll+0x28>
 8005eb2:	f000 fc03 	bl	80066bc <vPortEnterCritical>
 8005eb6:	4b39      	ldr	r3, [pc, #228]	; (8005f9c <xTaskResumeAll+0x114>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	4a37      	ldr	r2, [pc, #220]	; (8005f9c <xTaskResumeAll+0x114>)
 8005ebe:	6013      	str	r3, [r2, #0]
 8005ec0:	4b36      	ldr	r3, [pc, #216]	; (8005f9c <xTaskResumeAll+0x114>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d161      	bne.n	8005f8c <xTaskResumeAll+0x104>
 8005ec8:	4b35      	ldr	r3, [pc, #212]	; (8005fa0 <xTaskResumeAll+0x118>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d05d      	beq.n	8005f8c <xTaskResumeAll+0x104>
 8005ed0:	e02e      	b.n	8005f30 <xTaskResumeAll+0xa8>
 8005ed2:	4b34      	ldr	r3, [pc, #208]	; (8005fa4 <xTaskResumeAll+0x11c>)
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	3318      	adds	r3, #24
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7ff fd81 	bl	80059e6 <uxListRemove>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff fd7c 	bl	80059e6 <uxListRemove>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	409a      	lsls	r2, r3
 8005ef6:	4b2c      	ldr	r3, [pc, #176]	; (8005fa8 <xTaskResumeAll+0x120>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	4a2a      	ldr	r2, [pc, #168]	; (8005fa8 <xTaskResumeAll+0x120>)
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4a27      	ldr	r2, [pc, #156]	; (8005fac <xTaskResumeAll+0x124>)
 8005f0e:	441a      	add	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	3304      	adds	r3, #4
 8005f14:	4619      	mov	r1, r3
 8005f16:	4610      	mov	r0, r2
 8005f18:	f7ff fd08 	bl	800592c <vListInsertEnd>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f20:	4b23      	ldr	r3, [pc, #140]	; (8005fb0 <xTaskResumeAll+0x128>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d302      	bcc.n	8005f30 <xTaskResumeAll+0xa8>
 8005f2a:	4b22      	ldr	r3, [pc, #136]	; (8005fb4 <xTaskResumeAll+0x12c>)
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	4b1c      	ldr	r3, [pc, #112]	; (8005fa4 <xTaskResumeAll+0x11c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1cc      	bne.n	8005ed2 <xTaskResumeAll+0x4a>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <xTaskResumeAll+0xba>
 8005f3e:	f000 fa07 	bl	8006350 <prvResetNextTaskUnblockTime>
 8005f42:	4b1d      	ldr	r3, [pc, #116]	; (8005fb8 <xTaskResumeAll+0x130>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	607b      	str	r3, [r7, #4]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d010      	beq.n	8005f70 <xTaskResumeAll+0xe8>
 8005f4e:	f000 f837 	bl	8005fc0 <xTaskIncrementTick>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <xTaskResumeAll+0xd6>
 8005f58:	4b16      	ldr	r3, [pc, #88]	; (8005fb4 <xTaskResumeAll+0x12c>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	3b01      	subs	r3, #1
 8005f62:	607b      	str	r3, [r7, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1f1      	bne.n	8005f4e <xTaskResumeAll+0xc6>
 8005f6a:	4b13      	ldr	r3, [pc, #76]	; (8005fb8 <xTaskResumeAll+0x130>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	4b10      	ldr	r3, [pc, #64]	; (8005fb4 <xTaskResumeAll+0x12c>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d009      	beq.n	8005f8c <xTaskResumeAll+0x104>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	60bb      	str	r3, [r7, #8]
 8005f7c:	4b0f      	ldr	r3, [pc, #60]	; (8005fbc <xTaskResumeAll+0x134>)
 8005f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f000 fbc4 	bl	8006718 <vPortExitCritical>
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000204 	.word	0x20000204
 8005fa0:	200001dc 	.word	0x200001dc
 8005fa4:	2000019c 	.word	0x2000019c
 8005fa8:	200001e4 	.word	0x200001e4
 8005fac:	200000e0 	.word	0x200000e0
 8005fb0:	200000dc 	.word	0x200000dc
 8005fb4:	200001f0 	.word	0x200001f0
 8005fb8:	200001ec 	.word	0x200001ec
 8005fbc:	e000ed04 	.word	0xe000ed04

08005fc0 <xTaskIncrementTick>:
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	617b      	str	r3, [r7, #20]
 8005fca:	4b50      	ldr	r3, [pc, #320]	; (800610c <xTaskIncrementTick+0x14c>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f040 808c 	bne.w	80060ec <xTaskIncrementTick+0x12c>
 8005fd4:	4b4e      	ldr	r3, [pc, #312]	; (8006110 <xTaskIncrementTick+0x150>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	613b      	str	r3, [r7, #16]
 8005fdc:	4a4c      	ldr	r2, [pc, #304]	; (8006110 <xTaskIncrementTick+0x150>)
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d11f      	bne.n	8006028 <xTaskIncrementTick+0x68>
 8005fe8:	4b4a      	ldr	r3, [pc, #296]	; (8006114 <xTaskIncrementTick+0x154>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d009      	beq.n	8006006 <xTaskIncrementTick+0x46>
 8005ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	e7fe      	b.n	8006004 <xTaskIncrementTick+0x44>
 8006006:	4b43      	ldr	r3, [pc, #268]	; (8006114 <xTaskIncrementTick+0x154>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60fb      	str	r3, [r7, #12]
 800600c:	4b42      	ldr	r3, [pc, #264]	; (8006118 <xTaskIncrementTick+0x158>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a40      	ldr	r2, [pc, #256]	; (8006114 <xTaskIncrementTick+0x154>)
 8006012:	6013      	str	r3, [r2, #0]
 8006014:	4a40      	ldr	r2, [pc, #256]	; (8006118 <xTaskIncrementTick+0x158>)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6013      	str	r3, [r2, #0]
 800601a:	4b40      	ldr	r3, [pc, #256]	; (800611c <xTaskIncrementTick+0x15c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3301      	adds	r3, #1
 8006020:	4a3e      	ldr	r2, [pc, #248]	; (800611c <xTaskIncrementTick+0x15c>)
 8006022:	6013      	str	r3, [r2, #0]
 8006024:	f000 f994 	bl	8006350 <prvResetNextTaskUnblockTime>
 8006028:	4b3d      	ldr	r3, [pc, #244]	; (8006120 <xTaskIncrementTick+0x160>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	429a      	cmp	r2, r3
 8006030:	d34d      	bcc.n	80060ce <xTaskIncrementTick+0x10e>
 8006032:	4b38      	ldr	r3, [pc, #224]	; (8006114 <xTaskIncrementTick+0x154>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <xTaskIncrementTick+0x80>
 800603c:	2301      	movs	r3, #1
 800603e:	e000      	b.n	8006042 <xTaskIncrementTick+0x82>
 8006040:	2300      	movs	r3, #0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d004      	beq.n	8006050 <xTaskIncrementTick+0x90>
 8006046:	4b36      	ldr	r3, [pc, #216]	; (8006120 <xTaskIncrementTick+0x160>)
 8006048:	f04f 32ff 	mov.w	r2, #4294967295
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	e03e      	b.n	80060ce <xTaskIncrementTick+0x10e>
 8006050:	4b30      	ldr	r3, [pc, #192]	; (8006114 <xTaskIncrementTick+0x154>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	60bb      	str	r3, [r7, #8]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	607b      	str	r3, [r7, #4]
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	429a      	cmp	r2, r3
 8006066:	d203      	bcs.n	8006070 <xTaskIncrementTick+0xb0>
 8006068:	4a2d      	ldr	r2, [pc, #180]	; (8006120 <xTaskIncrementTick+0x160>)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	e02e      	b.n	80060ce <xTaskIncrementTick+0x10e>
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	3304      	adds	r3, #4
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff fcb6 	bl	80059e6 <uxListRemove>
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	2b00      	cmp	r3, #0
 8006080:	d004      	beq.n	800608c <xTaskIncrementTick+0xcc>
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	3318      	adds	r3, #24
 8006086:	4618      	mov	r0, r3
 8006088:	f7ff fcad 	bl	80059e6 <uxListRemove>
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	2201      	movs	r2, #1
 8006092:	409a      	lsls	r2, r3
 8006094:	4b23      	ldr	r3, [pc, #140]	; (8006124 <xTaskIncrementTick+0x164>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4313      	orrs	r3, r2
 800609a:	4a22      	ldr	r2, [pc, #136]	; (8006124 <xTaskIncrementTick+0x164>)
 800609c:	6013      	str	r3, [r2, #0]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a2:	4613      	mov	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4a1f      	ldr	r2, [pc, #124]	; (8006128 <xTaskIncrementTick+0x168>)
 80060ac:	441a      	add	r2, r3
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	3304      	adds	r3, #4
 80060b2:	4619      	mov	r1, r3
 80060b4:	4610      	mov	r0, r2
 80060b6:	f7ff fc39 	bl	800592c <vListInsertEnd>
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060be:	4b1b      	ldr	r3, [pc, #108]	; (800612c <xTaskIncrementTick+0x16c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d3b4      	bcc.n	8006032 <xTaskIncrementTick+0x72>
 80060c8:	2301      	movs	r3, #1
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	e7b1      	b.n	8006032 <xTaskIncrementTick+0x72>
 80060ce:	4b17      	ldr	r3, [pc, #92]	; (800612c <xTaskIncrementTick+0x16c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d4:	4914      	ldr	r1, [pc, #80]	; (8006128 <xTaskIncrementTick+0x168>)
 80060d6:	4613      	mov	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	440b      	add	r3, r1
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d907      	bls.n	80060f6 <xTaskIncrementTick+0x136>
 80060e6:	2301      	movs	r3, #1
 80060e8:	617b      	str	r3, [r7, #20]
 80060ea:	e004      	b.n	80060f6 <xTaskIncrementTick+0x136>
 80060ec:	4b10      	ldr	r3, [pc, #64]	; (8006130 <xTaskIncrementTick+0x170>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3301      	adds	r3, #1
 80060f2:	4a0f      	ldr	r2, [pc, #60]	; (8006130 <xTaskIncrementTick+0x170>)
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <xTaskIncrementTick+0x174>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <xTaskIncrementTick+0x142>
 80060fe:	2301      	movs	r3, #1
 8006100:	617b      	str	r3, [r7, #20]
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	4618      	mov	r0, r3
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	20000204 	.word	0x20000204
 8006110:	200001e0 	.word	0x200001e0
 8006114:	20000194 	.word	0x20000194
 8006118:	20000198 	.word	0x20000198
 800611c:	200001f4 	.word	0x200001f4
 8006120:	200001fc 	.word	0x200001fc
 8006124:	200001e4 	.word	0x200001e4
 8006128:	200000e0 	.word	0x200000e0
 800612c:	200000dc 	.word	0x200000dc
 8006130:	200001ec 	.word	0x200001ec
 8006134:	200001f0 	.word	0x200001f0

08006138 <vTaskSwitchContext>:
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	4b26      	ldr	r3, [pc, #152]	; (80061d8 <vTaskSwitchContext+0xa0>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <vTaskSwitchContext+0x16>
 8006146:	4b25      	ldr	r3, [pc, #148]	; (80061dc <vTaskSwitchContext+0xa4>)
 8006148:	2201      	movs	r2, #1
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	e03e      	b.n	80061cc <vTaskSwitchContext+0x94>
 800614e:	4b23      	ldr	r3, [pc, #140]	; (80061dc <vTaskSwitchContext+0xa4>)
 8006150:	2200      	movs	r2, #0
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	4b22      	ldr	r3, [pc, #136]	; (80061e0 <vTaskSwitchContext+0xa8>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	60fb      	str	r3, [r7, #12]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	fab3 f383 	clz	r3, r3
 8006160:	72fb      	strb	r3, [r7, #11]
 8006162:	7afb      	ldrb	r3, [r7, #11]
 8006164:	f1c3 031f 	rsb	r3, r3, #31
 8006168:	617b      	str	r3, [r7, #20]
 800616a:	491e      	ldr	r1, [pc, #120]	; (80061e4 <vTaskSwitchContext+0xac>)
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	4613      	mov	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	440b      	add	r3, r1
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d109      	bne.n	8006192 <vTaskSwitchContext+0x5a>
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	607b      	str	r3, [r7, #4]
 8006190:	e7fe      	b.n	8006190 <vTaskSwitchContext+0x58>
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4a11      	ldr	r2, [pc, #68]	; (80061e4 <vTaskSwitchContext+0xac>)
 800619e:	4413      	add	r3, r2
 80061a0:	613b      	str	r3, [r7, #16]
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	605a      	str	r2, [r3, #4]
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	3308      	adds	r3, #8
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d104      	bne.n	80061c2 <vTaskSwitchContext+0x8a>
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	605a      	str	r2, [r3, #4]
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	4a07      	ldr	r2, [pc, #28]	; (80061e8 <vTaskSwitchContext+0xb0>)
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	bf00      	nop
 80061ce:	371c      	adds	r7, #28
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	20000204 	.word	0x20000204
 80061dc:	200001f0 	.word	0x200001f0
 80061e0:	200001e4 	.word	0x200001e4
 80061e4:	200000e0 	.word	0x200000e0
 80061e8:	200000dc 	.word	0x200000dc

080061ec <prvIdleTask>:
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	f000 f852 	bl	800629c <prvCheckTasksWaitingTermination>
 80061f8:	4b06      	ldr	r3, [pc, #24]	; (8006214 <prvIdleTask+0x28>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d9f9      	bls.n	80061f4 <prvIdleTask+0x8>
 8006200:	4b05      	ldr	r3, [pc, #20]	; (8006218 <prvIdleTask+0x2c>)
 8006202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	e7f0      	b.n	80061f4 <prvIdleTask+0x8>
 8006212:	bf00      	nop
 8006214:	200000e0 	.word	0x200000e0
 8006218:	e000ed04 	.word	0xe000ed04

0800621c <prvInitialiseTaskLists>:
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	2300      	movs	r3, #0
 8006224:	607b      	str	r3, [r7, #4]
 8006226:	e00c      	b.n	8006242 <prvInitialiseTaskLists+0x26>
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4a12      	ldr	r2, [pc, #72]	; (800627c <prvInitialiseTaskLists+0x60>)
 8006234:	4413      	add	r3, r2
 8006236:	4618      	mov	r0, r3
 8006238:	f7ff fb4b 	bl	80058d2 <vListInitialise>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3301      	adds	r3, #1
 8006240:	607b      	str	r3, [r7, #4]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b06      	cmp	r3, #6
 8006246:	d9ef      	bls.n	8006228 <prvInitialiseTaskLists+0xc>
 8006248:	480d      	ldr	r0, [pc, #52]	; (8006280 <prvInitialiseTaskLists+0x64>)
 800624a:	f7ff fb42 	bl	80058d2 <vListInitialise>
 800624e:	480d      	ldr	r0, [pc, #52]	; (8006284 <prvInitialiseTaskLists+0x68>)
 8006250:	f7ff fb3f 	bl	80058d2 <vListInitialise>
 8006254:	480c      	ldr	r0, [pc, #48]	; (8006288 <prvInitialiseTaskLists+0x6c>)
 8006256:	f7ff fb3c 	bl	80058d2 <vListInitialise>
 800625a:	480c      	ldr	r0, [pc, #48]	; (800628c <prvInitialiseTaskLists+0x70>)
 800625c:	f7ff fb39 	bl	80058d2 <vListInitialise>
 8006260:	480b      	ldr	r0, [pc, #44]	; (8006290 <prvInitialiseTaskLists+0x74>)
 8006262:	f7ff fb36 	bl	80058d2 <vListInitialise>
 8006266:	4b0b      	ldr	r3, [pc, #44]	; (8006294 <prvInitialiseTaskLists+0x78>)
 8006268:	4a05      	ldr	r2, [pc, #20]	; (8006280 <prvInitialiseTaskLists+0x64>)
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <prvInitialiseTaskLists+0x7c>)
 800626e:	4a05      	ldr	r2, [pc, #20]	; (8006284 <prvInitialiseTaskLists+0x68>)
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	bf00      	nop
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	200000e0 	.word	0x200000e0
 8006280:	2000016c 	.word	0x2000016c
 8006284:	20000180 	.word	0x20000180
 8006288:	2000019c 	.word	0x2000019c
 800628c:	200001b0 	.word	0x200001b0
 8006290:	200001c8 	.word	0x200001c8
 8006294:	20000194 	.word	0x20000194
 8006298:	20000198 	.word	0x20000198

0800629c <prvCheckTasksWaitingTermination>:
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	e019      	b.n	80062d8 <prvCheckTasksWaitingTermination+0x3c>
 80062a4:	f000 fa0a 	bl	80066bc <vPortEnterCritical>
 80062a8:	4b0f      	ldr	r3, [pc, #60]	; (80062e8 <prvCheckTasksWaitingTermination+0x4c>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	607b      	str	r3, [r7, #4]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3304      	adds	r3, #4
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff fb96 	bl	80059e6 <uxListRemove>
 80062ba:	4b0c      	ldr	r3, [pc, #48]	; (80062ec <prvCheckTasksWaitingTermination+0x50>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3b01      	subs	r3, #1
 80062c0:	4a0a      	ldr	r2, [pc, #40]	; (80062ec <prvCheckTasksWaitingTermination+0x50>)
 80062c2:	6013      	str	r3, [r2, #0]
 80062c4:	4b0a      	ldr	r3, [pc, #40]	; (80062f0 <prvCheckTasksWaitingTermination+0x54>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	4a09      	ldr	r2, [pc, #36]	; (80062f0 <prvCheckTasksWaitingTermination+0x54>)
 80062cc:	6013      	str	r3, [r2, #0]
 80062ce:	f000 fa23 	bl	8006718 <vPortExitCritical>
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f80e 	bl	80062f4 <prvDeleteTCB>
 80062d8:	4b05      	ldr	r3, [pc, #20]	; (80062f0 <prvCheckTasksWaitingTermination+0x54>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e1      	bne.n	80062a4 <prvCheckTasksWaitingTermination+0x8>
 80062e0:	bf00      	nop
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	200001b0 	.word	0x200001b0
 80062ec:	200001dc 	.word	0x200001dc
 80062f0:	200001c4 	.word	0x200001c4

080062f4 <prvDeleteTCB>:
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006302:	2b00      	cmp	r3, #0
 8006304:	d108      	bne.n	8006318 <prvDeleteTCB+0x24>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630a:	4618      	mov	r0, r3
 800630c:	f000 fb74 	bl	80069f8 <vPortFree>
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fb71 	bl	80069f8 <vPortFree>
 8006316:	e017      	b.n	8006348 <prvDeleteTCB+0x54>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800631e:	2b01      	cmp	r3, #1
 8006320:	d103      	bne.n	800632a <prvDeleteTCB+0x36>
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fb68 	bl	80069f8 <vPortFree>
 8006328:	e00e      	b.n	8006348 <prvDeleteTCB+0x54>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006330:	2b02      	cmp	r3, #2
 8006332:	d009      	beq.n	8006348 <prvDeleteTCB+0x54>
 8006334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	60fb      	str	r3, [r7, #12]
 8006346:	e7fe      	b.n	8006346 <prvDeleteTCB+0x52>
 8006348:	bf00      	nop
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <prvResetNextTaskUnblockTime>:
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	4b0f      	ldr	r3, [pc, #60]	; (8006394 <prvResetNextTaskUnblockTime+0x44>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <prvResetNextTaskUnblockTime+0x14>
 8006360:	2301      	movs	r3, #1
 8006362:	e000      	b.n	8006366 <prvResetNextTaskUnblockTime+0x16>
 8006364:	2300      	movs	r3, #0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d004      	beq.n	8006374 <prvResetNextTaskUnblockTime+0x24>
 800636a:	4b0b      	ldr	r3, [pc, #44]	; (8006398 <prvResetNextTaskUnblockTime+0x48>)
 800636c:	f04f 32ff 	mov.w	r2, #4294967295
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	e008      	b.n	8006386 <prvResetNextTaskUnblockTime+0x36>
 8006374:	4b07      	ldr	r3, [pc, #28]	; (8006394 <prvResetNextTaskUnblockTime+0x44>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	607b      	str	r3, [r7, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	4a05      	ldr	r2, [pc, #20]	; (8006398 <prvResetNextTaskUnblockTime+0x48>)
 8006384:	6013      	str	r3, [r2, #0]
 8006386:	bf00      	nop
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	20000194 	.word	0x20000194
 8006398:	200001fc 	.word	0x200001fc

0800639c <prvAddCurrentTaskToDelayedList>:
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
 80063a6:	4b29      	ldr	r3, [pc, #164]	; (800644c <prvAddCurrentTaskToDelayedList+0xb0>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60fb      	str	r3, [r7, #12]
 80063ac:	4b28      	ldr	r3, [pc, #160]	; (8006450 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3304      	adds	r3, #4
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff fb17 	bl	80059e6 <uxListRemove>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10b      	bne.n	80063d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80063be:	4b24      	ldr	r3, [pc, #144]	; (8006450 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c4:	2201      	movs	r2, #1
 80063c6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ca:	43da      	mvns	r2, r3
 80063cc:	4b21      	ldr	r3, [pc, #132]	; (8006454 <prvAddCurrentTaskToDelayedList+0xb8>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4013      	ands	r3, r2
 80063d2:	4a20      	ldr	r2, [pc, #128]	; (8006454 <prvAddCurrentTaskToDelayedList+0xb8>)
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063dc:	d10a      	bne.n	80063f4 <prvAddCurrentTaskToDelayedList+0x58>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d007      	beq.n	80063f4 <prvAddCurrentTaskToDelayedList+0x58>
 80063e4:	4b1a      	ldr	r3, [pc, #104]	; (8006450 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3304      	adds	r3, #4
 80063ea:	4619      	mov	r1, r3
 80063ec:	481a      	ldr	r0, [pc, #104]	; (8006458 <prvAddCurrentTaskToDelayedList+0xbc>)
 80063ee:	f7ff fa9d 	bl	800592c <vListInsertEnd>
 80063f2:	e026      	b.n	8006442 <prvAddCurrentTaskToDelayedList+0xa6>
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4413      	add	r3, r2
 80063fa:	60bb      	str	r3, [r7, #8]
 80063fc:	4b14      	ldr	r3, [pc, #80]	; (8006450 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	605a      	str	r2, [r3, #4]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	429a      	cmp	r2, r3
 800640a:	d209      	bcs.n	8006420 <prvAddCurrentTaskToDelayedList+0x84>
 800640c:	4b13      	ldr	r3, [pc, #76]	; (800645c <prvAddCurrentTaskToDelayedList+0xc0>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	4b0f      	ldr	r3, [pc, #60]	; (8006450 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3304      	adds	r3, #4
 8006416:	4619      	mov	r1, r3
 8006418:	4610      	mov	r0, r2
 800641a:	f7ff faab 	bl	8005974 <vListInsert>
 800641e:	e010      	b.n	8006442 <prvAddCurrentTaskToDelayedList+0xa6>
 8006420:	4b0f      	ldr	r3, [pc, #60]	; (8006460 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	4b0a      	ldr	r3, [pc, #40]	; (8006450 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3304      	adds	r3, #4
 800642a:	4619      	mov	r1, r3
 800642c:	4610      	mov	r0, r2
 800642e:	f7ff faa1 	bl	8005974 <vListInsert>
 8006432:	4b0c      	ldr	r3, [pc, #48]	; (8006464 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	429a      	cmp	r2, r3
 800643a:	d202      	bcs.n	8006442 <prvAddCurrentTaskToDelayedList+0xa6>
 800643c:	4a09      	ldr	r2, [pc, #36]	; (8006464 <prvAddCurrentTaskToDelayedList+0xc8>)
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	bf00      	nop
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	200001e0 	.word	0x200001e0
 8006450:	200000dc 	.word	0x200000dc
 8006454:	200001e4 	.word	0x200001e4
 8006458:	200001c8 	.word	0x200001c8
 800645c:	20000198 	.word	0x20000198
 8006460:	20000194 	.word	0x20000194
 8006464:	200001fc 	.word	0x200001fc

08006468 <pxPortInitialiseStack>:
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3b04      	subs	r3, #4
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3b04      	subs	r3, #4
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	f023 0201 	bic.w	r2, r3, #1
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3b04      	subs	r3, #4
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	4a0c      	ldr	r2, [pc, #48]	; (80064cc <pxPortInitialiseStack+0x64>)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3b14      	subs	r3, #20
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	3b04      	subs	r3, #4
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f06f 0202 	mvn.w	r2, #2
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	3b20      	subs	r3, #32
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	080064d1 	.word	0x080064d1

080064d0 <prvTaskExitError>:
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	2300      	movs	r3, #0
 80064d8:	607b      	str	r3, [r7, #4]
 80064da:	4b11      	ldr	r3, [pc, #68]	; (8006520 <prvTaskExitError+0x50>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e2:	d009      	beq.n	80064f8 <prvTaskExitError+0x28>
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	e7fe      	b.n	80064f6 <prvTaskExitError+0x26>
 80064f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	60bb      	str	r3, [r7, #8]
 800650a:	bf00      	nop
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0fc      	beq.n	800650c <prvTaskExitError+0x3c>
 8006512:	bf00      	nop
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	20000004 	.word	0x20000004
	...

08006530 <SVC_Handler>:
 8006530:	4b07      	ldr	r3, [pc, #28]	; (8006550 <pxCurrentTCBConst2>)
 8006532:	6819      	ldr	r1, [r3, #0]
 8006534:	6808      	ldr	r0, [r1, #0]
 8006536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653a:	f380 8809 	msr	PSP, r0
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f04f 0000 	mov.w	r0, #0
 8006546:	f380 8811 	msr	BASEPRI, r0
 800654a:	4770      	bx	lr
 800654c:	f3af 8000 	nop.w

08006550 <pxCurrentTCBConst2>:
 8006550:	200000dc 	.word	0x200000dc
 8006554:	bf00      	nop
 8006556:	bf00      	nop

08006558 <prvPortStartFirstTask>:
 8006558:	4808      	ldr	r0, [pc, #32]	; (800657c <prvPortStartFirstTask+0x24>)
 800655a:	6800      	ldr	r0, [r0, #0]
 800655c:	6800      	ldr	r0, [r0, #0]
 800655e:	f380 8808 	msr	MSP, r0
 8006562:	f04f 0000 	mov.w	r0, #0
 8006566:	f380 8814 	msr	CONTROL, r0
 800656a:	b662      	cpsie	i
 800656c:	b661      	cpsie	f
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	df00      	svc	0
 8006578:	bf00      	nop
 800657a:	bf00      	nop
 800657c:	e000ed08 	.word	0xe000ed08

08006580 <xPortStartScheduler>:
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	4b44      	ldr	r3, [pc, #272]	; (8006698 <xPortStartScheduler+0x118>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a44      	ldr	r2, [pc, #272]	; (800669c <xPortStartScheduler+0x11c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d109      	bne.n	80065a4 <xPortStartScheduler+0x24>
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	613b      	str	r3, [r7, #16]
 80065a2:	e7fe      	b.n	80065a2 <xPortStartScheduler+0x22>
 80065a4:	4b3c      	ldr	r3, [pc, #240]	; (8006698 <xPortStartScheduler+0x118>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a3d      	ldr	r2, [pc, #244]	; (80066a0 <xPortStartScheduler+0x120>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d109      	bne.n	80065c2 <xPortStartScheduler+0x42>
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	e7fe      	b.n	80065c0 <xPortStartScheduler+0x40>
 80065c2:	4b38      	ldr	r3, [pc, #224]	; (80066a4 <xPortStartScheduler+0x124>)
 80065c4:	617b      	str	r3, [r7, #20]
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	607b      	str	r3, [r7, #4]
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	22ff      	movs	r2, #255	; 0xff
 80065d2:	701a      	strb	r2, [r3, #0]
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	70fb      	strb	r3, [r7, #3]
 80065dc:	78fb      	ldrb	r3, [r7, #3]
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	4b30      	ldr	r3, [pc, #192]	; (80066a8 <xPortStartScheduler+0x128>)
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	4b30      	ldr	r3, [pc, #192]	; (80066ac <xPortStartScheduler+0x12c>)
 80065ec:	2207      	movs	r2, #7
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	e009      	b.n	8006606 <xPortStartScheduler+0x86>
 80065f2:	4b2e      	ldr	r3, [pc, #184]	; (80066ac <xPortStartScheduler+0x12c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3b01      	subs	r3, #1
 80065f8:	4a2c      	ldr	r2, [pc, #176]	; (80066ac <xPortStartScheduler+0x12c>)
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	b2db      	uxtb	r3, r3
 8006604:	70fb      	strb	r3, [r7, #3]
 8006606:	78fb      	ldrb	r3, [r7, #3]
 8006608:	b2db      	uxtb	r3, r3
 800660a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660e:	2b80      	cmp	r3, #128	; 0x80
 8006610:	d0ef      	beq.n	80065f2 <xPortStartScheduler+0x72>
 8006612:	4b26      	ldr	r3, [pc, #152]	; (80066ac <xPortStartScheduler+0x12c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f1c3 0307 	rsb	r3, r3, #7
 800661a:	2b04      	cmp	r3, #4
 800661c:	d009      	beq.n	8006632 <xPortStartScheduler+0xb2>
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	60bb      	str	r3, [r7, #8]
 8006630:	e7fe      	b.n	8006630 <xPortStartScheduler+0xb0>
 8006632:	4b1e      	ldr	r3, [pc, #120]	; (80066ac <xPortStartScheduler+0x12c>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	021b      	lsls	r3, r3, #8
 8006638:	4a1c      	ldr	r2, [pc, #112]	; (80066ac <xPortStartScheduler+0x12c>)
 800663a:	6013      	str	r3, [r2, #0]
 800663c:	4b1b      	ldr	r3, [pc, #108]	; (80066ac <xPortStartScheduler+0x12c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006644:	4a19      	ldr	r2, [pc, #100]	; (80066ac <xPortStartScheduler+0x12c>)
 8006646:	6013      	str	r3, [r2, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	b2da      	uxtb	r2, r3
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	701a      	strb	r2, [r3, #0]
 8006650:	4b17      	ldr	r3, [pc, #92]	; (80066b0 <xPortStartScheduler+0x130>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a16      	ldr	r2, [pc, #88]	; (80066b0 <xPortStartScheduler+0x130>)
 8006656:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	4b14      	ldr	r3, [pc, #80]	; (80066b0 <xPortStartScheduler+0x130>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a13      	ldr	r2, [pc, #76]	; (80066b0 <xPortStartScheduler+0x130>)
 8006662:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006666:	6013      	str	r3, [r2, #0]
 8006668:	f000 f8d6 	bl	8006818 <vPortSetupTimerInterrupt>
 800666c:	4b11      	ldr	r3, [pc, #68]	; (80066b4 <xPortStartScheduler+0x134>)
 800666e:	2200      	movs	r2, #0
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	f000 f8f5 	bl	8006860 <vPortEnableVFP>
 8006676:	4b10      	ldr	r3, [pc, #64]	; (80066b8 <xPortStartScheduler+0x138>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a0f      	ldr	r2, [pc, #60]	; (80066b8 <xPortStartScheduler+0x138>)
 800667c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	f7ff ff69 	bl	8006558 <prvPortStartFirstTask>
 8006686:	f7ff fd57 	bl	8006138 <vTaskSwitchContext>
 800668a:	f7ff ff21 	bl	80064d0 <prvTaskExitError>
 800668e:	2300      	movs	r3, #0
 8006690:	4618      	mov	r0, r3
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	e000ed00 	.word	0xe000ed00
 800669c:	410fc271 	.word	0x410fc271
 80066a0:	410fc270 	.word	0x410fc270
 80066a4:	e000e400 	.word	0xe000e400
 80066a8:	20000208 	.word	0x20000208
 80066ac:	2000020c 	.word	0x2000020c
 80066b0:	e000ed20 	.word	0xe000ed20
 80066b4:	20000004 	.word	0x20000004
 80066b8:	e000ef34 	.word	0xe000ef34

080066bc <vPortEnterCritical>:
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	607b      	str	r3, [r7, #4]
 80066d4:	4b0e      	ldr	r3, [pc, #56]	; (8006710 <vPortEnterCritical+0x54>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3301      	adds	r3, #1
 80066da:	4a0d      	ldr	r2, [pc, #52]	; (8006710 <vPortEnterCritical+0x54>)
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	4b0c      	ldr	r3, [pc, #48]	; (8006710 <vPortEnterCritical+0x54>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d10e      	bne.n	8006704 <vPortEnterCritical+0x48>
 80066e6:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <vPortEnterCritical+0x58>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d009      	beq.n	8006704 <vPortEnterCritical+0x48>
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	603b      	str	r3, [r7, #0]
 8006702:	e7fe      	b.n	8006702 <vPortEnterCritical+0x46>
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	20000004 	.word	0x20000004
 8006714:	e000ed04 	.word	0xe000ed04

08006718 <vPortExitCritical>:
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	4b11      	ldr	r3, [pc, #68]	; (8006764 <vPortExitCritical+0x4c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d109      	bne.n	800673a <vPortExitCritical+0x22>
 8006726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	607b      	str	r3, [r7, #4]
 8006738:	e7fe      	b.n	8006738 <vPortExitCritical+0x20>
 800673a:	4b0a      	ldr	r3, [pc, #40]	; (8006764 <vPortExitCritical+0x4c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3b01      	subs	r3, #1
 8006740:	4a08      	ldr	r2, [pc, #32]	; (8006764 <vPortExitCritical+0x4c>)
 8006742:	6013      	str	r3, [r2, #0]
 8006744:	4b07      	ldr	r3, [pc, #28]	; (8006764 <vPortExitCritical+0x4c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d104      	bne.n	8006756 <vPortExitCritical+0x3e>
 800674c:	2300      	movs	r3, #0
 800674e:	603b      	str	r3, [r7, #0]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	bf00      	nop
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	20000004 	.word	0x20000004
	...

08006770 <PendSV_Handler>:
 8006770:	f3ef 8009 	mrs	r0, PSP
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	4b15      	ldr	r3, [pc, #84]	; (80067d0 <pxCurrentTCBConst>)
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	f01e 0f10 	tst.w	lr, #16
 8006780:	bf08      	it	eq
 8006782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678a:	6010      	str	r0, [r2, #0]
 800678c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006790:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006794:	f380 8811 	msr	BASEPRI, r0
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f7ff fcca 	bl	8006138 <vTaskSwitchContext>
 80067a4:	f04f 0000 	mov.w	r0, #0
 80067a8:	f380 8811 	msr	BASEPRI, r0
 80067ac:	bc09      	pop	{r0, r3}
 80067ae:	6819      	ldr	r1, [r3, #0]
 80067b0:	6808      	ldr	r0, [r1, #0]
 80067b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b6:	f01e 0f10 	tst.w	lr, #16
 80067ba:	bf08      	it	eq
 80067bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067c0:	f380 8809 	msr	PSP, r0
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	f3af 8000 	nop.w

080067d0 <pxCurrentTCBConst>:
 80067d0:	200000dc 	.word	0x200000dc
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop

080067d8 <SysTick_Handler>:
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	607b      	str	r3, [r7, #4]
 80067f0:	f7ff fbe6 	bl	8005fc0 <xTaskIncrementTick>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <SysTick_Handler+0x2a>
 80067fa:	4b06      	ldr	r3, [pc, #24]	; (8006814 <SysTick_Handler+0x3c>)
 80067fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	2300      	movs	r3, #0
 8006804:	603b      	str	r3, [r7, #0]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	bf00      	nop
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	e000ed04 	.word	0xe000ed04

08006818 <vPortSetupTimerInterrupt>:
 8006818:	b480      	push	{r7}
 800681a:	af00      	add	r7, sp, #0
 800681c:	4b0b      	ldr	r3, [pc, #44]	; (800684c <vPortSetupTimerInterrupt+0x34>)
 800681e:	2200      	movs	r2, #0
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <vPortSetupTimerInterrupt+0x38>)
 8006824:	2200      	movs	r2, #0
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	4b0a      	ldr	r3, [pc, #40]	; (8006854 <vPortSetupTimerInterrupt+0x3c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a0a      	ldr	r2, [pc, #40]	; (8006858 <vPortSetupTimerInterrupt+0x40>)
 800682e:	fba2 2303 	umull	r2, r3, r2, r3
 8006832:	099b      	lsrs	r3, r3, #6
 8006834:	4a09      	ldr	r2, [pc, #36]	; (800685c <vPortSetupTimerInterrupt+0x44>)
 8006836:	3b01      	subs	r3, #1
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	4b04      	ldr	r3, [pc, #16]	; (800684c <vPortSetupTimerInterrupt+0x34>)
 800683c:	2207      	movs	r2, #7
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	bf00      	nop
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	e000e010 	.word	0xe000e010
 8006850:	e000e018 	.word	0xe000e018
 8006854:	20000058 	.word	0x20000058
 8006858:	10624dd3 	.word	0x10624dd3
 800685c:	e000e014 	.word	0xe000e014

08006860 <vPortEnableVFP>:
 8006860:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006870 <vPortEnableVFP+0x10>
 8006864:	6801      	ldr	r1, [r0, #0]
 8006866:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800686a:	6001      	str	r1, [r0, #0]
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	e000ed88 	.word	0xe000ed88

08006874 <pvPortMalloc>:
 8006874:	b580      	push	{r7, lr}
 8006876:	b08a      	sub	sp, #40	; 0x28
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	2300      	movs	r3, #0
 800687e:	61fb      	str	r3, [r7, #28]
 8006880:	f7ff faf4 	bl	8005e6c <vTaskSuspendAll>
 8006884:	4b57      	ldr	r3, [pc, #348]	; (80069e4 <pvPortMalloc+0x170>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <pvPortMalloc+0x1c>
 800688c:	f000 f90c 	bl	8006aa8 <prvHeapInit>
 8006890:	4b55      	ldr	r3, [pc, #340]	; (80069e8 <pvPortMalloc+0x174>)
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4013      	ands	r3, r2
 8006898:	2b00      	cmp	r3, #0
 800689a:	f040 808c 	bne.w	80069b6 <pvPortMalloc+0x142>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d01c      	beq.n	80068de <pvPortMalloc+0x6a>
 80068a4:	2208      	movs	r2, #8
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4413      	add	r3, r2
 80068aa:	607b      	str	r3, [r7, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d013      	beq.n	80068de <pvPortMalloc+0x6a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f023 0307 	bic.w	r3, r3, #7
 80068bc:	3308      	adds	r3, #8
 80068be:	607b      	str	r3, [r7, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f003 0307 	and.w	r3, r3, #7
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d009      	beq.n	80068de <pvPortMalloc+0x6a>
 80068ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	617b      	str	r3, [r7, #20]
 80068dc:	e7fe      	b.n	80068dc <pvPortMalloc+0x68>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d068      	beq.n	80069b6 <pvPortMalloc+0x142>
 80068e4:	4b41      	ldr	r3, [pc, #260]	; (80069ec <pvPortMalloc+0x178>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d863      	bhi.n	80069b6 <pvPortMalloc+0x142>
 80068ee:	4b40      	ldr	r3, [pc, #256]	; (80069f0 <pvPortMalloc+0x17c>)
 80068f0:	623b      	str	r3, [r7, #32]
 80068f2:	4b3f      	ldr	r3, [pc, #252]	; (80069f0 <pvPortMalloc+0x17c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	627b      	str	r3, [r7, #36]	; 0x24
 80068f8:	e004      	b.n	8006904 <pvPortMalloc+0x90>
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	623b      	str	r3, [r7, #32]
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	429a      	cmp	r2, r3
 800690c:	d903      	bls.n	8006916 <pvPortMalloc+0xa2>
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1f1      	bne.n	80068fa <pvPortMalloc+0x86>
 8006916:	4b33      	ldr	r3, [pc, #204]	; (80069e4 <pvPortMalloc+0x170>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800691c:	429a      	cmp	r2, r3
 800691e:	d04a      	beq.n	80069b6 <pvPortMalloc+0x142>
 8006920:	6a3b      	ldr	r3, [r7, #32]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2208      	movs	r2, #8
 8006926:	4413      	add	r3, r2
 8006928:	61fb      	str	r3, [r7, #28]
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	1ad2      	subs	r2, r2, r3
 800693a:	2308      	movs	r3, #8
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	429a      	cmp	r2, r3
 8006940:	d91e      	bls.n	8006980 <pvPortMalloc+0x10c>
 8006942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4413      	add	r3, r2
 8006948:	61bb      	str	r3, [r7, #24]
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	f003 0307 	and.w	r3, r3, #7
 8006950:	2b00      	cmp	r3, #0
 8006952:	d009      	beq.n	8006968 <pvPortMalloc+0xf4>
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	613b      	str	r3, [r7, #16]
 8006966:	e7fe      	b.n	8006966 <pvPortMalloc+0xf2>
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	1ad2      	subs	r2, r2, r3
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	605a      	str	r2, [r3, #4]
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	605a      	str	r2, [r3, #4]
 800697a:	69b8      	ldr	r0, [r7, #24]
 800697c:	f000 f8f6 	bl	8006b6c <prvInsertBlockIntoFreeList>
 8006980:	4b1a      	ldr	r3, [pc, #104]	; (80069ec <pvPortMalloc+0x178>)
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	4a18      	ldr	r2, [pc, #96]	; (80069ec <pvPortMalloc+0x178>)
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	4b17      	ldr	r3, [pc, #92]	; (80069ec <pvPortMalloc+0x178>)
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	4b18      	ldr	r3, [pc, #96]	; (80069f4 <pvPortMalloc+0x180>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d203      	bcs.n	80069a2 <pvPortMalloc+0x12e>
 800699a:	4b14      	ldr	r3, [pc, #80]	; (80069ec <pvPortMalloc+0x178>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a15      	ldr	r2, [pc, #84]	; (80069f4 <pvPortMalloc+0x180>)
 80069a0:	6013      	str	r3, [r2, #0]
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	4b10      	ldr	r3, [pc, #64]	; (80069e8 <pvPortMalloc+0x174>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	431a      	orrs	r2, r3
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	605a      	str	r2, [r3, #4]
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	f7ff fa67 	bl	8005e88 <xTaskResumeAll>
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	f003 0307 	and.w	r3, r3, #7
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d009      	beq.n	80069d8 <pvPortMalloc+0x164>
 80069c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	60fb      	str	r3, [r7, #12]
 80069d6:	e7fe      	b.n	80069d6 <pvPortMalloc+0x162>
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	4618      	mov	r0, r3
 80069dc:	3728      	adds	r7, #40	; 0x28
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20003e18 	.word	0x20003e18
 80069e8:	20003e24 	.word	0x20003e24
 80069ec:	20003e1c 	.word	0x20003e1c
 80069f0:	20003e10 	.word	0x20003e10
 80069f4:	20003e20 	.word	0x20003e20

080069f8 <vPortFree>:
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d046      	beq.n	8006a98 <vPortFree+0xa0>
 8006a0a:	2308      	movs	r3, #8
 8006a0c:	425b      	negs	r3, r3
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	4413      	add	r3, r2
 8006a12:	617b      	str	r3, [r7, #20]
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	613b      	str	r3, [r7, #16]
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	4b20      	ldr	r3, [pc, #128]	; (8006aa0 <vPortFree+0xa8>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4013      	ands	r3, r2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d109      	bne.n	8006a3a <vPortFree+0x42>
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	e7fe      	b.n	8006a38 <vPortFree+0x40>
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d009      	beq.n	8006a56 <vPortFree+0x5e>
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	60bb      	str	r3, [r7, #8]
 8006a54:	e7fe      	b.n	8006a54 <vPortFree+0x5c>
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	4b11      	ldr	r3, [pc, #68]	; (8006aa0 <vPortFree+0xa8>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4013      	ands	r3, r2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d019      	beq.n	8006a98 <vPortFree+0xa0>
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d115      	bne.n	8006a98 <vPortFree+0xa0>
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <vPortFree+0xa8>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	43db      	mvns	r3, r3
 8006a76:	401a      	ands	r2, r3
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	605a      	str	r2, [r3, #4]
 8006a7c:	f7ff f9f6 	bl	8005e6c <vTaskSuspendAll>
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	4b07      	ldr	r3, [pc, #28]	; (8006aa4 <vPortFree+0xac>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4413      	add	r3, r2
 8006a8a:	4a06      	ldr	r2, [pc, #24]	; (8006aa4 <vPortFree+0xac>)
 8006a8c:	6013      	str	r3, [r2, #0]
 8006a8e:	6938      	ldr	r0, [r7, #16]
 8006a90:	f000 f86c 	bl	8006b6c <prvInsertBlockIntoFreeList>
 8006a94:	f7ff f9f8 	bl	8005e88 <xTaskResumeAll>
 8006a98:	bf00      	nop
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	20003e24 	.word	0x20003e24
 8006aa4:	20003e1c 	.word	0x20003e1c

08006aa8 <prvHeapInit>:
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006ab2:	60bb      	str	r3, [r7, #8]
 8006ab4:	4b27      	ldr	r3, [pc, #156]	; (8006b54 <prvHeapInit+0xac>)
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f003 0307 	and.w	r3, r3, #7
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00c      	beq.n	8006adc <prvHeapInit+0x34>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	3307      	adds	r3, #7
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0307 	bic.w	r3, r3, #7
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	4a1f      	ldr	r2, [pc, #124]	; (8006b54 <prvHeapInit+0xac>)
 8006ad8:	4413      	add	r3, r2
 8006ada:	60bb      	str	r3, [r7, #8]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	607b      	str	r3, [r7, #4]
 8006ae0:	4a1d      	ldr	r2, [pc, #116]	; (8006b58 <prvHeapInit+0xb0>)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	4b1c      	ldr	r3, [pc, #112]	; (8006b58 <prvHeapInit+0xb0>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	605a      	str	r2, [r3, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	4413      	add	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	2208      	movs	r2, #8
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	1a9b      	subs	r3, r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0307 	bic.w	r3, r3, #7
 8006b02:	60fb      	str	r3, [r7, #12]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4a15      	ldr	r2, [pc, #84]	; (8006b5c <prvHeapInit+0xb4>)
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	4b14      	ldr	r3, [pc, #80]	; (8006b5c <prvHeapInit+0xb4>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	605a      	str	r2, [r3, #4]
 8006b12:	4b12      	ldr	r3, [pc, #72]	; (8006b5c <prvHeapInit+0xb4>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2200      	movs	r2, #0
 8006b18:	601a      	str	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	603b      	str	r3, [r7, #0]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	1ad2      	subs	r2, r2, r3
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	605a      	str	r2, [r3, #4]
 8006b28:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <prvHeapInit+0xb4>)
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	4a0a      	ldr	r2, [pc, #40]	; (8006b60 <prvHeapInit+0xb8>)
 8006b36:	6013      	str	r3, [r2, #0]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	4a09      	ldr	r2, [pc, #36]	; (8006b64 <prvHeapInit+0xbc>)
 8006b3e:	6013      	str	r3, [r2, #0]
 8006b40:	4b09      	ldr	r3, [pc, #36]	; (8006b68 <prvHeapInit+0xc0>)
 8006b42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	bf00      	nop
 8006b4a:	3714      	adds	r7, #20
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	20000210 	.word	0x20000210
 8006b58:	20003e10 	.word	0x20003e10
 8006b5c:	20003e18 	.word	0x20003e18
 8006b60:	20003e20 	.word	0x20003e20
 8006b64:	20003e1c 	.word	0x20003e1c
 8006b68:	20003e24 	.word	0x20003e24

08006b6c <prvInsertBlockIntoFreeList>:
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	4b28      	ldr	r3, [pc, #160]	; (8006c18 <prvInsertBlockIntoFreeList+0xac>)
 8006b76:	60fb      	str	r3, [r7, #12]
 8006b78:	e002      	b.n	8006b80 <prvInsertBlockIntoFreeList+0x14>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d8f7      	bhi.n	8006b7a <prvInsertBlockIntoFreeList+0xe>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	60bb      	str	r3, [r7, #8]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	4413      	add	r3, r2
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d108      	bne.n	8006bae <prvInsertBlockIntoFreeList+0x42>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	441a      	add	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	605a      	str	r2, [r3, #4]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	607b      	str	r3, [r7, #4]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	60bb      	str	r3, [r7, #8]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	441a      	add	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d118      	bne.n	8006bf4 <prvInsertBlockIntoFreeList+0x88>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	4b15      	ldr	r3, [pc, #84]	; (8006c1c <prvInsertBlockIntoFreeList+0xb0>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d00d      	beq.n	8006bea <prvInsertBlockIntoFreeList+0x7e>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	441a      	add	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	605a      	str	r2, [r3, #4]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	e008      	b.n	8006bfc <prvInsertBlockIntoFreeList+0x90>
 8006bea:	4b0c      	ldr	r3, [pc, #48]	; (8006c1c <prvInsertBlockIntoFreeList+0xb0>)
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	e003      	b.n	8006bfc <prvInsertBlockIntoFreeList+0x90>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	601a      	str	r2, [r3, #0]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d002      	beq.n	8006c0a <prvInsertBlockIntoFreeList+0x9e>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	601a      	str	r2, [r3, #0]
 8006c0a:	bf00      	nop
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	20003e10 	.word	0x20003e10
 8006c1c:	20003e18 	.word	0x20003e18

08006c20 <user_TIM_PeriodElapsedCallback>:

#include "IRremote.h"


void user_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
	if(htim == &decodetim)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a57      	ldr	r2, [pc, #348]	; (8006d88 <user_TIM_PeriodElapsedCallback+0x168>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	f040 80a0 	bne.w	8006d72 <user_TIM_PeriodElapsedCallback+0x152>
	{
		uint8_t irdata = RECIV_PIN; // pin to receive
 8006c32:	2104      	movs	r1, #4
 8006c34:	4855      	ldr	r0, [pc, #340]	; (8006d8c <user_TIM_PeriodElapsedCallback+0x16c>)
 8006c36:	f7fa fd11 	bl	800165c <HAL_GPIO_ReadPin>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	73fb      	strb	r3, [r7, #15]

		irparams.timer++;  // One more 50uS tick
 8006c3e:	4b54      	ldr	r3, [pc, #336]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006c40:	885b      	ldrh	r3, [r3, #2]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	3301      	adds	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	4b51      	ldr	r3, [pc, #324]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006c4a:	805a      	strh	r2, [r3, #2]
		if(irparams.rawlen >= RAWBUF) irparams.rcvstate = STATE_OVERFLOW ;  // Buffer overflow
 8006c4c:	4b50      	ldr	r3, [pc, #320]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006c4e:	785b      	ldrb	r3, [r3, #1]

		switch(irparams.rcvstate)
 8006c50:	4b4f      	ldr	r3, [pc, #316]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	3b02      	subs	r3, #2
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	f200 808a 	bhi.w	8006d72 <user_TIM_PeriodElapsedCallback+0x152>
 8006c5e:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <user_TIM_PeriodElapsedCallback+0x44>)
 8006c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c64:	08006c79 	.word	0x08006c79
 8006c68:	08006ccd 	.word	0x08006ccd
 8006c6c:	08006d01 	.word	0x08006d01
 8006c70:	08006d47 	.word	0x08006d47
 8006c74:	08006d55 	.word	0x08006d55
		{
			case STATE_IDLE: // In the middle of a gap
				if(irdata == MARK)
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d172      	bne.n	8006d64 <user_TIM_PeriodElapsedCallback+0x144>
				{
					if(irparams.timer < GAP_TICKS)  // Not big enough to be a gap.
 8006c7e:	4b44      	ldr	r3, [pc, #272]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006c80:	885b      	ldrh	r3, [r3, #2]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	2b63      	cmp	r3, #99	; 0x63
 8006c86:	d803      	bhi.n	8006c90 <user_TIM_PeriodElapsedCallback+0x70>
					{
						irparams.timer = 0;
 8006c88:	4b41      	ldr	r3, [pc, #260]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	805a      	strh	r2, [r3, #2]
						irparams.timer = 0;
						irparams.rcvstate = STATE_MARK;
					}
				}

			break;
 8006c8e:	e069      	b.n	8006d64 <user_TIM_PeriodElapsedCallback+0x144>
						irparams.overflow = false;
 8006c90:	4b3f      	ldr	r3, [pc, #252]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						irparams.rawlen  = 0;
 8006c98:	4b3d      	ldr	r3, [pc, #244]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	705a      	strb	r2, [r3, #1]
						irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8006c9e:	4b3c      	ldr	r3, [pc, #240]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006ca0:	785b      	ldrb	r3, [r3, #1]
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	1c5a      	adds	r2, r3, #1
 8006ca6:	b2d1      	uxtb	r1, r2
 8006ca8:	4a39      	ldr	r2, [pc, #228]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006caa:	7051      	strb	r1, [r2, #1]
 8006cac:	4618      	mov	r0, r3
 8006cae:	4b38      	ldr	r3, [pc, #224]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006cb0:	885b      	ldrh	r3, [r3, #2]
 8006cb2:	b299      	uxth	r1, r3
 8006cb4:	4a36      	ldr	r2, [pc, #216]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006cb6:	0043      	lsls	r3, r0, #1
 8006cb8:	4413      	add	r3, r2
 8006cba:	460a      	mov	r2, r1
 8006cbc:	809a      	strh	r2, [r3, #4]
						irparams.timer = 0;
 8006cbe:	4b34      	ldr	r3, [pc, #208]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	805a      	strh	r2, [r3, #2]
						irparams.rcvstate = STATE_MARK;
 8006cc4:	4b32      	ldr	r3, [pc, #200]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006cc6:	2203      	movs	r2, #3
 8006cc8:	701a      	strb	r2, [r3, #0]
			break;
 8006cca:	e04b      	b.n	8006d64 <user_TIM_PeriodElapsedCallback+0x144>

			case STATE_MARK:  // Timing Mark
				if(irdata == SPACE) // Mark ended; Record time
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d14a      	bne.n	8006d68 <user_TIM_PeriodElapsedCallback+0x148>
				{
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8006cd2:	4b2f      	ldr	r3, [pc, #188]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006cd4:	785b      	ldrb	r3, [r3, #1]
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	1c5a      	adds	r2, r3, #1
 8006cda:	b2d1      	uxtb	r1, r2
 8006cdc:	4a2c      	ldr	r2, [pc, #176]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006cde:	7051      	strb	r1, [r2, #1]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	4b2b      	ldr	r3, [pc, #172]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006ce4:	885b      	ldrh	r3, [r3, #2]
 8006ce6:	b299      	uxth	r1, r3
 8006ce8:	4a29      	ldr	r2, [pc, #164]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006cea:	0043      	lsls	r3, r0, #1
 8006cec:	4413      	add	r3, r2
 8006cee:	460a      	mov	r2, r1
 8006cf0:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 8006cf2:	4b27      	ldr	r3, [pc, #156]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_SPACE;
 8006cf8:	4b25      	ldr	r3, [pc, #148]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006cfa:	2204      	movs	r2, #4
 8006cfc:	701a      	strb	r2, [r3, #0]
				}

			break;
 8006cfe:	e033      	b.n	8006d68 <user_TIM_PeriodElapsedCallback+0x148>

			case STATE_SPACE:  // Timing Space
				if(irdata == MARK) // Space just ended; Record time
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d116      	bne.n	8006d34 <user_TIM_PeriodElapsedCallback+0x114>
				{
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8006d06:	4b22      	ldr	r3, [pc, #136]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006d08:	785b      	ldrb	r3, [r3, #1]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	b2d1      	uxtb	r1, r2
 8006d10:	4a1f      	ldr	r2, [pc, #124]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006d12:	7051      	strb	r1, [r2, #1]
 8006d14:	4618      	mov	r0, r3
 8006d16:	4b1e      	ldr	r3, [pc, #120]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006d18:	885b      	ldrh	r3, [r3, #2]
 8006d1a:	b299      	uxth	r1, r3
 8006d1c:	4a1c      	ldr	r2, [pc, #112]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006d1e:	0043      	lsls	r3, r0, #1
 8006d20:	4413      	add	r3, r2
 8006d22:	460a      	mov	r2, r1
 8006d24:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 8006d26:	4b1a      	ldr	r3, [pc, #104]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_MARK;
 8006d2c:	4b18      	ldr	r3, [pc, #96]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006d2e:	2203      	movs	r2, #3
 8006d30:	701a      	strb	r2, [r3, #0]
				else if(irparams.timer > GAP_TICKS) // Space
				{
					irparams.rcvstate = STATE_STOP;
				}

			break;
 8006d32:	e01b      	b.n	8006d6c <user_TIM_PeriodElapsedCallback+0x14c>
				else if(irparams.timer > GAP_TICKS) // Space
 8006d34:	4b16      	ldr	r3, [pc, #88]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006d36:	885b      	ldrh	r3, [r3, #2]
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	2b64      	cmp	r3, #100	; 0x64
 8006d3c:	d916      	bls.n	8006d6c <user_TIM_PeriodElapsedCallback+0x14c>
					irparams.rcvstate = STATE_STOP;
 8006d3e:	4b14      	ldr	r3, [pc, #80]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006d40:	2205      	movs	r2, #5
 8006d42:	701a      	strb	r2, [r3, #0]
			break;
 8006d44:	e012      	b.n	8006d6c <user_TIM_PeriodElapsedCallback+0x14c>

			case STATE_STOP:  // Waiting; Measuring Gap
			 	if(irdata == MARK) irparams.timer = 0 ;  // Reset gap timer
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d111      	bne.n	8006d70 <user_TIM_PeriodElapsedCallback+0x150>
 8006d4c:	4b10      	ldr	r3, [pc, #64]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	805a      	strh	r2, [r3, #2]
			break;
 8006d52:	e00d      	b.n	8006d70 <user_TIM_PeriodElapsedCallback+0x150>

			case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
				irparams.overflow = true;
 8006d54:	4b0e      	ldr	r3, [pc, #56]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				irparams.rcvstate = STATE_STOP;
 8006d5c:	4b0c      	ldr	r3, [pc, #48]	; (8006d90 <user_TIM_PeriodElapsedCallback+0x170>)
 8006d5e:	2205      	movs	r2, #5
 8006d60:	701a      	strb	r2, [r3, #0]
			break;
 8006d62:	e006      	b.n	8006d72 <user_TIM_PeriodElapsedCallback+0x152>
			break;
 8006d64:	bf00      	nop
 8006d66:	e004      	b.n	8006d72 <user_TIM_PeriodElapsedCallback+0x152>
			break;
 8006d68:	bf00      	nop
 8006d6a:	e002      	b.n	8006d72 <user_TIM_PeriodElapsedCallback+0x152>
			break;
 8006d6c:	bf00      	nop
 8006d6e:	e000      	b.n	8006d72 <user_TIM_PeriodElapsedCallback+0x152>
			break;
 8006d70:	bf00      	nop
		}
	}
	if (htim->Instance == TIM4) {
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a07      	ldr	r2, [pc, #28]	; (8006d94 <user_TIM_PeriodElapsedCallback+0x174>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d101      	bne.n	8006d80 <user_TIM_PeriodElapsedCallback+0x160>
	    HAL_IncTick();
 8006d7c:	f7fa f8a8 	bl	8000ed0 <HAL_IncTick>
	}
}
 8006d80:	bf00      	nop
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	20005090 	.word	0x20005090
 8006d8c:	40020400 	.word	0x40020400
 8006d90:	200040fc 	.word	0x200040fc
 8006d94:	40000800 	.word	0x40000800

08006d98 <MATCH>:

////////////////////////////////////////////////////////////////////////////////////////////
int MATCH(int measured, int desired)
{
 8006d98:	b590      	push	{r4, r7, lr}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
 	return ((measured >= TICKS_LOW(desired)) && (measured <= TICKS_HIGH(desired)));
 8006da2:	6838      	ldr	r0, [r7, #0]
 8006da4:	f7f9 fbc6 	bl	8000534 <__aeabi_i2d>
 8006da8:	f04f 0200 	mov.w	r2, #0
 8006dac:	4b20      	ldr	r3, [pc, #128]	; (8006e30 <MATCH+0x98>)
 8006dae:	f7f9 fc2b 	bl	8000608 <__aeabi_dmul>
 8006db2:	4603      	mov	r3, r0
 8006db4:	460c      	mov	r4, r1
 8006db6:	4618      	mov	r0, r3
 8006db8:	4621      	mov	r1, r4
 8006dba:	f04f 0200 	mov.w	r2, #0
 8006dbe:	4b1d      	ldr	r3, [pc, #116]	; (8006e34 <MATCH+0x9c>)
 8006dc0:	f7f9 fd4c 	bl	800085c <__aeabi_ddiv>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	4618      	mov	r0, r3
 8006dca:	4621      	mov	r1, r4
 8006dcc:	f7f9 feb6 	bl	8000b3c <__aeabi_d2iz>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	db25      	blt.n	8006e24 <MATCH+0x8c>
 8006dd8:	6838      	ldr	r0, [r7, #0]
 8006dda:	f7f9 fbab 	bl	8000534 <__aeabi_i2d>
 8006dde:	f04f 0200 	mov.w	r2, #0
 8006de2:	4b15      	ldr	r3, [pc, #84]	; (8006e38 <MATCH+0xa0>)
 8006de4:	f7f9 fc10 	bl	8000608 <__aeabi_dmul>
 8006de8:	4603      	mov	r3, r0
 8006dea:	460c      	mov	r4, r1
 8006dec:	4618      	mov	r0, r3
 8006dee:	4621      	mov	r1, r4
 8006df0:	f04f 0200 	mov.w	r2, #0
 8006df4:	4b0f      	ldr	r3, [pc, #60]	; (8006e34 <MATCH+0x9c>)
 8006df6:	f7f9 fd31 	bl	800085c <__aeabi_ddiv>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	460c      	mov	r4, r1
 8006dfe:	4618      	mov	r0, r3
 8006e00:	4621      	mov	r1, r4
 8006e02:	f04f 0200 	mov.w	r2, #0
 8006e06:	4b0d      	ldr	r3, [pc, #52]	; (8006e3c <MATCH+0xa4>)
 8006e08:	f7f9 fa48 	bl	800029c <__adddf3>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	460c      	mov	r4, r1
 8006e10:	4618      	mov	r0, r3
 8006e12:	4621      	mov	r1, r4
 8006e14:	f7f9 fe92 	bl	8000b3c <__aeabi_d2iz>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	dc01      	bgt.n	8006e24 <MATCH+0x8c>
 8006e20:	2301      	movs	r3, #1
 8006e22:	e000      	b.n	8006e26 <MATCH+0x8e>
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd90      	pop	{r4, r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	3fe80000 	.word	0x3fe80000
 8006e34:	40490000 	.word	0x40490000
 8006e38:	3ff40000 	.word	0x3ff40000
 8006e3c:	3ff00000 	.word	0x3ff00000

08006e40 <MATCH_MARK>:

int MATCH_MARK(int measured_ticks, int desired_us)
{
 8006e40:	b590      	push	{r4, r7, lr}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
	return ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS)) && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS)));
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	3364      	adds	r3, #100	; 0x64
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7f9 fb70 	bl	8000534 <__aeabi_i2d>
 8006e54:	f04f 0200 	mov.w	r2, #0
 8006e58:	4b21      	ldr	r3, [pc, #132]	; (8006ee0 <MATCH_MARK+0xa0>)
 8006e5a:	f7f9 fbd5 	bl	8000608 <__aeabi_dmul>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	460c      	mov	r4, r1
 8006e62:	4618      	mov	r0, r3
 8006e64:	4621      	mov	r1, r4
 8006e66:	f04f 0200 	mov.w	r2, #0
 8006e6a:	4b1e      	ldr	r3, [pc, #120]	; (8006ee4 <MATCH_MARK+0xa4>)
 8006e6c:	f7f9 fcf6 	bl	800085c <__aeabi_ddiv>
 8006e70:	4603      	mov	r3, r0
 8006e72:	460c      	mov	r4, r1
 8006e74:	4618      	mov	r0, r3
 8006e76:	4621      	mov	r1, r4
 8006e78:	f7f9 fe60 	bl	8000b3c <__aeabi_d2iz>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4293      	cmp	r3, r2
 8006e82:	db27      	blt.n	8006ed4 <MATCH_MARK+0x94>
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	3364      	adds	r3, #100	; 0x64
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7f9 fb53 	bl	8000534 <__aeabi_i2d>
 8006e8e:	f04f 0200 	mov.w	r2, #0
 8006e92:	4b15      	ldr	r3, [pc, #84]	; (8006ee8 <MATCH_MARK+0xa8>)
 8006e94:	f7f9 fbb8 	bl	8000608 <__aeabi_dmul>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	f04f 0200 	mov.w	r2, #0
 8006ea4:	4b0f      	ldr	r3, [pc, #60]	; (8006ee4 <MATCH_MARK+0xa4>)
 8006ea6:	f7f9 fcd9 	bl	800085c <__aeabi_ddiv>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	460c      	mov	r4, r1
 8006eae:	4618      	mov	r0, r3
 8006eb0:	4621      	mov	r1, r4
 8006eb2:	f04f 0200 	mov.w	r2, #0
 8006eb6:	4b0d      	ldr	r3, [pc, #52]	; (8006eec <MATCH_MARK+0xac>)
 8006eb8:	f7f9 f9f0 	bl	800029c <__adddf3>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	460c      	mov	r4, r1
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	4621      	mov	r1, r4
 8006ec4:	f7f9 fe3a 	bl	8000b3c <__aeabi_d2iz>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	dc01      	bgt.n	8006ed4 <MATCH_MARK+0x94>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e000      	b.n	8006ed6 <MATCH_MARK+0x96>
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd90      	pop	{r4, r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	3fe80000 	.word	0x3fe80000
 8006ee4:	40490000 	.word	0x40490000
 8006ee8:	3ff40000 	.word	0x3ff40000
 8006eec:	3ff00000 	.word	0x3ff00000

08006ef0 <MATCH_SPACE>:

int MATCH_SPACE(int measured_ticks, int desired_us)
{
 8006ef0:	b590      	push	{r4, r7, lr}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
	return ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS)) && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS)));
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	3b64      	subs	r3, #100	; 0x64
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7f9 fb18 	bl	8000534 <__aeabi_i2d>
 8006f04:	f04f 0200 	mov.w	r2, #0
 8006f08:	4b21      	ldr	r3, [pc, #132]	; (8006f90 <MATCH_SPACE+0xa0>)
 8006f0a:	f7f9 fb7d 	bl	8000608 <__aeabi_dmul>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	460c      	mov	r4, r1
 8006f12:	4618      	mov	r0, r3
 8006f14:	4621      	mov	r1, r4
 8006f16:	f04f 0200 	mov.w	r2, #0
 8006f1a:	4b1e      	ldr	r3, [pc, #120]	; (8006f94 <MATCH_SPACE+0xa4>)
 8006f1c:	f7f9 fc9e 	bl	800085c <__aeabi_ddiv>
 8006f20:	4603      	mov	r3, r0
 8006f22:	460c      	mov	r4, r1
 8006f24:	4618      	mov	r0, r3
 8006f26:	4621      	mov	r1, r4
 8006f28:	f7f9 fe08 	bl	8000b3c <__aeabi_d2iz>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4293      	cmp	r3, r2
 8006f32:	db27      	blt.n	8006f84 <MATCH_SPACE+0x94>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	3b64      	subs	r3, #100	; 0x64
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7f9 fafb 	bl	8000534 <__aeabi_i2d>
 8006f3e:	f04f 0200 	mov.w	r2, #0
 8006f42:	4b15      	ldr	r3, [pc, #84]	; (8006f98 <MATCH_SPACE+0xa8>)
 8006f44:	f7f9 fb60 	bl	8000608 <__aeabi_dmul>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	4621      	mov	r1, r4
 8006f50:	f04f 0200 	mov.w	r2, #0
 8006f54:	4b0f      	ldr	r3, [pc, #60]	; (8006f94 <MATCH_SPACE+0xa4>)
 8006f56:	f7f9 fc81 	bl	800085c <__aeabi_ddiv>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	460c      	mov	r4, r1
 8006f5e:	4618      	mov	r0, r3
 8006f60:	4621      	mov	r1, r4
 8006f62:	f04f 0200 	mov.w	r2, #0
 8006f66:	4b0d      	ldr	r3, [pc, #52]	; (8006f9c <MATCH_SPACE+0xac>)
 8006f68:	f7f9 f998 	bl	800029c <__adddf3>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	460c      	mov	r4, r1
 8006f70:	4618      	mov	r0, r3
 8006f72:	4621      	mov	r1, r4
 8006f74:	f7f9 fde2 	bl	8000b3c <__aeabi_d2iz>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	dc01      	bgt.n	8006f84 <MATCH_SPACE+0x94>
 8006f80:	2301      	movs	r3, #1
 8006f82:	e000      	b.n	8006f86 <MATCH_SPACE+0x96>
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd90      	pop	{r4, r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	3fe80000 	.word	0x3fe80000
 8006f94:	40490000 	.word	0x40490000
 8006f98:	3ff40000 	.word	0x3ff40000
 8006f9c:	3ff00000 	.word	0x3ff00000

08006fa0 <my_decode>:

//////////////////////////////////////////irRecv.c//////////////////////////////////////////////////

int16_t my_decode(decode_results *results)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
	results->rawbuf = irparams.rawbuf;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a46      	ldr	r2, [pc, #280]	; (80070c4 <my_decode+0x124>)
 8006fac:	60da      	str	r2, [r3, #12]
	results->rawlen = irparams.rawlen;
 8006fae:	4b46      	ldr	r3, [pc, #280]	; (80070c8 <my_decode+0x128>)
 8006fb0:	785b      	ldrb	r3, [r3, #1]
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	b21a      	sxth	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	821a      	strh	r2, [r3, #16]
	results->overflow = irparams.overflow;
 8006fba:	4b43      	ldr	r3, [pc, #268]	; (80070c8 <my_decode+0x128>)
 8006fbc:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	b21a      	sxth	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	825a      	strh	r2, [r3, #18]

	if(irparams.rcvstate != STATE_STOP) return false;
 8006fc8:	4b3f      	ldr	r3, [pc, #252]	; (80070c8 <my_decode+0x128>)
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b05      	cmp	r3, #5
 8006fd0:	d001      	beq.n	8006fd6 <my_decode+0x36>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	e072      	b.n	80070bc <my_decode+0x11c>

	#if DECODE_NEC
		if(decodeNEC(results)) return true;
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fdbc 	bl	8007b54 <decodeNEC>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <my_decode+0x46>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e06a      	b.n	80070bc <my_decode+0x11c>
	#endif

	#if DECODE_SONY
		if(decodeSony(results)) return true;
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f001 fa46 	bl	8008478 <decodeSony>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <my_decode+0x56>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e062      	b.n	80070bc <my_decode+0x11c>
	#endif

	#if DECODE_SANYO
		if(decodeSanyo(results)) return true;
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f001 f98a 	bl	8008310 <decodeSanyo>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <my_decode+0x66>
 8007002:	2301      	movs	r3, #1
 8007004:	e05a      	b.n	80070bc <my_decode+0x11c>
	#endif

	#if DECODE_MITSUBISHI
		if(decodeMitsubishi(results)) return true;
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 fd16 	bl	8007a38 <decodeMitsubishi>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <my_decode+0x76>
 8007012:	2301      	movs	r3, #1
 8007014:	e052      	b.n	80070bc <my_decode+0x11c>
	#endif

	#if DECODE_RC5
		if(decodeRC5(results)) return true;
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 ff74 	bl	8007f04 <decodeRC5>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <my_decode+0x86>
 8007022:	2301      	movs	r3, #1
 8007024:	e04a      	b.n	80070bc <my_decode+0x11c>
	#endif

	#if DECODE_RC6
		if(decodeRC6(results)) return true;
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fff2 	bl	8008010 <decodeRC6>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <my_decode+0x96>
 8007032:	2301      	movs	r3, #1
 8007034:	e042      	b.n	80070bc <my_decode+0x11c>
	#endif

	#if DECODE_PANASONIC
		if(decodePanasonic(results)) return true;
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fe4e 	bl	8007cd8 <decodePanasonic>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <my_decode+0xa6>
 8007042:	2301      	movs	r3, #1
 8007044:	e03a      	b.n	80070bc <my_decode+0x11c>
	#endif

	#if DECODE_LG
		if(decodeLG(results)) return true;
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fc56 	bl	80078f8 <decodeLG>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <my_decode+0xb6>
 8007052:	2301      	movs	r3, #1
 8007054:	e032      	b.n	80070bc <my_decode+0x11c>
	#endif

	#if DECODE_JVC
		if(decodeJVC(results)) return true;
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fb7a 	bl	8007750 <decodeJVC>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <my_decode+0xc6>
 8007062:	2301      	movs	r3, #1
 8007064:	e02a      	b.n	80070bc <my_decode+0x11c>
	#endif

	#if DECODE_SAMSUNG
		if(decodeSAMSUNG(results)) return true;
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f001 f892 	bl	8008190 <decodeSAMSUNG>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <my_decode+0xd6>
 8007072:	2301      	movs	r3, #1
 8007074:	e022      	b.n	80070bc <my_decode+0x11c>
	#endif

	#if DECODE_WHYNTER
		if(decodeWhynter(results)) return true;
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 faa0 	bl	80085bc <decodeWhynter>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <my_decode+0xe6>
 8007082:	2301      	movs	r3, #1
 8007084:	e01a      	b.n	80070bc <my_decode+0x11c>
	#endif

	#if DECODE_AIWA_RC_T501
		if(decodeAiwaRCT501(results)) return true;
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fa36 	bl	80074f8 <decodeAiwaRCT501>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d001      	beq.n	8007096 <my_decode+0xf6>
 8007092:	2301      	movs	r3, #1
 8007094:	e012      	b.n	80070bc <my_decode+0x11c>
	#endif

	#if DECODE_DENON
		if(decodeDenon(results)) return true;
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 facc 	bl	8007634 <decodeDenon>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <my_decode+0x106>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e00a      	b.n	80070bc <my_decode+0x11c>
	#endif

	if(decodeHash(results)) return true;
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f8ae 	bl	8007208 <decodeHash>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <my_decode+0x116>
 80070b2:	2301      	movs	r3, #1
 80070b4:	e002      	b.n	80070bc <my_decode+0x11c>
	my_resume();
 80070b6:	f000 f855 	bl	8007164 <my_resume>
	return false;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	20004100 	.word	0x20004100
 80070c8:	200040fc 	.word	0x200040fc

080070cc <my_enableIRIn>:

void my_enableIRIn() // initialization
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
	DWT_Init(); // microsecond counter start
 80070d2:	f000 f9f9 	bl	80074c8 <DWT_Init>

	HAL_TIM_Base_DeInit(&decodetim);
 80070d6:	4821      	ldr	r0, [pc, #132]	; (800715c <my_enableIRIn+0x90>)
 80070d8:	f7fc fcd1 	bl	8003a7e <HAL_TIM_Base_DeInit>

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80070dc:	f107 0308 	add.w	r3, r7, #8
 80070e0:	2200      	movs	r2, #0
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	605a      	str	r2, [r3, #4]
 80070e6:	609a      	str	r2, [r3, #8]
 80070e8:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80070ea:	463b      	mov	r3, r7
 80070ec:	2200      	movs	r2, #0
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	605a      	str	r2, [r3, #4]

	decodetim.Instance = instance_tim;
 80070f2:	4b1a      	ldr	r3, [pc, #104]	; (800715c <my_enableIRIn+0x90>)
 80070f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80070f8:	601a      	str	r2, [r3, #0]
	decodetim.Init.Prescaler = MYPRESCALER;
 80070fa:	4b18      	ldr	r3, [pc, #96]	; (800715c <my_enableIRIn+0x90>)
 80070fc:	2214      	movs	r2, #20
 80070fe:	605a      	str	r2, [r3, #4]
	decodetim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007100:	4b16      	ldr	r3, [pc, #88]	; (800715c <my_enableIRIn+0x90>)
 8007102:	2200      	movs	r2, #0
 8007104:	609a      	str	r2, [r3, #8]
	decodetim.Init.Period = MYPERIOD;
 8007106:	4b15      	ldr	r3, [pc, #84]	; (800715c <my_enableIRIn+0x90>)
 8007108:	2231      	movs	r2, #49	; 0x31
 800710a:	60da      	str	r2, [r3, #12]
	decodetim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800710c:	4b13      	ldr	r3, [pc, #76]	; (800715c <my_enableIRIn+0x90>)
 800710e:	2200      	movs	r2, #0
 8007110:	611a      	str	r2, [r3, #16]
	decodetim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007112:	4b12      	ldr	r3, [pc, #72]	; (800715c <my_enableIRIn+0x90>)
 8007114:	2200      	movs	r2, #0
 8007116:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&decodetim);
 8007118:	4810      	ldr	r0, [pc, #64]	; (800715c <my_enableIRIn+0x90>)
 800711a:	f7fc fc85 	bl	8003a28 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800711e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007122:	60bb      	str	r3, [r7, #8]
	HAL_TIM_ConfigClockSource(&decodetim, &sClockSourceConfig);
 8007124:	f107 0308 	add.w	r3, r7, #8
 8007128:	4619      	mov	r1, r3
 800712a:	480c      	ldr	r0, [pc, #48]	; (800715c <my_enableIRIn+0x90>)
 800712c:	f7fd f872 	bl	8004214 <HAL_TIM_ConfigClockSource>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007130:	2300      	movs	r3, #0
 8007132:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007134:	2300      	movs	r3, #0
 8007136:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_MasterConfigSynchronization(&decodetim, &sMasterConfig);
 8007138:	463b      	mov	r3, r7
 800713a:	4619      	mov	r1, r3
 800713c:	4807      	ldr	r0, [pc, #28]	; (800715c <my_enableIRIn+0x90>)
 800713e:	f7fd fd28 	bl	8004b92 <HAL_TIMEx_MasterConfigSynchronization>

	irparams.rcvstate = STATE_IDLE;
 8007142:	4b07      	ldr	r3, [pc, #28]	; (8007160 <my_enableIRIn+0x94>)
 8007144:	2202      	movs	r2, #2
 8007146:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 8007148:	4b05      	ldr	r3, [pc, #20]	; (8007160 <my_enableIRIn+0x94>)
 800714a:	2200      	movs	r2, #0
 800714c:	705a      	strb	r2, [r3, #1]

	HAL_TIM_Base_Start_IT(&decodetim);
 800714e:	4803      	ldr	r0, [pc, #12]	; (800715c <my_enableIRIn+0x90>)
 8007150:	f7fc fcc5 	bl	8003ade <HAL_TIM_Base_Start_IT>
}
 8007154:	bf00      	nop
 8007156:	3718      	adds	r7, #24
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	20005090 	.word	0x20005090
 8007160:	200040fc 	.word	0x200040fc

08007164 <my_resume>:
{
	return (irparams.rcvstate == STATE_IDLE || irparams.rcvstate == STATE_STOP) ? true : false;
}

void my_resume() // Restart the ISR state machine
{
 8007164:	b480      	push	{r7}
 8007166:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 8007168:	4b05      	ldr	r3, [pc, #20]	; (8007180 <my_resume+0x1c>)
 800716a:	2202      	movs	r2, #2
 800716c:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 800716e:	4b04      	ldr	r3, [pc, #16]	; (8007180 <my_resume+0x1c>)
 8007170:	2200      	movs	r2, #0
 8007172:	705a      	strb	r2, [r3, #1]
}
 8007174:	bf00      	nop
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	200040fc 	.word	0x200040fc
 8007184:	00000000 	.word	0x00000000

08007188 <compare>:

int compare(unsigned int oldval, unsigned int newval)
{
 8007188:	b5b0      	push	{r4, r5, r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
	if(newval < oldval * .8) return 0;
 8007192:	6838      	ldr	r0, [r7, #0]
 8007194:	f7f9 f9be 	bl	8000514 <__aeabi_ui2d>
 8007198:	4604      	mov	r4, r0
 800719a:	460d      	mov	r5, r1
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7f9 f9b9 	bl	8000514 <__aeabi_ui2d>
 80071a2:	a317      	add	r3, pc, #92	; (adr r3, 8007200 <compare+0x78>)
 80071a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a8:	f7f9 fa2e 	bl	8000608 <__aeabi_dmul>
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	4620      	mov	r0, r4
 80071b2:	4629      	mov	r1, r5
 80071b4:	f7f9 fc9a 	bl	8000aec <__aeabi_dcmplt>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <compare+0x3a>
 80071be:	2300      	movs	r3, #0
 80071c0:	e018      	b.n	80071f4 <compare+0x6c>
	else if(oldval < newval * .8) return 2;
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7f9 f9a6 	bl	8000514 <__aeabi_ui2d>
 80071c8:	4604      	mov	r4, r0
 80071ca:	460d      	mov	r5, r1
 80071cc:	6838      	ldr	r0, [r7, #0]
 80071ce:	f7f9 f9a1 	bl	8000514 <__aeabi_ui2d>
 80071d2:	a30b      	add	r3, pc, #44	; (adr r3, 8007200 <compare+0x78>)
 80071d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d8:	f7f9 fa16 	bl	8000608 <__aeabi_dmul>
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	4620      	mov	r0, r4
 80071e2:	4629      	mov	r1, r5
 80071e4:	f7f9 fc82 	bl	8000aec <__aeabi_dcmplt>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <compare+0x6a>
 80071ee:	2302      	movs	r3, #2
 80071f0:	e000      	b.n	80071f4 <compare+0x6c>
	else return 1;
 80071f2:	2301      	movs	r3, #1
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bdb0      	pop	{r4, r5, r7, pc}
 80071fc:	f3af 8000 	nop.w
 8007200:	9999999a 	.word	0x9999999a
 8007204:	3fe99999 	.word	0x3fe99999

08007208 <decodeHash>:

#define FNV_PRIME_32 16777619
#define FNV_BASIS_32 2166136261

int32_t decodeHash(decode_results *results)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
	int32_t hash = FNV_BASIS_32;
 8007210:	4b23      	ldr	r3, [pc, #140]	; (80072a0 <decodeHash+0x98>)
 8007212:	60fb      	str	r3, [r7, #12]

	// Require at least 6 samples to prevent triggering on noise
	if(results->rawlen < 6) return false;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800721a:	2b05      	cmp	r3, #5
 800721c:	dc01      	bgt.n	8007222 <decodeHash+0x1a>
 800721e:	2300      	movs	r3, #0
 8007220:	e039      	b.n	8007296 <decodeHash+0x8e>

	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 8007222:	2301      	movs	r3, #1
 8007224:	817b      	strh	r3, [r7, #10]
 8007226:	e024      	b.n	8007272 <decodeHash+0x6a>
	{
		int16_t value = compare(results->rawbuf[i], results->rawbuf[i+2]);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007230:	005b      	lsls	r3, r3, #1
 8007232:	4413      	add	r3, r2
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	b29b      	uxth	r3, r3
 8007238:	4618      	mov	r0, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	68da      	ldr	r2, [r3, #12]
 800723e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007242:	3302      	adds	r3, #2
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	4413      	add	r3, r2
 8007248:	881b      	ldrh	r3, [r3, #0]
 800724a:	b29b      	uxth	r3, r3
 800724c:	4619      	mov	r1, r3
 800724e:	f7ff ff9b 	bl	8007188 <compare>
 8007252:	4603      	mov	r3, r0
 8007254:	813b      	strh	r3, [r7, #8]
		hash = (hash * FNV_PRIME_32) ^ value; // Add value into the hash
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	4a12      	ldr	r2, [pc, #72]	; (80072a4 <decodeHash+0x9c>)
 800725a:	fb02 f203 	mul.w	r2, r2, r3
 800725e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007262:	4053      	eors	r3, r2
 8007264:	60fb      	str	r3, [r7, #12]
	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 8007266:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800726a:	b29b      	uxth	r3, r3
 800726c:	3301      	adds	r3, #1
 800726e:	b29b      	uxth	r3, r3
 8007270:	817b      	strh	r3, [r7, #10]
 8007272:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007276:	3302      	adds	r3, #2
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800727e:	4293      	cmp	r3, r2
 8007280:	dbd2      	blt.n	8007228 <decodeHash+0x20>
	}

	results->value = hash;
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	605a      	str	r2, [r3, #4]
	results->bits = 32;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2220      	movs	r2, #32
 800728c:	811a      	strh	r2, [r3, #8]
	results->decode_type = UNKNOWN;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	701a      	strb	r2, [r3, #0]
	return true;
 8007294:	2301      	movs	r3, #1
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	811c9dc5 	.word	0x811c9dc5
 80072a4:	01000193 	.word	0x01000193

080072a8 <fan_init>:
#define highSp		50
int current_fan1_speed = lowSp;		//Luu toc do hien tai cua dong co 1, ban dau: off
int current_fan2_speed = lowSp;		//Luu toc do hien tai cua dong co 2, ban dau: off
int softStartTime = 30;

void fan_init(){
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b092      	sub	sp, #72	; 0x48
 80072ac:	af00      	add	r7, sp, #0
  //Copy from CubeMX
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80072ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]
 80072b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80072b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072bc:	2200      	movs	r2, #0
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	605a      	str	r2, [r3, #4]
 80072c2:	609a      	str	r2, [r3, #8]
 80072c4:	60da      	str	r2, [r3, #12]
 80072c6:	611a      	str	r2, [r3, #16]
 80072c8:	615a      	str	r2, [r3, #20]
 80072ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80072cc:	1d3b      	adds	r3, r7, #4
 80072ce:	2220      	movs	r2, #32
 80072d0:	2100      	movs	r1, #0
 80072d2:	4618      	mov	r0, r3
 80072d4:	f003 fceb 	bl	800acae <memset>

  htim1.Instance = TIM1;
 80072d8:	4b39      	ldr	r3, [pc, #228]	; (80073c0 <fan_init+0x118>)
 80072da:	4a3a      	ldr	r2, [pc, #232]	; (80073c4 <fan_init+0x11c>)
 80072dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 80072de:	4b38      	ldr	r3, [pc, #224]	; (80073c0 <fan_init+0x118>)
 80072e0:	2254      	movs	r2, #84	; 0x54
 80072e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80072e4:	4b36      	ldr	r3, [pc, #216]	; (80073c0 <fan_init+0x118>)
 80072e6:	2200      	movs	r2, #0
 80072e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80072ea:	4b35      	ldr	r3, [pc, #212]	; (80073c0 <fan_init+0x118>)
 80072ec:	2264      	movs	r2, #100	; 0x64
 80072ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80072f0:	4b33      	ldr	r3, [pc, #204]	; (80073c0 <fan_init+0x118>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80072f6:	4b32      	ldr	r3, [pc, #200]	; (80073c0 <fan_init+0x118>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80072fc:	4b30      	ldr	r3, [pc, #192]	; (80073c0 <fan_init+0x118>)
 80072fe:	2200      	movs	r2, #0
 8007300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007302:	482f      	ldr	r0, [pc, #188]	; (80073c0 <fan_init+0x118>)
 8007304:	f7fc fc0f 	bl	8003b26 <HAL_TIM_PWM_Init>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <fan_init+0x6a>
  {
    Error_Handler();
 800730e:	f002 f8d1 	bl	80094b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007312:	2300      	movs	r3, #0
 8007314:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007316:	2300      	movs	r3, #0
 8007318:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800731a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800731e:	4619      	mov	r1, r3
 8007320:	4827      	ldr	r0, [pc, #156]	; (80073c0 <fan_init+0x118>)
 8007322:	f7fd fc36 	bl	8004b92 <HAL_TIMEx_MasterConfigSynchronization>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d001      	beq.n	8007330 <fan_init+0x88>
  {
    Error_Handler();
 800732c:	f002 f8c2 	bl	80094b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007330:	2360      	movs	r3, #96	; 0x60
 8007332:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8007334:	2300      	movs	r3, #0
 8007336:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007338:	2300      	movs	r3, #0
 800733a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800733c:	2300      	movs	r3, #0
 800733e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007340:	2300      	movs	r3, #0
 8007342:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007344:	2300      	movs	r3, #0
 8007346:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007348:	2300      	movs	r3, #0
 800734a:	63fb      	str	r3, [r7, #60]	; 0x3c
  //if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  //{
  //  Error_Handler();
 // }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800734c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007350:	220c      	movs	r2, #12
 8007352:	4619      	mov	r1, r3
 8007354:	481a      	ldr	r0, [pc, #104]	; (80073c0 <fan_init+0x118>)
 8007356:	f7fc fe97 	bl	8004088 <HAL_TIM_PWM_ConfigChannel>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <fan_init+0xbc>
  {
    Error_Handler();
 8007360:	f002 f8a8 	bl	80094b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007364:	2300      	movs	r3, #0
 8007366:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007368:	2300      	movs	r3, #0
 800736a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800736c:	2300      	movs	r3, #0
 800736e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007370:	2300      	movs	r3, #0
 8007372:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007374:	2300      	movs	r3, #0
 8007376:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800737c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800737e:	2300      	movs	r3, #0
 8007380:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007382:	1d3b      	adds	r3, r7, #4
 8007384:	4619      	mov	r1, r3
 8007386:	480e      	ldr	r0, [pc, #56]	; (80073c0 <fan_init+0x118>)
 8007388:	f7fd fc48 	bl	8004c1c <HAL_TIMEx_ConfigBreakDeadTime>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <fan_init+0xee>
  {
    Error_Handler();
 8007392:	f002 f88f 	bl	80094b4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8007396:	480a      	ldr	r0, [pc, #40]	; (80073c0 <fan_init+0x118>)
 8007398:	f002 faa2 	bl	80098e0 <HAL_TIM_MspPostInit>
  //End copy from CubeMX
  
  /* PWM1 and PWM2 set */
 // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800739c:	210c      	movs	r1, #12
 800739e:	4808      	ldr	r0, [pc, #32]	; (80073c0 <fan_init+0x118>)
 80073a0:	f7fc fbf6 	bl	8003b90 <HAL_TIM_PWM_Start>

  fan_1_stop();
 80073a4:	f000 f858 	bl	8007458 <fan_1_stop>
  fan_2_stop();
 80073a8:	f000 f862 	bl	8007470 <fan_2_stop>
  current_fan1_speed = 0;
 80073ac:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <fan_init+0x120>)
 80073ae:	2200      	movs	r2, #0
 80073b0:	601a      	str	r2, [r3, #0]
  current_fan2_speed = 0;
 80073b2:	4b06      	ldr	r3, [pc, #24]	; (80073cc <fan_init+0x124>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	601a      	str	r2, [r3, #0]
}
 80073b8:	bf00      	nop
 80073ba:	3748      	adds	r7, #72	; 0x48
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	20004fcc 	.word	0x20004fcc
 80073c4:	40010000 	.word	0x40010000
 80073c8:	20000008 	.word	0x20000008
 80073cc:	2000000c 	.word	0x2000000c

080073d0 <xiaomi_fan_run>:

void xiaomi_fan_run(level)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
	if(level==3)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b03      	cmp	r3, #3
 80073dc:	d109      	bne.n	80073f2 <xiaomi_fan_run+0x22>
	{
		TIM1->ARR = 1999;
 80073de:	4b13      	ldr	r3, [pc, #76]	; (800742c <xiaomi_fan_run+0x5c>)
 80073e0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80073e4:	62da      	str	r2, [r3, #44]	; 0x2c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1000);
 80073e6:	4b12      	ldr	r3, [pc, #72]	; (8007430 <xiaomi_fan_run+0x60>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073ee:	641a      	str	r2, [r3, #64]	; 0x40
	else
	{
		TIM1->ARR = 3999;
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 2000);
	}
}
 80073f0:	e015      	b.n	800741e <xiaomi_fan_run+0x4e>
	else if(level==2)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d109      	bne.n	800740c <xiaomi_fan_run+0x3c>
		TIM1->ARR = 2999;
 80073f8:	4b0c      	ldr	r3, [pc, #48]	; (800742c <xiaomi_fan_run+0x5c>)
 80073fa:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80073fe:	62da      	str	r2, [r3, #44]	; 0x2c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1500);
 8007400:	4b0b      	ldr	r3, [pc, #44]	; (8007430 <xiaomi_fan_run+0x60>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007408:	641a      	str	r2, [r3, #64]	; 0x40
}
 800740a:	e008      	b.n	800741e <xiaomi_fan_run+0x4e>
		TIM1->ARR = 3999;
 800740c:	4b07      	ldr	r3, [pc, #28]	; (800742c <xiaomi_fan_run+0x5c>)
 800740e:	f640 729f 	movw	r2, #3999	; 0xf9f
 8007412:	62da      	str	r2, [r3, #44]	; 0x2c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 2000);
 8007414:	4b06      	ldr	r3, [pc, #24]	; (8007430 <xiaomi_fan_run+0x60>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800741c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800741e:	bf00      	nop
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	40010000 	.word	0x40010000
 8007430:	20004fcc 	.word	0x20004fcc

08007434 <xiaomi_fan_stop>:

void xiaomi_fan_stop(){
 8007434:	b480      	push	{r7}
 8007436:	af00      	add	r7, sp, #0
//  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); dau ra bi floating point
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);	//Do thiet ke mach dang de keo len
	current_fan1_speed = 0;
 8007438:	4b05      	ldr	r3, [pc, #20]	; (8007450 <xiaomi_fan_stop+0x1c>)
 800743a:	2200      	movs	r2, #0
 800743c:	601a      	str	r2, [r3, #0]
	//TIM1->ARR = 0;
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800743e:	4b05      	ldr	r3, [pc, #20]	; (8007454 <xiaomi_fan_stop+0x20>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2200      	movs	r2, #0
 8007444:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007446:	bf00      	nop
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	20000008 	.word	0x20000008
 8007454:	20004fcc 	.word	0x20004fcc

08007458 <fan_1_stop>:


void fan_1_stop(){
 8007458:	b480      	push	{r7}
 800745a:	af00      	add	r7, sp, #0
//  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); dau ra bi floating point
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);	//Do thiet ke mach dang de keo len
	current_fan1_speed = lowSp;
 800745c:	4b03      	ldr	r3, [pc, #12]	; (800746c <fan_1_stop+0x14>)
 800745e:	2214      	movs	r2, #20
 8007460:	601a      	str	r2, [r3, #0]
}
 8007462:	bf00      	nop
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	20000008 	.word	0x20000008

08007470 <fan_2_stop>:
  }

  current_fan1_speed = level;
}

void fan_2_stop(){
 8007470:	b480      	push	{r7}
 8007472:	af00      	add	r7, sp, #0
//	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 8007474:	4b05      	ldr	r3, [pc, #20]	; (800748c <fan_2_stop+0x1c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2264      	movs	r2, #100	; 0x64
 800747a:	641a      	str	r2, [r3, #64]	; 0x40
	current_fan2_speed = lowSp;
 800747c:	4b04      	ldr	r3, [pc, #16]	; (8007490 <fan_2_stop+0x20>)
 800747e:	2214      	movs	r2, #20
 8007480:	601a      	str	r2, [r3, #0]
}
 8007482:	bf00      	nop
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	20004fcc 	.word	0x20004fcc
 8007490:	2000000c 	.word	0x2000000c

08007494 <vApplicationGetIdleTaskMemory>:
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	4a07      	ldr	r2, [pc, #28]	; (80074c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	4a06      	ldr	r2, [pc, #24]	; (80074c4 <vApplicationGetIdleTaskMemory+0x30>)
 80074aa:	601a      	str	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2280      	movs	r2, #128	; 0x80
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	bf00      	nop
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	20003e28 	.word	0x20003e28
 80074c4:	20003e7c 	.word	0x20003e7c

080074c8 <DWT_Init>:
#define DWT_CONTROL *(volatile unsigned long *)0xE0001000
#define SCB_DEMCR *(volatile unsigned long *)0xE000EDFC


void DWT_Init()
{
 80074c8:	b480      	push	{r7}
 80074ca:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // allow to use the counter
 80074cc:	4b08      	ldr	r3, [pc, #32]	; (80074f0 <DWT_Init+0x28>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a07      	ldr	r2, [pc, #28]	; (80074f0 <DWT_Init+0x28>)
 80074d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074d6:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // start the counter
 80074d8:	4b06      	ldr	r3, [pc, #24]	; (80074f4 <DWT_Init+0x2c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a05      	ldr	r2, [pc, #20]	; (80074f4 <DWT_Init+0x2c>)
 80074de:	f043 0301 	orr.w	r3, r3, #1
 80074e2:	6013      	str	r3, [r2, #0]
}
 80074e4:	bf00      	nop
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	e000edfc 	.word	0xe000edfc
 80074f4:	e0001000 	.word	0xe0001000

080074f8 <decodeAiwaRCT501>:
#endif

//+=============================================================================
#if DECODE_AIWA_RC_T501
uint8_t decodeAiwaRCT501(decode_results *results)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
	int  data   = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	60fb      	str	r3, [r7, #12]
	int  offset = 1;
 8007504:	2301      	movs	r3, #1
 8007506:	60bb      	str	r3, [r7, #8]

	// Check SIZE
	if (irparams.rawlen < 2 * (AIWA_RC_T501_SUM_BITS) + 4)  return false ;
 8007508:	4b49      	ldr	r3, [pc, #292]	; (8007630 <decodeAiwaRCT501+0x138>)
 800750a:	785b      	ldrb	r3, [r3, #1]
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b57      	cmp	r3, #87	; 0x57
 8007510:	d801      	bhi.n	8007516 <decodeAiwaRCT501+0x1e>
 8007512:	2300      	movs	r3, #0
 8007514:	e087      	b.n	8007626 <decodeAiwaRCT501+0x12e>

	// Check HDR Mark/Space
	if (!MATCH_MARK (results->rawbuf[offset++], AIWA_RC_T501_HDR_MARK ))  return false ;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	68da      	ldr	r2, [r3, #12]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	1c59      	adds	r1, r3, #1
 800751e:	60b9      	str	r1, [r7, #8]
 8007520:	005b      	lsls	r3, r3, #1
 8007522:	4413      	add	r3, r2
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	b29b      	uxth	r3, r3
 8007528:	f242 2160 	movw	r1, #8800	; 0x2260
 800752c:	4618      	mov	r0, r3
 800752e:	f7ff fc87 	bl	8006e40 <MATCH_MARK>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d101      	bne.n	800753c <decodeAiwaRCT501+0x44>
 8007538:	2300      	movs	r3, #0
 800753a:	e074      	b.n	8007626 <decodeAiwaRCT501+0x12e>
	if (!MATCH_SPACE(results->rawbuf[offset++], AIWA_RC_T501_HDR_SPACE))  return false ;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68da      	ldr	r2, [r3, #12]
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	1c59      	adds	r1, r3, #1
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	005b      	lsls	r3, r3, #1
 8007548:	4413      	add	r3, r2
 800754a:	881b      	ldrh	r3, [r3, #0]
 800754c:	b29b      	uxth	r3, r3
 800754e:	f241 1194 	movw	r1, #4500	; 0x1194
 8007552:	4618      	mov	r0, r3
 8007554:	f7ff fccc 	bl	8006ef0 <MATCH_SPACE>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <decodeAiwaRCT501+0x6a>
 800755e:	2300      	movs	r3, #0
 8007560:	e061      	b.n	8007626 <decodeAiwaRCT501+0x12e>

	offset += 26;  // skip pre-data - optional
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	331a      	adds	r3, #26
 8007566:	60bb      	str	r3, [r7, #8]
	while(offset < irparams.rawlen - 4) {
 8007568:	e03e      	b.n	80075e8 <decodeAiwaRCT501+0xf0>
		if (MATCH_MARK(results->rawbuf[offset], AIWA_RC_T501_BIT_MARK))  offset++ ;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68da      	ldr	r2, [r3, #12]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	005b      	lsls	r3, r3, #1
 8007572:	4413      	add	r3, r2
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	b29b      	uxth	r3, r3
 8007578:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff fc5f 	bl	8006e40 <MATCH_MARK>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d012      	beq.n	80075ae <decodeAiwaRCT501+0xb6>
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	3301      	adds	r3, #1
 800758c:	60bb      	str	r3, [r7, #8]
		else                                                             return false ;

		// ONE & ZERO
		if      (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ONE_SPACE))   data = (data << 1) | 1 ;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68da      	ldr	r2, [r3, #12]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	005b      	lsls	r3, r3, #1
 8007596:	4413      	add	r3, r2
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	b29b      	uxth	r3, r3
 800759c:	f44f 7116 	mov.w	r1, #600	; 0x258
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7ff fca5 	bl	8006ef0 <MATCH_SPACE>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d008      	beq.n	80075be <decodeAiwaRCT501+0xc6>
 80075ac:	e001      	b.n	80075b2 <decodeAiwaRCT501+0xba>
		else                                                             return false ;
 80075ae:	2300      	movs	r3, #0
 80075b0:	e039      	b.n	8007626 <decodeAiwaRCT501+0x12e>
		if      (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ONE_SPACE))   data = (data << 1) | 1 ;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	f043 0301 	orr.w	r3, r3, #1
 80075ba:	60fb      	str	r3, [r7, #12]
 80075bc:	e011      	b.n	80075e2 <decodeAiwaRCT501+0xea>
		else if (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ZERO_SPACE))  data = (data << 1) | 0 ;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68da      	ldr	r2, [r3, #12]
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	4413      	add	r3, r2
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	f240 61a4 	movw	r1, #1700	; 0x6a4
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff fc8d 	bl	8006ef0 <MATCH_SPACE>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00d      	beq.n	80075f8 <decodeAiwaRCT501+0x100>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	005b      	lsls	r3, r3, #1
 80075e0:	60fb      	str	r3, [r7, #12]
		else                                                                     break ;  // End of one & zero detected
		offset++;
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	3301      	adds	r3, #1
 80075e6:	60bb      	str	r3, [r7, #8]
	while(offset < irparams.rawlen - 4) {
 80075e8:	4b11      	ldr	r3, [pc, #68]	; (8007630 <decodeAiwaRCT501+0x138>)
 80075ea:	785b      	ldrb	r3, [r3, #1]
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	3b04      	subs	r3, #4
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	dbb9      	blt.n	800756a <decodeAiwaRCT501+0x72>
 80075f6:	e000      	b.n	80075fa <decodeAiwaRCT501+0x102>
		else                                                                     break ;  // End of one & zero detected
 80075f8:	bf00      	nop
	}

	results->bits = (offset - 1) / 2;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	3b01      	subs	r3, #1
 80075fe:	0fda      	lsrs	r2, r3, #31
 8007600:	4413      	add	r3, r2
 8007602:	105b      	asrs	r3, r3, #1
 8007604:	b21a      	sxth	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	811a      	strh	r2, [r3, #8]
	if (results->bits < 42)  return false ;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007610:	2b29      	cmp	r3, #41	; 0x29
 8007612:	dc01      	bgt.n	8007618 <decodeAiwaRCT501+0x120>
 8007614:	2300      	movs	r3, #0
 8007616:	e006      	b.n	8007626 <decodeAiwaRCT501+0x12e>

	results->value       = data;
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	605a      	str	r2, [r3, #4]
	results->decode_type = AIWA_RC_T501;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2209      	movs	r2, #9
 8007622:	701a      	strb	r2, [r3, #0]
	return true;
 8007624:	2301      	movs	r3, #1
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	200040fc 	.word	0x200040fc

08007634 <decodeDenon>:

//+=============================================================================
//
#if DECODE_DENON
uint8_t decodeDenon (decode_results *results)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
	unsigned long data   = 0;  // Somewhere to build our code
 800763c:	2300      	movs	r3, #0
 800763e:	617b      	str	r3, [r7, #20]
	int offset = 1;  // Skip the Gap reading
 8007640:	2301      	movs	r3, #1
 8007642:	613b      	str	r3, [r7, #16]

	// Check we have the right amount of data
	if(irparams.rawlen != 1 + 2 + (2 * BITS) + 1) return false;
 8007644:	4b41      	ldr	r3, [pc, #260]	; (800774c <decodeDenon+0x118>)
 8007646:	785b      	ldrb	r3, [r3, #1]
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b20      	cmp	r3, #32
 800764c:	d001      	beq.n	8007652 <decodeDenon+0x1e>
 800764e:	2300      	movs	r3, #0
 8007650:	e078      	b.n	8007744 <decodeDenon+0x110>

	// Check initial Mark+Space match
	if(!MATCH_MARK (results->rawbuf[offset++], HDR_MARK )) return false;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	1c59      	adds	r1, r3, #1
 800765a:	6139      	str	r1, [r7, #16]
 800765c:	005b      	lsls	r3, r3, #1
 800765e:	4413      	add	r3, r2
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	b29b      	uxth	r3, r3
 8007664:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007668:	4618      	mov	r0, r3
 800766a:	f7ff fbe9 	bl	8006e40 <MATCH_MARK>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d101      	bne.n	8007678 <decodeDenon+0x44>
 8007674:	2300      	movs	r3, #0
 8007676:	e065      	b.n	8007744 <decodeDenon+0x110>
	if(!MATCH_SPACE(results->rawbuf[offset++], HDR_SPACE)) return false;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	1c59      	adds	r1, r3, #1
 8007680:	6139      	str	r1, [r7, #16]
 8007682:	005b      	lsls	r3, r3, #1
 8007684:	4413      	add	r3, r2
 8007686:	881b      	ldrh	r3, [r3, #0]
 8007688:	b29b      	uxth	r3, r3
 800768a:	f240 21ee 	movw	r1, #750	; 0x2ee
 800768e:	4618      	mov	r0, r3
 8007690:	f7ff fc2e 	bl	8006ef0 <MATCH_SPACE>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d101      	bne.n	800769e <decodeDenon+0x6a>
 800769a:	2300      	movs	r3, #0
 800769c:	e052      	b.n	8007744 <decodeDenon+0x110>

	// Read the bits in
	for(int i = 0; i < BITS; i++) 
 800769e:	2300      	movs	r3, #0
 80076a0:	60fb      	str	r3, [r7, #12]
 80076a2:	e042      	b.n	800772a <decodeDenon+0xf6>
	{
		// Each bit looks like: MARK + SPACE_1 -> 1
		//                 or : MARK + SPACE_0 -> 0
		if (!MATCH_MARK(results->rawbuf[offset++], BIT_MARK)) return false;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68da      	ldr	r2, [r3, #12]
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	1c59      	adds	r1, r3, #1
 80076ac:	6139      	str	r1, [r7, #16]
 80076ae:	005b      	lsls	r3, r3, #1
 80076b0:	4413      	add	r3, r2
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7ff fbc0 	bl	8006e40 <MATCH_MARK>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <decodeDenon+0x96>
 80076c6:	2300      	movs	r3, #0
 80076c8:	e03c      	b.n	8007744 <decodeDenon+0x110>

		// IR data is big-endian, so we shuffle it in from the right:
		if(MATCH_SPACE(results->rawbuf[offset], ONE_SPACE))   data = (data << 1) | 1;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68da      	ldr	r2, [r3, #12]
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	4413      	add	r3, r2
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80076dc:	4618      	mov	r0, r3
 80076de:	f7ff fc07 	bl	8006ef0 <MATCH_SPACE>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d005      	beq.n	80076f4 <decodeDenon+0xc0>
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	005b      	lsls	r3, r3, #1
 80076ec:	f043 0301 	orr.w	r3, r3, #1
 80076f0:	617b      	str	r3, [r7, #20]
 80076f2:	e014      	b.n	800771e <decodeDenon+0xea>
		else if (MATCH_SPACE(results->rawbuf[offset], ZERO_SPACE))  data = (data << 1) | 0;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	68da      	ldr	r2, [r3, #12]
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	4413      	add	r3, r2
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	b29b      	uxth	r3, r3
 8007702:	f240 21ee 	movw	r1, #750	; 0x2ee
 8007706:	4618      	mov	r0, r3
 8007708:	f7ff fbf2 	bl	8006ef0 <MATCH_SPACE>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <decodeDenon+0xe6>
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	005b      	lsls	r3, r3, #1
 8007716:	617b      	str	r3, [r7, #20]
 8007718:	e001      	b.n	800771e <decodeDenon+0xea>
		else return false;
 800771a:	2300      	movs	r3, #0
 800771c:	e012      	b.n	8007744 <decodeDenon+0x110>
		offset++;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	3301      	adds	r3, #1
 8007722:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < BITS; i++) 
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	3301      	adds	r3, #1
 8007728:	60fb      	str	r3, [r7, #12]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2b0d      	cmp	r3, #13
 800772e:	ddb9      	ble.n	80076a4 <decodeDenon+0x70>
	}

	// Success
	results->bits = BITS;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	220e      	movs	r2, #14
 8007734:	811a      	strh	r2, [r3, #8]
	results->value = data;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	605a      	str	r2, [r3, #4]
	results->decode_type = DENON;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	220f      	movs	r2, #15
 8007740:	701a      	strb	r2, [r3, #0]
	return true;
 8007742:	2301      	movs	r3, #1
}
 8007744:	4618      	mov	r0, r3
 8007746:	3718      	adds	r7, #24
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	200040fc 	.word	0x200040fc

08007750 <decodeJVC>:
#endif

//+=============================================================================
#if DECODE_JVC
uint8_t decodeJVC(decode_results *results)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
	long data   = 0;
 8007758:	2300      	movs	r3, #0
 800775a:	617b      	str	r3, [r7, #20]
	int offset = 1; // Skip first space
 800775c:	2301      	movs	r3, #1
 800775e:	613b      	str	r3, [r7, #16]

	// Check for repeat
	if((irparams.rawlen - 1 == 33) && MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK) && MATCH_MARK(results->rawbuf[irparams.rawlen-1], JVC_BIT_MARK)) 
 8007760:	4b64      	ldr	r3, [pc, #400]	; (80078f4 <decodeJVC+0x1a4>)
 8007762:	785b      	ldrb	r3, [r3, #1]
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b22      	cmp	r3, #34	; 0x22
 8007768:	d12e      	bne.n	80077c8 <decodeJVC+0x78>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68da      	ldr	r2, [r3, #12]
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	005b      	lsls	r3, r3, #1
 8007772:	4413      	add	r3, r2
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	f44f 7116 	mov.w	r1, #600	; 0x258
 800777c:	4618      	mov	r0, r3
 800777e:	f7ff fb5f 	bl	8006e40 <MATCH_MARK>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d01f      	beq.n	80077c8 <decodeJVC+0x78>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	68da      	ldr	r2, [r3, #12]
 800778c:	4b59      	ldr	r3, [pc, #356]	; (80078f4 <decodeJVC+0x1a4>)
 800778e:	785b      	ldrb	r3, [r3, #1]
 8007790:	b2db      	uxtb	r3, r3
 8007792:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007796:	3b01      	subs	r3, #1
 8007798:	005b      	lsls	r3, r3, #1
 800779a:	4413      	add	r3, r2
 800779c:	881b      	ldrh	r3, [r3, #0]
 800779e:	b29b      	uxth	r3, r3
 80077a0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7ff fb4b 	bl	8006e40 <MATCH_MARK>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00b      	beq.n	80077c8 <decodeJVC+0x78>
	{
		results->bits = 0;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	811a      	strh	r2, [r3, #8]
		results->value = REPEAT;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f04f 32ff 	mov.w	r2, #4294967295
 80077bc:	605a      	str	r2, [r3, #4]
		results->decode_type = JVC;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2206      	movs	r2, #6
 80077c2:	701a      	strb	r2, [r3, #0]
		return true;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e090      	b.n	80078ea <decodeJVC+0x19a>
	}

	// Initial mark
	if(!MATCH_MARK(results->rawbuf[offset++], JVC_HDR_MARK)) return false;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	68da      	ldr	r2, [r3, #12]
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	1c59      	adds	r1, r3, #1
 80077d0:	6139      	str	r1, [r7, #16]
 80077d2:	005b      	lsls	r3, r3, #1
 80077d4:	4413      	add	r3, r2
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	b29b      	uxth	r3, r3
 80077da:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80077de:	4618      	mov	r0, r3
 80077e0:	f7ff fb2e 	bl	8006e40 <MATCH_MARK>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <decodeJVC+0x9e>
 80077ea:	2300      	movs	r3, #0
 80077ec:	e07d      	b.n	80078ea <decodeJVC+0x19a>

	if(irparams.rawlen < (2 * JVC_BITS) + 1) return false;
 80077ee:	4b41      	ldr	r3, [pc, #260]	; (80078f4 <decodeJVC+0x1a4>)
 80077f0:	785b      	ldrb	r3, [r3, #1]
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2b20      	cmp	r3, #32
 80077f6:	d801      	bhi.n	80077fc <decodeJVC+0xac>
 80077f8:	2300      	movs	r3, #0
 80077fa:	e076      	b.n	80078ea <decodeJVC+0x19a>

	// Initial space
	if(!MATCH_SPACE(results->rawbuf[offset++], JVC_HDR_SPACE))  return false;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68da      	ldr	r2, [r3, #12]
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	1c59      	adds	r1, r3, #1
 8007804:	6139      	str	r1, [r7, #16]
 8007806:	005b      	lsls	r3, r3, #1
 8007808:	4413      	add	r3, r2
 800780a:	881b      	ldrh	r3, [r3, #0]
 800780c:	b29b      	uxth	r3, r3
 800780e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8007812:	4618      	mov	r0, r3
 8007814:	f7ff fb6c 	bl	8006ef0 <MATCH_SPACE>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <decodeJVC+0xd2>
 800781e:	2300      	movs	r3, #0
 8007820:	e063      	b.n	80078ea <decodeJVC+0x19a>

	for (int i = 0;  i < JVC_BITS;  i++) 
 8007822:	2300      	movs	r3, #0
 8007824:	60fb      	str	r3, [r7, #12]
 8007826:	e042      	b.n	80078ae <decodeJVC+0x15e>
	{
		if(!MATCH_MARK(results->rawbuf[offset++], JVC_BIT_MARK)) return false;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68da      	ldr	r2, [r3, #12]
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	1c59      	adds	r1, r3, #1
 8007830:	6139      	str	r1, [r7, #16]
 8007832:	005b      	lsls	r3, r3, #1
 8007834:	4413      	add	r3, r2
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	b29b      	uxth	r3, r3
 800783a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800783e:	4618      	mov	r0, r3
 8007840:	f7ff fafe 	bl	8006e40 <MATCH_MARK>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <decodeJVC+0xfe>
 800784a:	2300      	movs	r3, #0
 800784c:	e04d      	b.n	80078ea <decodeJVC+0x19a>

		if(MATCH_SPACE(results->rawbuf[offset], JVC_ONE_SPACE))   data = (data << 1) | 1;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68da      	ldr	r2, [r3, #12]
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	4413      	add	r3, r2
 8007858:	881b      	ldrh	r3, [r3, #0]
 800785a:	b29b      	uxth	r3, r3
 800785c:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8007860:	4618      	mov	r0, r3
 8007862:	f7ff fb45 	bl	8006ef0 <MATCH_SPACE>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d005      	beq.n	8007878 <decodeJVC+0x128>
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	005b      	lsls	r3, r3, #1
 8007870:	f043 0301 	orr.w	r3, r3, #1
 8007874:	617b      	str	r3, [r7, #20]
 8007876:	e014      	b.n	80078a2 <decodeJVC+0x152>
		else if (MATCH_SPACE(results->rawbuf[offset], JVC_ZERO_SPACE))  data = (data << 1) | 0;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68da      	ldr	r2, [r3, #12]
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	4413      	add	r3, r2
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	b29b      	uxth	r3, r3
 8007886:	f240 2126 	movw	r1, #550	; 0x226
 800788a:	4618      	mov	r0, r3
 800788c:	f7ff fb30 	bl	8006ef0 <MATCH_SPACE>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d003      	beq.n	800789e <decodeJVC+0x14e>
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	005b      	lsls	r3, r3, #1
 800789a:	617b      	str	r3, [r7, #20]
 800789c:	e001      	b.n	80078a2 <decodeJVC+0x152>
		else return false ;
 800789e:	2300      	movs	r3, #0
 80078a0:	e023      	b.n	80078ea <decodeJVC+0x19a>
		offset++;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	3301      	adds	r3, #1
 80078a6:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < JVC_BITS;  i++) 
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	3301      	adds	r3, #1
 80078ac:	60fb      	str	r3, [r7, #12]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2b0f      	cmp	r3, #15
 80078b2:	ddb9      	ble.n	8007828 <decodeJVC+0xd8>
	}

	// Stop bit
	if(!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)) return false;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	68da      	ldr	r2, [r3, #12]
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	4413      	add	r3, r2
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	f44f 7116 	mov.w	r1, #600	; 0x258
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7ff faba 	bl	8006e40 <MATCH_MARK>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d101      	bne.n	80078d6 <decodeJVC+0x186>
 80078d2:	2300      	movs	r3, #0
 80078d4:	e009      	b.n	80078ea <decodeJVC+0x19a>

	// Success
	results->bits        = JVC_BITS;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2210      	movs	r2, #16
 80078da:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	605a      	str	r2, [r3, #4]
	results->decode_type = JVC;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2206      	movs	r2, #6
 80078e6:	701a      	strb	r2, [r3, #0]

	return true;
 80078e8:	2301      	movs	r3, #1
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3718      	adds	r7, #24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	200040fc 	.word	0x200040fc

080078f8 <decodeLG>:
#define LG_RPT_LENGTH 60000

//+=============================================================================
#if DECODE_LG
uint8_t decodeLG(decode_results *results)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
    long  data   = 0;
 8007900:	2300      	movs	r3, #0
 8007902:	617b      	str	r3, [r7, #20]
    int   offset = 1; // Skip first space
 8007904:	2301      	movs	r3, #1
 8007906:	613b      	str	r3, [r7, #16]

	// Check we have the right amount of data
    if (irparams.rawlen < (2 * LG_BITS) + 1 )  return false ;
 8007908:	4b4a      	ldr	r3, [pc, #296]	; (8007a34 <decodeLG+0x13c>)
 800790a:	785b      	ldrb	r3, [r3, #1]
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b38      	cmp	r3, #56	; 0x38
 8007910:	d801      	bhi.n	8007916 <decodeLG+0x1e>
 8007912:	2300      	movs	r3, #0
 8007914:	e089      	b.n	8007a2a <decodeLG+0x132>

    // Initial mark/space
    if (!MATCH_MARK(results->rawbuf[offset++], LG_HDR_MARK))  return false ;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68da      	ldr	r2, [r3, #12]
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	1c59      	adds	r1, r3, #1
 800791e:	6139      	str	r1, [r7, #16]
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	4413      	add	r3, r2
 8007924:	881b      	ldrh	r3, [r3, #0]
 8007926:	b29b      	uxth	r3, r3
 8007928:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800792c:	4618      	mov	r0, r3
 800792e:	f7ff fa87 	bl	8006e40 <MATCH_MARK>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d101      	bne.n	800793c <decodeLG+0x44>
 8007938:	2300      	movs	r3, #0
 800793a:	e076      	b.n	8007a2a <decodeLG+0x132>
    if (!MATCH_SPACE(results->rawbuf[offset++], LG_HDR_SPACE))  return false ;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68da      	ldr	r2, [r3, #12]
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	1c59      	adds	r1, r3, #1
 8007944:	6139      	str	r1, [r7, #16]
 8007946:	005b      	lsls	r3, r3, #1
 8007948:	4413      	add	r3, r2
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	b29b      	uxth	r3, r3
 800794e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8007952:	4618      	mov	r0, r3
 8007954:	f7ff facc 	bl	8006ef0 <MATCH_SPACE>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d101      	bne.n	8007962 <decodeLG+0x6a>
 800795e:	2300      	movs	r3, #0
 8007960:	e063      	b.n	8007a2a <decodeLG+0x132>

    for (int i = 0;  i < LG_BITS;  i++) {
 8007962:	2300      	movs	r3, #0
 8007964:	60fb      	str	r3, [r7, #12]
 8007966:	e042      	b.n	80079ee <decodeLG+0xf6>
        if (!MATCH_MARK(results->rawbuf[offset++], LG_BIT_MARK))  return false ;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68da      	ldr	r2, [r3, #12]
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	1c59      	adds	r1, r3, #1
 8007970:	6139      	str	r1, [r7, #16]
 8007972:	005b      	lsls	r3, r3, #1
 8007974:	4413      	add	r3, r2
 8007976:	881b      	ldrh	r3, [r3, #0]
 8007978:	b29b      	uxth	r3, r3
 800797a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800797e:	4618      	mov	r0, r3
 8007980:	f7ff fa5e 	bl	8006e40 <MATCH_MARK>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <decodeLG+0x96>
 800798a:	2300      	movs	r3, #0
 800798c:	e04d      	b.n	8007a2a <decodeLG+0x132>

        if      (MATCH_SPACE(results->rawbuf[offset], LG_ONE_SPACE))   data = (data << 1) | 1 ;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68da      	ldr	r2, [r3, #12]
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	4413      	add	r3, r2
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	b29b      	uxth	r3, r3
 800799c:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7ff faa5 	bl	8006ef0 <MATCH_SPACE>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d005      	beq.n	80079b8 <decodeLG+0xc0>
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	005b      	lsls	r3, r3, #1
 80079b0:	f043 0301 	orr.w	r3, r3, #1
 80079b4:	617b      	str	r3, [r7, #20]
 80079b6:	e014      	b.n	80079e2 <decodeLG+0xea>
        else if (MATCH_SPACE(results->rawbuf[offset], LG_ZERO_SPACE))  data = (data << 1) | 0 ;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	68da      	ldr	r2, [r3, #12]
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	005b      	lsls	r3, r3, #1
 80079c0:	4413      	add	r3, r2
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	f240 2126 	movw	r1, #550	; 0x226
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7ff fa90 	bl	8006ef0 <MATCH_SPACE>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <decodeLG+0xe6>
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	617b      	str	r3, [r7, #20]
 80079dc:	e001      	b.n	80079e2 <decodeLG+0xea>
        else                                                           return false ;
 80079de:	2300      	movs	r3, #0
 80079e0:	e023      	b.n	8007a2a <decodeLG+0x132>
        offset++;
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	3301      	adds	r3, #1
 80079e6:	613b      	str	r3, [r7, #16]
    for (int i = 0;  i < LG_BITS;  i++) {
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	3301      	adds	r3, #1
 80079ec:	60fb      	str	r3, [r7, #12]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2b1b      	cmp	r3, #27
 80079f2:	ddb9      	ble.n	8007968 <decodeLG+0x70>
    }

    // Stop bit
    if (!MATCH_MARK(results->rawbuf[offset], LG_BIT_MARK))   return false ;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	68da      	ldr	r2, [r3, #12]
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	4413      	add	r3, r2
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff fa1a 	bl	8006e40 <MATCH_MARK>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <decodeLG+0x11e>
 8007a12:	2300      	movs	r3, #0
 8007a14:	e009      	b.n	8007a2a <decodeLG+0x132>

    // Success
    results->bits        = LG_BITS;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	221c      	movs	r2, #28
 8007a1a:	811a      	strh	r2, [r3, #8]
    results->value       = data;
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	605a      	str	r2, [r3, #4]
    results->decode_type = LG;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	220a      	movs	r2, #10
 8007a26:	701a      	strb	r2, [r3, #0]
    return true;
 8007a28:	2301      	movs	r3, #1
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3718      	adds	r7, #24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	200040fc 	.word	0x200040fc

08007a38 <decodeMitsubishi>:
// #define MITSUBISHI_RPT_LENGTH 45000

//+=============================================================================
#if DECODE_MITSUBISHI
uint8_t decodeMitsubishi (decode_results *results)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  // Serial.print("?!? decoding Mitsubishi:");Serial.print(irparams.rawlen); Serial.print(" want "); Serial.println( 2 * MITSUBISHI_BITS + 2);
  long data = 0;
 8007a40:	2300      	movs	r3, #0
 8007a42:	60fb      	str	r3, [r7, #12]
  if (irparams.rawlen < 2 * MITSUBISHI_BITS + 2)  return false ;
 8007a44:	4b42      	ldr	r3, [pc, #264]	; (8007b50 <decodeMitsubishi+0x118>)
 8007a46:	785b      	ldrb	r3, [r3, #1]
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b21      	cmp	r3, #33	; 0x21
 8007a4c:	d801      	bhi.n	8007a52 <decodeMitsubishi+0x1a>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	e07a      	b.n	8007b48 <decodeMitsubishi+0x110>
  int offset = 0; // Skip first space
 8007a52:	2300      	movs	r3, #0
 8007a54:	60bb      	str	r3, [r7, #8]
    results->decode_type = MITSUBISHI;
    return true;
  }
#endif

  offset++;
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	60bb      	str	r3, [r7, #8]

  // Typical
  // 14200 7 41 7 42 7 42 7 17 7 17 7 18 7 41 7 18 7 17 7 17 7 18 7 41 8 17 7 17 7 18 7 17 7

  // Initial Space
  if (!MATCH_MARK(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  return false ;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68da      	ldr	r2, [r3, #12]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	4413      	add	r3, r2
 8007a66:	881b      	ldrh	r3, [r3, #0]
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff f9e6 	bl	8006e40 <MATCH_MARK>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <decodeMitsubishi+0x46>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	e064      	b.n	8007b48 <decodeMitsubishi+0x110>
  offset++;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	3301      	adds	r3, #1
 8007a82:	60bb      	str	r3, [r7, #8]

  while (offset + 1 < irparams.rawlen) {
 8007a84:	e03e      	b.n	8007b04 <decodeMitsubishi+0xcc>
    if      (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ONE_MARK))   data = (data << 1) | 1 ;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68da      	ldr	r2, [r3, #12]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	005b      	lsls	r3, r3, #1
 8007a8e:	4413      	add	r3, r2
 8007a90:	881b      	ldrh	r3, [r3, #0]
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	f240 719e 	movw	r1, #1950	; 0x79e
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7ff f9d1 	bl	8006e40 <MATCH_MARK>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d005      	beq.n	8007ab0 <decodeMitsubishi+0x78>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	005b      	lsls	r3, r3, #1
 8007aa8:	f043 0301 	orr.w	r3, r3, #1
 8007aac:	60fb      	str	r3, [r7, #12]
 8007aae:	e014      	b.n	8007ada <decodeMitsubishi+0xa2>
    else if (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ZERO_MARK))  data <<= 1 ;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	005b      	lsls	r3, r3, #1
 8007ab8:	4413      	add	r3, r2
 8007aba:	881b      	ldrh	r3, [r3, #0]
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	f240 21ee 	movw	r1, #750	; 0x2ee
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7ff f9bc 	bl	8006e40 <MATCH_MARK>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <decodeMitsubishi+0x9e>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	e001      	b.n	8007ada <decodeMitsubishi+0xa2>
    else                                                                 return false ;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	e036      	b.n	8007b48 <decodeMitsubishi+0x110>
    offset++;
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	3301      	adds	r3, #1
 8007ade:	60bb      	str	r3, [r7, #8]

    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  break ;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68da      	ldr	r2, [r3, #12]
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	4413      	add	r3, r2
 8007aea:	881b      	ldrh	r3, [r3, #0]
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7ff f9fc 	bl	8006ef0 <MATCH_SPACE>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00a      	beq.n	8007b14 <decodeMitsubishi+0xdc>
    offset++;
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	3301      	adds	r3, #1
 8007b02:	60bb      	str	r3, [r7, #8]
  while (offset + 1 < irparams.rawlen) {
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	3301      	adds	r3, #1
 8007b08:	4a11      	ldr	r2, [pc, #68]	; (8007b50 <decodeMitsubishi+0x118>)
 8007b0a:	7852      	ldrb	r2, [r2, #1]
 8007b0c:	b2d2      	uxtb	r2, r2
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	dbb9      	blt.n	8007a86 <decodeMitsubishi+0x4e>
 8007b12:	e000      	b.n	8007b16 <decodeMitsubishi+0xde>
    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  break ;
 8007b14:	bf00      	nop
  }

  // Success
  results->bits = (offset - 1) / 2;
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	0fda      	lsrs	r2, r3, #31
 8007b1c:	4413      	add	r3, r2
 8007b1e:	105b      	asrs	r3, r3, #1
 8007b20:	b21a      	sxth	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	811a      	strh	r2, [r3, #8]
  if (results->bits < MITSUBISHI_BITS) {
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007b2c:	2b0f      	cmp	r3, #15
 8007b2e:	dc04      	bgt.n	8007b3a <decodeMitsubishi+0x102>
    results->bits = 0;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	811a      	strh	r2, [r3, #8]
    return false;
 8007b36:	2300      	movs	r3, #0
 8007b38:	e006      	b.n	8007b48 <decodeMitsubishi+0x110>
  }

  results->value       = data;
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	605a      	str	r2, [r3, #4]
  results->decode_type = MITSUBISHI;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	220c      	movs	r2, #12
 8007b44:	701a      	strb	r2, [r3, #0]
  return true;
 8007b46:	2301      	movs	r3, #1
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	200040fc 	.word	0x200040fc

08007b54 <decodeNEC>:
//+=============================================================================
// NECs have a repeat only 4 items long
//
#if DECODE_NEC
uint8_t decodeNEC (decode_results *results)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
	long  data   = 0;  // We decode in to here; Start with nothing
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	617b      	str	r3, [r7, #20]
	int   offset = 1;  // Index in to results; Skip first entry!?
 8007b60:	2301      	movs	r3, #1
 8007b62:	613b      	str	r3, [r7, #16]

	// Check header "mark"
	if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK))  return false ;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68da      	ldr	r2, [r3, #12]
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	005b      	lsls	r3, r3, #1
 8007b6c:	4413      	add	r3, r2
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	f242 3128 	movw	r1, #9000	; 0x2328
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7ff f962 	bl	8006e40 <MATCH_MARK>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <decodeNEC+0x32>
 8007b82:	2300      	movs	r3, #0
 8007b84:	e0a1      	b.n	8007cca <decodeNEC+0x176>
	offset++;
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	613b      	str	r3, [r7, #16]

	// Check for repeat
	if ( (irparams.rawlen == 4)
 8007b8c:	4b51      	ldr	r3, [pc, #324]	; (8007cd4 <decodeNEC+0x180>)
 8007b8e:	785b      	ldrb	r3, [r3, #1]
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	d12a      	bne.n	8007bec <decodeNEC+0x98>
	    && MATCH_SPACE(results->rawbuf[offset  ], NEC_RPT_SPACE)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	005b      	lsls	r3, r3, #1
 8007b9e:	4413      	add	r3, r2
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	f640 01ca 	movw	r1, #2250	; 0x8ca
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7ff f9a1 	bl	8006ef0 <MATCH_SPACE>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d01b      	beq.n	8007bec <decodeNEC+0x98>
	    && MATCH_MARK (results->rawbuf[offset+1], NEC_BIT_MARK )
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68da      	ldr	r2, [r3, #12]
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	005b      	lsls	r3, r3, #1
 8007bbe:	4413      	add	r3, r2
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	f44f 710c 	mov.w	r1, #560	; 0x230
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7ff f939 	bl	8006e40 <MATCH_MARK>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00b      	beq.n	8007bec <decodeNEC+0x98>
	   ) {
		results->bits        = 0;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	811a      	strh	r2, [r3, #8]
		results->value       = REPEAT;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8007be0:	605a      	str	r2, [r3, #4]
		results->decode_type = NEC;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2203      	movs	r2, #3
 8007be6:	701a      	strb	r2, [r3, #0]
		return true;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e06e      	b.n	8007cca <decodeNEC+0x176>
	}

	// Check we have enough data
	if (irparams.rawlen < (2 * NEC_BITS) + 4)  return false ;
 8007bec:	4b39      	ldr	r3, [pc, #228]	; (8007cd4 <decodeNEC+0x180>)
 8007bee:	785b      	ldrb	r3, [r3, #1]
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b43      	cmp	r3, #67	; 0x43
 8007bf4:	d801      	bhi.n	8007bfa <decodeNEC+0xa6>
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	e067      	b.n	8007cca <decodeNEC+0x176>

	// Check header "space"
	if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE))  return false ;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68da      	ldr	r2, [r3, #12]
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	005b      	lsls	r3, r3, #1
 8007c02:	4413      	add	r3, r2
 8007c04:	881b      	ldrh	r3, [r3, #0]
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	f241 1194 	movw	r1, #4500	; 0x1194
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7ff f96f 	bl	8006ef0 <MATCH_SPACE>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d101      	bne.n	8007c1c <decodeNEC+0xc8>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	e056      	b.n	8007cca <decodeNEC+0x176>
	offset++;
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	613b      	str	r3, [r7, #16]

	// Build the data
	for (int i = 0;  i < NEC_BITS;  i++) {
 8007c22:	2300      	movs	r3, #0
 8007c24:	60fb      	str	r3, [r7, #12]
 8007c26:	e043      	b.n	8007cb0 <decodeNEC+0x15c>
		// Check data "mark"
		if (!MATCH_MARK(results->rawbuf[offset], NEC_BIT_MARK))  return false ;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68da      	ldr	r2, [r3, #12]
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	005b      	lsls	r3, r3, #1
 8007c30:	4413      	add	r3, r2
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	f44f 710c 	mov.w	r1, #560	; 0x230
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7ff f900 	bl	8006e40 <MATCH_MARK>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <decodeNEC+0xf6>
 8007c46:	2300      	movs	r3, #0
 8007c48:	e03f      	b.n	8007cca <decodeNEC+0x176>
		offset++;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	613b      	str	r3, [r7, #16]
        // Suppend this bit
		if      (MATCH_SPACE(results->rawbuf[offset], NEC_ONE_SPACE ))  data = (data << 1) | 1 ;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68da      	ldr	r2, [r3, #12]
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	005b      	lsls	r3, r3, #1
 8007c58:	4413      	add	r3, r2
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	f240 619a 	movw	r1, #1690	; 0x69a
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7ff f944 	bl	8006ef0 <MATCH_SPACE>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d005      	beq.n	8007c7a <decodeNEC+0x126>
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	005b      	lsls	r3, r3, #1
 8007c72:	f043 0301 	orr.w	r3, r3, #1
 8007c76:	617b      	str	r3, [r7, #20]
 8007c78:	e014      	b.n	8007ca4 <decodeNEC+0x150>
		else if (MATCH_SPACE(results->rawbuf[offset], NEC_ZERO_SPACE))  data = (data << 1) | 0 ;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	005b      	lsls	r3, r3, #1
 8007c82:	4413      	add	r3, r2
 8007c84:	881b      	ldrh	r3, [r3, #0]
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	f44f 710c 	mov.w	r1, #560	; 0x230
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7ff f92f 	bl	8006ef0 <MATCH_SPACE>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d003      	beq.n	8007ca0 <decodeNEC+0x14c>
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	005b      	lsls	r3, r3, #1
 8007c9c:	617b      	str	r3, [r7, #20]
 8007c9e:	e001      	b.n	8007ca4 <decodeNEC+0x150>
		else                                                            return false ;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	e012      	b.n	8007cca <decodeNEC+0x176>
		offset++;
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < NEC_BITS;  i++) {
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3301      	adds	r3, #1
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b1f      	cmp	r3, #31
 8007cb4:	ddb8      	ble.n	8007c28 <decodeNEC+0xd4>
	}

	// Success
	results->bits        = NEC_BITS;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2220      	movs	r2, #32
 8007cba:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	605a      	str	r2, [r3, #4]
	results->decode_type = NEC;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2203      	movs	r2, #3
 8007cc6:	701a      	strb	r2, [r3, #0]

	return true;
 8007cc8:	2301      	movs	r3, #1
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3718      	adds	r7, #24
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	200040fc 	.word	0x200040fc

08007cd8 <decodePanasonic>:
#endif

//+=============================================================================
#if DECODE_PANASONIC
uint8_t decodePanasonic (decode_results *results)
{
 8007cd8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007cdc:	b086      	sub	sp, #24
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
    unsigned long long  data   = 0;
 8007ce2:	f04f 0300 	mov.w	r3, #0
 8007ce6:	f04f 0400 	mov.w	r4, #0
 8007cea:	e9c7 3404 	strd	r3, r4, [r7, #16]
    int                 offset = 1;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	60fb      	str	r3, [r7, #12]

    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_MARK ))  return false ;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68da      	ldr	r2, [r3, #12]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	1c59      	adds	r1, r3, #1
 8007cfa:	60f9      	str	r1, [r7, #12]
 8007cfc:	005b      	lsls	r3, r3, #1
 8007cfe:	4413      	add	r3, r2
 8007d00:	881b      	ldrh	r3, [r3, #0]
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	f640 51ae 	movw	r1, #3502	; 0xdae
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7ff f899 	bl	8006e40 <MATCH_MARK>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d101      	bne.n	8007d18 <decodePanasonic+0x40>
 8007d14:	2300      	movs	r3, #0
 8007d16:	e080      	b.n	8007e1a <decodePanasonic+0x142>
    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_SPACE))  return false ;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	68da      	ldr	r2, [r3, #12]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	1c59      	adds	r1, r3, #1
 8007d20:	60f9      	str	r1, [r7, #12]
 8007d22:	005b      	lsls	r3, r3, #1
 8007d24:	4413      	add	r3, r2
 8007d26:	881b      	ldrh	r3, [r3, #0]
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	f240 61d6 	movw	r1, #1750	; 0x6d6
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7ff f886 	bl	8006e40 <MATCH_MARK>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <decodePanasonic+0x66>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	e06d      	b.n	8007e1a <decodePanasonic+0x142>

    // decode address
    for (int i = 0;  i < PANASONIC_BITS;  i++) {
 8007d3e:	2300      	movs	r3, #0
 8007d40:	60bb      	str	r3, [r7, #8]
 8007d42:	e052      	b.n	8007dea <decodePanasonic+0x112>
        if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_BIT_MARK))  return false ;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	68da      	ldr	r2, [r3, #12]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	1c59      	adds	r1, r3, #1
 8007d4c:	60f9      	str	r1, [r7, #12]
 8007d4e:	005b      	lsls	r3, r3, #1
 8007d50:	4413      	add	r3, r2
 8007d52:	881b      	ldrh	r3, [r3, #0]
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7ff f870 	bl	8006e40 <MATCH_MARK>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <decodePanasonic+0x92>
 8007d66:	2300      	movs	r3, #0
 8007d68:	e057      	b.n	8007e1a <decodePanasonic+0x142>

        if      (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE ))  data = (data << 1) | 1 ;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68da      	ldr	r2, [r3, #12]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	4413      	add	r3, r2
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	f240 41dc 	movw	r1, #1244	; 0x4dc
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7ff f8b7 	bl	8006ef0 <MATCH_SPACE>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d011      	beq.n	8007dac <decodePanasonic+0xd4>
 8007d88:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007d8c:	184b      	adds	r3, r1, r1
 8007d8e:	eb42 0402 	adc.w	r4, r2, r2
 8007d92:	4619      	mov	r1, r3
 8007d94:	4622      	mov	r2, r4
 8007d96:	f04f 0301 	mov.w	r3, #1
 8007d9a:	f04f 0400 	mov.w	r4, #0
 8007d9e:	ea43 0b01 	orr.w	fp, r3, r1
 8007da2:	ea44 0c02 	orr.w	ip, r4, r2
 8007da6:	e9c7 bc04 	strd	fp, ip, [r7, #16]
 8007daa:	e018      	b.n	8007dde <decodePanasonic+0x106>
        else if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ZERO_SPACE))  data = (data << 1) | 0 ;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	68da      	ldr	r2, [r3, #12]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	005b      	lsls	r3, r3, #1
 8007db4:	4413      	add	r3, r2
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7ff f896 	bl	8006ef0 <MATCH_SPACE>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d007      	beq.n	8007dda <decodePanasonic+0x102>
 8007dca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007dce:	184b      	adds	r3, r1, r1
 8007dd0:	eb42 0402 	adc.w	r4, r2, r2
 8007dd4:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8007dd8:	e001      	b.n	8007dde <decodePanasonic+0x106>
        else                                                                 return false ;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	e01d      	b.n	8007e1a <decodePanasonic+0x142>
        offset++;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	3301      	adds	r3, #1
 8007de2:	60fb      	str	r3, [r7, #12]
    for (int i = 0;  i < PANASONIC_BITS;  i++) {
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	3301      	adds	r3, #1
 8007de8:	60bb      	str	r3, [r7, #8]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	2b2f      	cmp	r3, #47	; 0x2f
 8007dee:	dda9      	ble.n	8007d44 <decodePanasonic+0x6c>
    }

    results->value       = (unsigned long)data;
 8007df0:	693a      	ldr	r2, [r7, #16]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	605a      	str	r2, [r3, #4]
    results->address     = (unsigned int)(data >> 32);
 8007df6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007dfa:	f04f 0300 	mov.w	r3, #0
 8007dfe:	f04f 0400 	mov.w	r4, #0
 8007e02:	0013      	movs	r3, r2
 8007e04:	2400      	movs	r4, #0
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	805a      	strh	r2, [r3, #2]
    results->decode_type = PANASONIC;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2205      	movs	r2, #5
 8007e10:	701a      	strb	r2, [r3, #0]
    results->bits        = PANASONIC_BITS;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2230      	movs	r2, #48	; 0x30
 8007e16:	811a      	strh	r2, [r3, #8]

    return true;
 8007e18:	2301      	movs	r3, #1
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3718      	adds	r7, #24
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08007e24 <getRClevel>:
// t1 is the time interval for a single bit in microseconds.
// Returns -1 for error (measured time interval is not a multiple of t1).
//
#if (DECODE_RC5 || DECODE_RC6)
int getRClevel (decode_results *results,  int *offset,  int *used,  int t1)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
 8007e30:	603b      	str	r3, [r7, #0]
	int  width;
	int  val;
	int  correction;
	int  avail;

	if (*offset >= results->rawlen)  return SPACE ;  // After end of recorded buffer, assume SPACE.
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	db01      	blt.n	8007e44 <getRClevel+0x20>
 8007e40:	2301      	movs	r3, #1
 8007e42:	e05b      	b.n	8007efc <getRClevel+0xd8>
	width      = results->rawbuf[*offset];
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	68da      	ldr	r2, [r3, #12]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	005b      	lsls	r3, r3, #1
 8007e4e:	4413      	add	r3, r2
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	61bb      	str	r3, [r7, #24]
	val        = ((*offset) % 2) ? MARK : SPACE;
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0301 	and.w	r3, r3, #1
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	bf0c      	ite	eq
 8007e62:	2301      	moveq	r3, #1
 8007e64:	2300      	movne	r3, #0
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	617b      	str	r3, [r7, #20]
	correction = (val == MARK) ? MARK_EXCESS : - MARK_EXCESS;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d101      	bne.n	8007e74 <getRClevel+0x50>
 8007e70:	2364      	movs	r3, #100	; 0x64
 8007e72:	e001      	b.n	8007e78 <getRClevel+0x54>
 8007e74:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8007e78:	613b      	str	r3, [r7, #16]

	if      (MATCH(width, (  t1) + correction))  avail = 1 ;
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	4413      	add	r3, r2
 8007e80:	4619      	mov	r1, r3
 8007e82:	69b8      	ldr	r0, [r7, #24]
 8007e84:	f7fe ff88 	bl	8006d98 <MATCH>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d002      	beq.n	8007e94 <getRClevel+0x70>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	61fb      	str	r3, [r7, #28]
 8007e92:	e020      	b.n	8007ed6 <getRClevel+0xb2>
	else if (MATCH(width, (2*t1) + correction))  avail = 2 ;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	005a      	lsls	r2, r3, #1
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	69b8      	ldr	r0, [r7, #24]
 8007ea0:	f7fe ff7a 	bl	8006d98 <MATCH>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d002      	beq.n	8007eb0 <getRClevel+0x8c>
 8007eaa:	2302      	movs	r3, #2
 8007eac:	61fb      	str	r3, [r7, #28]
 8007eae:	e012      	b.n	8007ed6 <getRClevel+0xb2>
	else if (MATCH(width, (3*t1) + correction))  avail = 3 ;
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	441a      	add	r2, r3
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	4413      	add	r3, r2
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	69b8      	ldr	r0, [r7, #24]
 8007ec0:	f7fe ff6a 	bl	8006d98 <MATCH>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d002      	beq.n	8007ed0 <getRClevel+0xac>
 8007eca:	2303      	movs	r3, #3
 8007ecc:	61fb      	str	r3, [r7, #28]
 8007ece:	e002      	b.n	8007ed6 <getRClevel+0xb2>
	else                                         return -1 ;
 8007ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed4:	e012      	b.n	8007efc <getRClevel+0xd8>

	(*used)++;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	1c5a      	adds	r2, r3, #1
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	601a      	str	r2, [r3, #0]
	if (*used >= avail) {
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	69fa      	ldr	r2, [r7, #28]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	dc07      	bgt.n	8007efa <getRClevel+0xd6>
		*used = 0;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	601a      	str	r2, [r3, #0]
		(*offset)++;
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	1c5a      	adds	r2, r3, #1
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	601a      	str	r2, [r3, #0]
	}

	//DBG_PRINTLN( (val == MARK) ? "MARK" : "SPACE" );

	return val;
 8007efa:	697b      	ldr	r3, [r7, #20]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3720      	adds	r7, #32
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <decodeRC5>:
#endif

//+=============================================================================
#if DECODE_RC5
uint8_t decodeRC5 (decode_results *results)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b088      	sub	sp, #32
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
	int   nbits;
	long  data   = 0;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	61bb      	str	r3, [r7, #24]
	int   used   = 0;
 8007f10:	2300      	movs	r3, #0
 8007f12:	60fb      	str	r3, [r7, #12]
	int   offset = 1;  // Skip gap space
 8007f14:	2301      	movs	r3, #1
 8007f16:	60bb      	str	r3, [r7, #8]

	if (irparams.rawlen < MIN_RC5_SAMPLES + 2)  return false ;
 8007f18:	4b3c      	ldr	r3, [pc, #240]	; (800800c <decodeRC5+0x108>)
 8007f1a:	785b      	ldrb	r3, [r3, #1]
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b0c      	cmp	r3, #12
 8007f20:	d801      	bhi.n	8007f26 <decodeRC5+0x22>
 8007f22:	2300      	movs	r3, #0
 8007f24:	e06d      	b.n	8008002 <decodeRC5+0xfe>

	// Get start bits
	if (getRClevel(results, &offset, &used, RC5_T1) != MARK)   return false ;
 8007f26:	f107 020c 	add.w	r2, r7, #12
 8007f2a:	f107 0108 	add.w	r1, r7, #8
 8007f2e:	f240 3379 	movw	r3, #889	; 0x379
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7ff ff76 	bl	8007e24 <getRClevel>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d001      	beq.n	8007f42 <decodeRC5+0x3e>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	e05f      	b.n	8008002 <decodeRC5+0xfe>
	if (getRClevel(results, &offset, &used, RC5_T1) != SPACE)  return false ;
 8007f42:	f107 020c 	add.w	r2, r7, #12
 8007f46:	f107 0108 	add.w	r1, r7, #8
 8007f4a:	f240 3379 	movw	r3, #889	; 0x379
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7ff ff68 	bl	8007e24 <getRClevel>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d001      	beq.n	8007f5e <decodeRC5+0x5a>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	e051      	b.n	8008002 <decodeRC5+0xfe>
	if (getRClevel(results, &offset, &used, RC5_T1) != MARK)   return false ;
 8007f5e:	f107 020c 	add.w	r2, r7, #12
 8007f62:	f107 0108 	add.w	r1, r7, #8
 8007f66:	f240 3379 	movw	r3, #889	; 0x379
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7ff ff5a 	bl	8007e24 <getRClevel>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d001      	beq.n	8007f7a <decodeRC5+0x76>
 8007f76:	2300      	movs	r3, #0
 8007f78:	e043      	b.n	8008002 <decodeRC5+0xfe>

	for (nbits = 0;  offset < irparams.rawlen;  nbits++) {
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	61fb      	str	r3, [r7, #28]
 8007f7e:	e02e      	b.n	8007fde <decodeRC5+0xda>
		int  levelA = getRClevel(results, &offset, &used, RC5_T1);
 8007f80:	f107 020c 	add.w	r2, r7, #12
 8007f84:	f107 0108 	add.w	r1, r7, #8
 8007f88:	f240 3379 	movw	r3, #889	; 0x379
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f7ff ff49 	bl	8007e24 <getRClevel>
 8007f92:	6178      	str	r0, [r7, #20]
		int  levelB = getRClevel(results, &offset, &used, RC5_T1);
 8007f94:	f107 020c 	add.w	r2, r7, #12
 8007f98:	f107 0108 	add.w	r1, r7, #8
 8007f9c:	f240 3379 	movw	r3, #889	; 0x379
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7ff ff3f 	bl	8007e24 <getRClevel>
 8007fa6:	6138      	str	r0, [r7, #16]

		if      ((levelA == SPACE) && (levelB == MARK ))  data = (data << 1) | 1 ;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d108      	bne.n	8007fc0 <decodeRC5+0xbc>
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d105      	bne.n	8007fc0 <decodeRC5+0xbc>
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	005b      	lsls	r3, r3, #1
 8007fb8:	f043 0301 	orr.w	r3, r3, #1
 8007fbc:	61bb      	str	r3, [r7, #24]
 8007fbe:	e00b      	b.n	8007fd8 <decodeRC5+0xd4>
		else if ((levelA == MARK ) && (levelB == SPACE))  data = (data << 1) | 0 ;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d106      	bne.n	8007fd4 <decodeRC5+0xd0>
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d103      	bne.n	8007fd4 <decodeRC5+0xd0>
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	005b      	lsls	r3, r3, #1
 8007fd0:	61bb      	str	r3, [r7, #24]
 8007fd2:	e001      	b.n	8007fd8 <decodeRC5+0xd4>
		else                                              return false ;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	e014      	b.n	8008002 <decodeRC5+0xfe>
	for (nbits = 0;  offset < irparams.rawlen;  nbits++) {
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	61fb      	str	r3, [r7, #28]
 8007fde:	4b0b      	ldr	r3, [pc, #44]	; (800800c <decodeRC5+0x108>)
 8007fe0:	785b      	ldrb	r3, [r3, #1]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	dcc9      	bgt.n	8007f80 <decodeRC5+0x7c>
	}

	// Success
	results->bits        = nbits;
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	b21a      	sxth	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 8007ff4:	69ba      	ldr	r2, [r7, #24]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	605a      	str	r2, [r3, #4]
	results->decode_type = RC5;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	701a      	strb	r2, [r3, #0]
	return true;
 8008000:	2301      	movs	r3, #1
}
 8008002:	4618      	mov	r0, r3
 8008004:	3720      	adds	r7, #32
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	200040fc 	.word	0x200040fc

08008010 <decodeRC6>:
#endif

//+=============================================================================
#if DECODE_RC6
uint8_t decodeRC6 (decode_results *results)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b088      	sub	sp, #32
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
	int   nbits;
	long  data   = 0;
 8008018:	2300      	movs	r3, #0
 800801a:	61bb      	str	r3, [r7, #24]
	int   used   = 0;
 800801c:	2300      	movs	r3, #0
 800801e:	60fb      	str	r3, [r7, #12]
	int   offset = 1;  // Skip first space
 8008020:	2301      	movs	r3, #1
 8008022:	60bb      	str	r3, [r7, #8]

	if (results->rawlen < MIN_RC6_SAMPLES)  return false ;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800802a:	2b00      	cmp	r3, #0
 800802c:	dc01      	bgt.n	8008032 <decodeRC6+0x22>
 800802e:	2300      	movs	r3, #0
 8008030:	e0a9      	b.n	8008186 <decodeRC6+0x176>

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++],  RC6_HDR_MARK))   return false ;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	68da      	ldr	r2, [r3, #12]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	1c59      	adds	r1, r3, #1
 800803a:	60b9      	str	r1, [r7, #8]
 800803c:	005b      	lsls	r3, r3, #1
 800803e:	4413      	add	r3, r2
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	b29b      	uxth	r3, r3
 8008044:	f640 216a 	movw	r1, #2666	; 0xa6a
 8008048:	4618      	mov	r0, r3
 800804a:	f7fe fef9 	bl	8006e40 <MATCH_MARK>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d101      	bne.n	8008058 <decodeRC6+0x48>
 8008054:	2300      	movs	r3, #0
 8008056:	e096      	b.n	8008186 <decodeRC6+0x176>
	if (!MATCH_SPACE(results->rawbuf[offset++], RC6_HDR_SPACE))  return false ;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	68da      	ldr	r2, [r3, #12]
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	1c59      	adds	r1, r3, #1
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	005b      	lsls	r3, r3, #1
 8008064:	4413      	add	r3, r2
 8008066:	881b      	ldrh	r3, [r3, #0]
 8008068:	b29b      	uxth	r3, r3
 800806a:	f240 3179 	movw	r1, #889	; 0x379
 800806e:	4618      	mov	r0, r3
 8008070:	f7fe ff3e 	bl	8006ef0 <MATCH_SPACE>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d101      	bne.n	800807e <decodeRC6+0x6e>
 800807a:	2300      	movs	r3, #0
 800807c:	e083      	b.n	8008186 <decodeRC6+0x176>

	// Get start bit (1)
	if (getRClevel(results, &offset, &used, RC6_T1) != MARK)   return false ;
 800807e:	f107 020c 	add.w	r2, r7, #12
 8008082:	f107 0108 	add.w	r1, r7, #8
 8008086:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f7ff feca 	bl	8007e24 <getRClevel>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <decodeRC6+0x8a>
 8008096:	2300      	movs	r3, #0
 8008098:	e075      	b.n	8008186 <decodeRC6+0x176>
	if (getRClevel(results, &offset, &used, RC6_T1) != SPACE)  return false ;
 800809a:	f107 020c 	add.w	r2, r7, #12
 800809e:	f107 0108 	add.w	r1, r7, #8
 80080a2:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7ff febc 	bl	8007e24 <getRClevel>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d001      	beq.n	80080b6 <decodeRC6+0xa6>
 80080b2:	2300      	movs	r3, #0
 80080b4:	e067      	b.n	8008186 <decodeRC6+0x176>

	for (nbits = 0;  offset < results->rawlen;  nbits++) {
 80080b6:	2300      	movs	r3, #0
 80080b8:	61fb      	str	r3, [r7, #28]
 80080ba:	e052      	b.n	8008162 <decodeRC6+0x152>
		int  levelA, levelB;  // Next two levels

		levelA = getRClevel(results, &offset, &used, RC6_T1);
 80080bc:	f107 020c 	add.w	r2, r7, #12
 80080c0:	f107 0108 	add.w	r1, r7, #8
 80080c4:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7ff feab 	bl	8007e24 <getRClevel>
 80080ce:	6178      	str	r0, [r7, #20]
		if (nbits == 3) {
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d10e      	bne.n	80080f4 <decodeRC6+0xe4>
			// T bit is double wide; make sure second half matches
			if (levelA != getRClevel(results, &offset, &used, RC6_T1)) return false;
 80080d6:	f107 020c 	add.w	r2, r7, #12
 80080da:	f107 0108 	add.w	r1, r7, #8
 80080de:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7ff fe9e 	bl	8007e24 <getRClevel>
 80080e8:	4602      	mov	r2, r0
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d001      	beq.n	80080f4 <decodeRC6+0xe4>
 80080f0:	2300      	movs	r3, #0
 80080f2:	e048      	b.n	8008186 <decodeRC6+0x176>
		}

		levelB = getRClevel(results, &offset, &used, RC6_T1);
 80080f4:	f107 020c 	add.w	r2, r7, #12
 80080f8:	f107 0108 	add.w	r1, r7, #8
 80080fc:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7ff fe8f 	bl	8007e24 <getRClevel>
 8008106:	6138      	str	r0, [r7, #16]
		if (nbits == 3) {
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	2b03      	cmp	r3, #3
 800810c:	d10e      	bne.n	800812c <decodeRC6+0x11c>
			// T bit is double wide; make sure second half matches
			if (levelB != getRClevel(results, &offset, &used, RC6_T1)) return false;
 800810e:	f107 020c 	add.w	r2, r7, #12
 8008112:	f107 0108 	add.w	r1, r7, #8
 8008116:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7ff fe82 	bl	8007e24 <getRClevel>
 8008120:	4602      	mov	r2, r0
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	4293      	cmp	r3, r2
 8008126:	d001      	beq.n	800812c <decodeRC6+0x11c>
 8008128:	2300      	movs	r3, #0
 800812a:	e02c      	b.n	8008186 <decodeRC6+0x176>
		}

		if      ((levelA == MARK ) && (levelB == SPACE))  data = (data << 1) | 1 ;  // inverted compared to RC5
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d108      	bne.n	8008144 <decodeRC6+0x134>
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	2b01      	cmp	r3, #1
 8008136:	d105      	bne.n	8008144 <decodeRC6+0x134>
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	005b      	lsls	r3, r3, #1
 800813c:	f043 0301 	orr.w	r3, r3, #1
 8008140:	61bb      	str	r3, [r7, #24]
 8008142:	e00b      	b.n	800815c <decodeRC6+0x14c>
		else if ((levelA == SPACE) && (levelB == MARK ))  data = (data << 1) | 0 ;  // ...
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d106      	bne.n	8008158 <decodeRC6+0x148>
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d103      	bne.n	8008158 <decodeRC6+0x148>
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	005b      	lsls	r3, r3, #1
 8008154:	61bb      	str	r3, [r7, #24]
 8008156:	e001      	b.n	800815c <decodeRC6+0x14c>
		else                                              return false ;            // Error
 8008158:	2300      	movs	r3, #0
 800815a:	e014      	b.n	8008186 <decodeRC6+0x176>
	for (nbits = 0;  offset < results->rawlen;  nbits++) {
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	3301      	adds	r3, #1
 8008160:	61fb      	str	r3, [r7, #28]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008168:	461a      	mov	r2, r3
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	429a      	cmp	r2, r3
 800816e:	dca5      	bgt.n	80080bc <decodeRC6+0xac>
	}

	// Success
	results->bits        = nbits;
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	b21a      	sxth	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 8008178:	69ba      	ldr	r2, [r7, #24]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	605a      	str	r2, [r3, #4]
	results->decode_type = RC6;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2202      	movs	r2, #2
 8008182:	701a      	strb	r2, [r3, #0]
	return true;
 8008184:	2301      	movs	r3, #1
}
 8008186:	4618      	mov	r0, r3
 8008188:	3720      	adds	r7, #32
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
	...

08008190 <decodeSAMSUNG>:
//+=============================================================================
// SAMSUNGs have a repeat only 4 items long
//
#if DECODE_SAMSUNG
uint8_t decodeSAMSUNG (decode_results *results)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
	long  data   = 0;
 8008198:	2300      	movs	r3, #0
 800819a:	617b      	str	r3, [r7, #20]
	int   offset = 1;  // Skip first space
 800819c:	2301      	movs	r3, #1
 800819e:	613b      	str	r3, [r7, #16]

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset], SAMSUNG_HDR_MARK))   return false ;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68da      	ldr	r2, [r3, #12]
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	005b      	lsls	r3, r3, #1
 80081a8:	4413      	add	r3, r2
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	f241 1194 	movw	r1, #4500	; 0x1194
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fe fe44 	bl	8006e40 <MATCH_MARK>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <decodeSAMSUNG+0x32>
 80081be:	2300      	movs	r3, #0
 80081c0:	e09f      	b.n	8008302 <decodeSAMSUNG+0x172>
	offset++;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	3301      	adds	r3, #1
 80081c6:	613b      	str	r3, [r7, #16]

	// Check for repeat
	if (    (irparams.rawlen == 4)
 80081c8:	4b50      	ldr	r3, [pc, #320]	; (800830c <decodeSAMSUNG+0x17c>)
 80081ca:	785b      	ldrb	r3, [r3, #1]
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b04      	cmp	r3, #4
 80081d0:	d12a      	bne.n	8008228 <decodeSAMSUNG+0x98>
	     && MATCH_SPACE(results->rawbuf[offset], SAMSUNG_RPT_SPACE)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	68da      	ldr	r2, [r3, #12]
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	005b      	lsls	r3, r3, #1
 80081da:	4413      	add	r3, r2
 80081dc:	881b      	ldrh	r3, [r3, #0]
 80081de:	b29b      	uxth	r3, r3
 80081e0:	f640 01ca 	movw	r1, #2250	; 0x8ca
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7fe fe83 	bl	8006ef0 <MATCH_SPACE>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d01b      	beq.n	8008228 <decodeSAMSUNG+0x98>
	     && MATCH_MARK(results->rawbuf[offset+1], SAMSUNG_BIT_MARK)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	68da      	ldr	r2, [r3, #12]
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	3301      	adds	r3, #1
 80081f8:	005b      	lsls	r3, r3, #1
 80081fa:	4413      	add	r3, r2
 80081fc:	881b      	ldrh	r3, [r3, #0]
 80081fe:	b29b      	uxth	r3, r3
 8008200:	f44f 710c 	mov.w	r1, #560	; 0x230
 8008204:	4618      	mov	r0, r3
 8008206:	f7fe fe1b 	bl	8006e40 <MATCH_MARK>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00b      	beq.n	8008228 <decodeSAMSUNG+0x98>
	   ) {
		results->bits        = 0;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	811a      	strh	r2, [r3, #8]
		results->value       = REPEAT;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f04f 32ff 	mov.w	r2, #4294967295
 800821c:	605a      	str	r2, [r3, #4]
		results->decode_type = SAMSUNG;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2207      	movs	r2, #7
 8008222:	701a      	strb	r2, [r3, #0]
		return true;
 8008224:	2301      	movs	r3, #1
 8008226:	e06c      	b.n	8008302 <decodeSAMSUNG+0x172>
	}
	if (irparams.rawlen < (2 * SAMSUNG_BITS) + 4)  return false ;
 8008228:	4b38      	ldr	r3, [pc, #224]	; (800830c <decodeSAMSUNG+0x17c>)
 800822a:	785b      	ldrb	r3, [r3, #1]
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b43      	cmp	r3, #67	; 0x43
 8008230:	d801      	bhi.n	8008236 <decodeSAMSUNG+0xa6>
 8008232:	2300      	movs	r3, #0
 8008234:	e065      	b.n	8008302 <decodeSAMSUNG+0x172>

	// Initial space
	if (!MATCH_SPACE(results->rawbuf[offset++], SAMSUNG_HDR_SPACE))  return false ;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68da      	ldr	r2, [r3, #12]
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	1c59      	adds	r1, r3, #1
 800823e:	6139      	str	r1, [r7, #16]
 8008240:	005b      	lsls	r3, r3, #1
 8008242:	4413      	add	r3, r2
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	b29b      	uxth	r3, r3
 8008248:	f241 1194 	movw	r1, #4500	; 0x1194
 800824c:	4618      	mov	r0, r3
 800824e:	f7fe fe4f 	bl	8006ef0 <MATCH_SPACE>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d101      	bne.n	800825c <decodeSAMSUNG+0xcc>
 8008258:	2300      	movs	r3, #0
 800825a:	e052      	b.n	8008302 <decodeSAMSUNG+0x172>

	for (int i = 0;  i < SAMSUNG_BITS;   i++) {
 800825c:	2300      	movs	r3, #0
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	e042      	b.n	80082e8 <decodeSAMSUNG+0x158>
		if (!MATCH_MARK(results->rawbuf[offset++], SAMSUNG_BIT_MARK))  return false ;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68da      	ldr	r2, [r3, #12]
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	1c59      	adds	r1, r3, #1
 800826a:	6139      	str	r1, [r7, #16]
 800826c:	005b      	lsls	r3, r3, #1
 800826e:	4413      	add	r3, r2
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	b29b      	uxth	r3, r3
 8008274:	f44f 710c 	mov.w	r1, #560	; 0x230
 8008278:	4618      	mov	r0, r3
 800827a:	f7fe fde1 	bl	8006e40 <MATCH_MARK>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <decodeSAMSUNG+0xf8>
 8008284:	2300      	movs	r3, #0
 8008286:	e03c      	b.n	8008302 <decodeSAMSUNG+0x172>

		if      (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ONE_SPACE))   data = (data << 1) | 1 ;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	68da      	ldr	r2, [r3, #12]
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	005b      	lsls	r3, r3, #1
 8008290:	4413      	add	r3, r2
 8008292:	881b      	ldrh	r3, [r3, #0]
 8008294:	b29b      	uxth	r3, r3
 8008296:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800829a:	4618      	mov	r0, r3
 800829c:	f7fe fe28 	bl	8006ef0 <MATCH_SPACE>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d005      	beq.n	80082b2 <decodeSAMSUNG+0x122>
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	005b      	lsls	r3, r3, #1
 80082aa:	f043 0301 	orr.w	r3, r3, #1
 80082ae:	617b      	str	r3, [r7, #20]
 80082b0:	e014      	b.n	80082dc <decodeSAMSUNG+0x14c>
		else if (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ZERO_SPACE))  data = (data << 1) | 0 ;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	68da      	ldr	r2, [r3, #12]
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	005b      	lsls	r3, r3, #1
 80082ba:	4413      	add	r3, r2
 80082bc:	881b      	ldrh	r3, [r3, #0]
 80082be:	b29b      	uxth	r3, r3
 80082c0:	f44f 710c 	mov.w	r1, #560	; 0x230
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fe fe13 	bl	8006ef0 <MATCH_SPACE>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d003      	beq.n	80082d8 <decodeSAMSUNG+0x148>
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	005b      	lsls	r3, r3, #1
 80082d4:	617b      	str	r3, [r7, #20]
 80082d6:	e001      	b.n	80082dc <decodeSAMSUNG+0x14c>
		else                                                                return false ;
 80082d8:	2300      	movs	r3, #0
 80082da:	e012      	b.n	8008302 <decodeSAMSUNG+0x172>
		offset++;
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	3301      	adds	r3, #1
 80082e0:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < SAMSUNG_BITS;   i++) {
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	3301      	adds	r3, #1
 80082e6:	60fb      	str	r3, [r7, #12]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2b1f      	cmp	r3, #31
 80082ec:	ddb9      	ble.n	8008262 <decodeSAMSUNG+0xd2>
	}

	// Success
	results->bits        = SAMSUNG_BITS;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2220      	movs	r2, #32
 80082f2:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	605a      	str	r2, [r3, #4]
	results->decode_type = SAMSUNG;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2207      	movs	r2, #7
 80082fe:	701a      	strb	r2, [r3, #0]
	return true;
 8008300:	2301      	movs	r3, #1
}
 8008302:	4618      	mov	r0, r3
 8008304:	3718      	adds	r7, #24
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	200040fc 	.word	0x200040fc

08008310 <decodeSanyo>:
#define SANYO_RPT_LENGTH          45000

//+=============================================================================
#if DECODE_SANYO
uint8_t decodeSanyo (decode_results *results)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
	long  data   = 0;
 8008318:	2300      	movs	r3, #0
 800831a:	60fb      	str	r3, [r7, #12]
	int   offset = 0;  // Skip first space  <-- CHECK THIS!
 800831c:	2300      	movs	r3, #0
 800831e:	60bb      	str	r3, [r7, #8]

	if (irparams.rawlen < (2 * SANYO_BITS) + 2)  return false ;
 8008320:	4b54      	ldr	r3, [pc, #336]	; (8008474 <decodeSanyo+0x164>)
 8008322:	785b      	ldrb	r3, [r3, #1]
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b19      	cmp	r3, #25
 8008328:	d801      	bhi.n	800832e <decodeSanyo+0x1e>
 800832a:	2300      	movs	r3, #0
 800832c:	e09e      	b.n	800846c <decodeSanyo+0x15c>
	Serial.println( "test against:");
	Serial.println(results->rawbuf[offset]);
#endif

	// Initial space
	if (results->rawbuf[offset] < SANYO_DOUBLE_SPACE_USECS) {
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	68da      	ldr	r2, [r3, #12]
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	005b      	lsls	r3, r3, #1
 8008336:	4413      	add	r3, r2
 8008338:	881b      	ldrh	r3, [r3, #0]
 800833a:	b29b      	uxth	r3, r3
 800833c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8008340:	d20b      	bcs.n	800835a <decodeSanyo+0x4a>
		//Serial.print("IR Gap found: ");
		results->bits        = 0;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	811a      	strh	r2, [r3, #8]
		results->value       = REPEAT;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f04f 32ff 	mov.w	r2, #4294967295
 800834e:	605a      	str	r2, [r3, #4]
		results->decode_type = SANYO;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	220b      	movs	r2, #11
 8008354:	701a      	strb	r2, [r3, #0]
		return true;
 8008356:	2301      	movs	r3, #1
 8008358:	e088      	b.n	800846c <decodeSanyo+0x15c>
	}
	offset++;
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	3301      	adds	r3, #1
 800835e:	60bb      	str	r3, [r7, #8]

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))  return false ;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	68da      	ldr	r2, [r3, #12]
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	1c59      	adds	r1, r3, #1
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	4413      	add	r3, r2
 800836e:	881b      	ldrh	r3, [r3, #0]
 8008370:	b29b      	uxth	r3, r3
 8008372:	f640 51ac 	movw	r1, #3500	; 0xdac
 8008376:	4618      	mov	r0, r3
 8008378:	f7fe fd62 	bl	8006e40 <MATCH_MARK>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <decodeSanyo+0x76>
 8008382:	2300      	movs	r3, #0
 8008384:	e072      	b.n	800846c <decodeSanyo+0x15c>

	// Skip Second Mark
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))  return false ;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	68da      	ldr	r2, [r3, #12]
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	1c59      	adds	r1, r3, #1
 800838e:	60b9      	str	r1, [r7, #8]
 8008390:	005b      	lsls	r3, r3, #1
 8008392:	4413      	add	r3, r2
 8008394:	881b      	ldrh	r3, [r3, #0]
 8008396:	b29b      	uxth	r3, r3
 8008398:	f640 51ac 	movw	r1, #3500	; 0xdac
 800839c:	4618      	mov	r0, r3
 800839e:	f7fe fd4f 	bl	8006e40 <MATCH_MARK>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d13f      	bne.n	8008428 <decodeSanyo+0x118>
 80083a8:	2300      	movs	r3, #0
 80083aa:	e05f      	b.n	800846c <decodeSanyo+0x15c>

	while (offset + 1 < irparams.rawlen) {
		if (!MATCH_SPACE(results->rawbuf[offset++], SANYO_HDR_SPACE))  break ;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	68da      	ldr	r2, [r3, #12]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	1c59      	adds	r1, r3, #1
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	005b      	lsls	r3, r3, #1
 80083b8:	4413      	add	r3, r2
 80083ba:	881b      	ldrh	r3, [r3, #0]
 80083bc:	b29b      	uxth	r3, r3
 80083be:	f240 31b6 	movw	r1, #950	; 0x3b6
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fe fd94 	bl	8006ef0 <MATCH_SPACE>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d034      	beq.n	8008438 <decodeSanyo+0x128>

		if      (MATCH_MARK(results->rawbuf[offset], SANYO_ONE_MARK))   data = (data << 1) | 1 ;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68da      	ldr	r2, [r3, #12]
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	005b      	lsls	r3, r3, #1
 80083d6:	4413      	add	r3, r2
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	b29b      	uxth	r3, r3
 80083dc:	f44f 6116 	mov.w	r1, #2400	; 0x960
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fe fd2d 	bl	8006e40 <MATCH_MARK>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d005      	beq.n	80083f8 <decodeSanyo+0xe8>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	005b      	lsls	r3, r3, #1
 80083f0:	f043 0301 	orr.w	r3, r3, #1
 80083f4:	60fb      	str	r3, [r7, #12]
 80083f6:	e014      	b.n	8008422 <decodeSanyo+0x112>
		else if (MATCH_MARK(results->rawbuf[offset], SANYO_ZERO_MARK))  data = (data << 1) | 0 ;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	68da      	ldr	r2, [r3, #12]
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	005b      	lsls	r3, r3, #1
 8008400:	4413      	add	r3, r2
 8008402:	881b      	ldrh	r3, [r3, #0]
 8008404:	b29b      	uxth	r3, r3
 8008406:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800840a:	4618      	mov	r0, r3
 800840c:	f7fe fd18 	bl	8006e40 <MATCH_MARK>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d003      	beq.n	800841e <decodeSanyo+0x10e>
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	005b      	lsls	r3, r3, #1
 800841a:	60fb      	str	r3, [r7, #12]
 800841c:	e001      	b.n	8008422 <decodeSanyo+0x112>
		else                                                            return false ;
 800841e:	2300      	movs	r3, #0
 8008420:	e024      	b.n	800846c <decodeSanyo+0x15c>
		offset++;
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	3301      	adds	r3, #1
 8008426:	60bb      	str	r3, [r7, #8]
	while (offset + 1 < irparams.rawlen) {
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	3301      	adds	r3, #1
 800842c:	4a11      	ldr	r2, [pc, #68]	; (8008474 <decodeSanyo+0x164>)
 800842e:	7852      	ldrb	r2, [r2, #1]
 8008430:	b2d2      	uxtb	r2, r2
 8008432:	4293      	cmp	r3, r2
 8008434:	dbba      	blt.n	80083ac <decodeSanyo+0x9c>
 8008436:	e000      	b.n	800843a <decodeSanyo+0x12a>
		if (!MATCH_SPACE(results->rawbuf[offset++], SANYO_HDR_SPACE))  break ;
 8008438:	bf00      	nop
	}

	// Success
	results->bits = (offset - 1) / 2;
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	3b01      	subs	r3, #1
 800843e:	0fda      	lsrs	r2, r3, #31
 8008440:	4413      	add	r3, r2
 8008442:	105b      	asrs	r3, r3, #1
 8008444:	b21a      	sxth	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	811a      	strh	r2, [r3, #8]
	if (results->bits < 12) {
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008450:	2b0b      	cmp	r3, #11
 8008452:	dc04      	bgt.n	800845e <decodeSanyo+0x14e>
		results->bits = 0;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	811a      	strh	r2, [r3, #8]
		return false;
 800845a:	2300      	movs	r3, #0
 800845c:	e006      	b.n	800846c <decodeSanyo+0x15c>
	}

	results->value       = data;
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	605a      	str	r2, [r3, #4]
	results->decode_type = SANYO;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	220b      	movs	r2, #11
 8008468:	701a      	strb	r2, [r3, #0]
	return true;
 800846a:	2301      	movs	r3, #1
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	200040fc 	.word	0x200040fc

08008478 <decodeSony>:
#endif

//+=============================================================================
#if DECODE_SONY
uint8_t decodeSony (decode_results *results)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
	long  data   = 0;
 8008480:	2300      	movs	r3, #0
 8008482:	60fb      	str	r3, [r7, #12]
	int   offset = 0;  // Dont skip first space, check its size
 8008484:	2300      	movs	r3, #0
 8008486:	60bb      	str	r3, [r7, #8]

	if (irparams.rawlen < (2 * SONY_BITS) + 2)  return false ;
 8008488:	4b4b      	ldr	r3, [pc, #300]	; (80085b8 <decodeSony+0x140>)
 800848a:	785b      	ldrb	r3, [r3, #1]
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b19      	cmp	r3, #25
 8008490:	d801      	bhi.n	8008496 <decodeSony+0x1e>
 8008492:	2300      	movs	r3, #0
 8008494:	e08b      	b.n	80085ae <decodeSony+0x136>

	// Some Sony's deliver repeats fast after first
	// unfortunately can't spot difference from of repeat from two fast clicks
	if (results->rawbuf[offset] < SONY_DOUBLE_SPACE_USECS) {
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	68da      	ldr	r2, [r3, #12]
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	005b      	lsls	r3, r3, #1
 800849e:	4413      	add	r3, r2
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80084a8:	d20b      	bcs.n	80084c2 <decodeSony+0x4a>
		// Serial.print("IR Gap found: ");
		results->bits = 0;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	811a      	strh	r2, [r3, #8]
		results->value = REPEAT;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f04f 32ff 	mov.w	r2, #4294967295
 80084b6:	605a      	str	r2, [r3, #4]

#	ifdef DECODE_SANYO
		results->decode_type = SANYO;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	220b      	movs	r2, #11
 80084bc:	701a      	strb	r2, [r3, #0]
#	else
		results->decode_type = UNKNOWN;
#	endif

	    return true;
 80084be:	2301      	movs	r3, #1
 80084c0:	e075      	b.n	80085ae <decodeSony+0x136>
	}
	offset++;
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	3301      	adds	r3, #1
 80084c6:	60bb      	str	r3, [r7, #8]

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++], SONY_HDR_MARK))  return false ;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	68da      	ldr	r2, [r3, #12]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	1c59      	adds	r1, r3, #1
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	4413      	add	r3, r2
 80084d6:	881b      	ldrh	r3, [r3, #0]
 80084d8:	b29b      	uxth	r3, r3
 80084da:	f44f 6116 	mov.w	r1, #2400	; 0x960
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fe fcae 	bl	8006e40 <MATCH_MARK>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d13f      	bne.n	800856a <decodeSony+0xf2>
 80084ea:	2300      	movs	r3, #0
 80084ec:	e05f      	b.n	80085ae <decodeSony+0x136>

	while (offset + 1 < irparams.rawlen) {
		if (!MATCH_SPACE(results->rawbuf[offset++], SONY_HDR_SPACE))  break ;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68da      	ldr	r2, [r3, #12]
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	1c59      	adds	r1, r3, #1
 80084f6:	60b9      	str	r1, [r7, #8]
 80084f8:	005b      	lsls	r3, r3, #1
 80084fa:	4413      	add	r3, r2
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008504:	4618      	mov	r0, r3
 8008506:	f7fe fcf3 	bl	8006ef0 <MATCH_SPACE>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d034      	beq.n	800857a <decodeSony+0x102>

		if      (MATCH_MARK(results->rawbuf[offset], SONY_ONE_MARK))   data = (data << 1) | 1 ;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	68da      	ldr	r2, [r3, #12]
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	005b      	lsls	r3, r3, #1
 8008518:	4413      	add	r3, r2
 800851a:	881b      	ldrh	r3, [r3, #0]
 800851c:	b29b      	uxth	r3, r3
 800851e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008522:	4618      	mov	r0, r3
 8008524:	f7fe fc8c 	bl	8006e40 <MATCH_MARK>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d005      	beq.n	800853a <decodeSony+0xc2>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	005b      	lsls	r3, r3, #1
 8008532:	f043 0301 	orr.w	r3, r3, #1
 8008536:	60fb      	str	r3, [r7, #12]
 8008538:	e014      	b.n	8008564 <decodeSony+0xec>
		else if (MATCH_MARK(results->rawbuf[offset], SONY_ZERO_MARK))  data = (data << 1) | 0 ;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	68da      	ldr	r2, [r3, #12]
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	005b      	lsls	r3, r3, #1
 8008542:	4413      	add	r3, r2
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	b29b      	uxth	r3, r3
 8008548:	f44f 7116 	mov.w	r1, #600	; 0x258
 800854c:	4618      	mov	r0, r3
 800854e:	f7fe fc77 	bl	8006e40 <MATCH_MARK>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d003      	beq.n	8008560 <decodeSony+0xe8>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	005b      	lsls	r3, r3, #1
 800855c:	60fb      	str	r3, [r7, #12]
 800855e:	e001      	b.n	8008564 <decodeSony+0xec>
		else                                                           return false ;
 8008560:	2300      	movs	r3, #0
 8008562:	e024      	b.n	80085ae <decodeSony+0x136>
		offset++;
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	3301      	adds	r3, #1
 8008568:	60bb      	str	r3, [r7, #8]
	while (offset + 1 < irparams.rawlen) {
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	3301      	adds	r3, #1
 800856e:	4a12      	ldr	r2, [pc, #72]	; (80085b8 <decodeSony+0x140>)
 8008570:	7852      	ldrb	r2, [r2, #1]
 8008572:	b2d2      	uxtb	r2, r2
 8008574:	4293      	cmp	r3, r2
 8008576:	dbba      	blt.n	80084ee <decodeSony+0x76>
 8008578:	e000      	b.n	800857c <decodeSony+0x104>
		if (!MATCH_SPACE(results->rawbuf[offset++], SONY_HDR_SPACE))  break ;
 800857a:	bf00      	nop
	}

	// Success
	results->bits = (offset - 1) / 2;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	3b01      	subs	r3, #1
 8008580:	0fda      	lsrs	r2, r3, #31
 8008582:	4413      	add	r3, r2
 8008584:	105b      	asrs	r3, r3, #1
 8008586:	b21a      	sxth	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	811a      	strh	r2, [r3, #8]
	if (results->bits < 12) {
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008592:	2b0b      	cmp	r3, #11
 8008594:	dc04      	bgt.n	80085a0 <decodeSony+0x128>
		results->bits = 0;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	811a      	strh	r2, [r3, #8]
		return false;
 800859c:	2300      	movs	r3, #0
 800859e:	e006      	b.n	80085ae <decodeSony+0x136>
	}
	results->value       = data;
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	605a      	str	r2, [r3, #4]
	results->decode_type = SONY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2204      	movs	r2, #4
 80085aa:	701a      	strb	r2, [r3, #0]
	return true;
 80085ac:	2301      	movs	r3, #1
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	200040fc 	.word	0x200040fc

080085bc <decodeWhynter>:
#endif

//+=============================================================================
#if DECODE_WHYNTER
uint8_t decodeWhynter (decode_results *results)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
	long  data   = 0;
 80085c4:	2300      	movs	r3, #0
 80085c6:	617b      	str	r3, [r7, #20]
	int   offset = 1;  // skip initial space
 80085c8:	2301      	movs	r3, #1
 80085ca:	613b      	str	r3, [r7, #16]

	// Check we have the right amount of data
	if (irparams.rawlen < (2 * WHYNTER_BITS) + 6)  return false ;
 80085cc:	4b5d      	ldr	r3, [pc, #372]	; (8008744 <decodeWhynter+0x188>)
 80085ce:	785b      	ldrb	r3, [r3, #1]
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	2b45      	cmp	r3, #69	; 0x45
 80085d4:	d801      	bhi.n	80085da <decodeWhynter+0x1e>
 80085d6:	2300      	movs	r3, #0
 80085d8:	e0af      	b.n	800873a <decodeWhynter+0x17e>

	// Sequence begins with a bit mark and a zero space
	if (!MATCH_MARK (results->rawbuf[offset++], WHYNTER_BIT_MARK  ))  return false ;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68da      	ldr	r2, [r3, #12]
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	1c59      	adds	r1, r3, #1
 80085e2:	6139      	str	r1, [r7, #16]
 80085e4:	005b      	lsls	r3, r3, #1
 80085e6:	4413      	add	r3, r2
 80085e8:	881b      	ldrh	r3, [r3, #0]
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	f240 21ee 	movw	r1, #750	; 0x2ee
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fe fc25 	bl	8006e40 <MATCH_MARK>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <decodeWhynter+0x44>
 80085fc:	2300      	movs	r3, #0
 80085fe:	e09c      	b.n	800873a <decodeWhynter+0x17e>
	if (!MATCH_SPACE(results->rawbuf[offset++], WHYNTER_ZERO_SPACE))  return false ;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68da      	ldr	r2, [r3, #12]
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	1c59      	adds	r1, r3, #1
 8008608:	6139      	str	r1, [r7, #16]
 800860a:	005b      	lsls	r3, r3, #1
 800860c:	4413      	add	r3, r2
 800860e:	881b      	ldrh	r3, [r3, #0]
 8008610:	b29b      	uxth	r3, r3
 8008612:	f240 21ee 	movw	r1, #750	; 0x2ee
 8008616:	4618      	mov	r0, r3
 8008618:	f7fe fc6a 	bl	8006ef0 <MATCH_SPACE>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d101      	bne.n	8008626 <decodeWhynter+0x6a>
 8008622:	2300      	movs	r3, #0
 8008624:	e089      	b.n	800873a <decodeWhynter+0x17e>

	// header mark and space
	if (!MATCH_MARK (results->rawbuf[offset++], WHYNTER_HDR_MARK ))  return false ;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	68da      	ldr	r2, [r3, #12]
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	1c59      	adds	r1, r3, #1
 800862e:	6139      	str	r1, [r7, #16]
 8008630:	005b      	lsls	r3, r3, #1
 8008632:	4413      	add	r3, r2
 8008634:	881b      	ldrh	r3, [r3, #0]
 8008636:	b29b      	uxth	r3, r3
 8008638:	f640 3122 	movw	r1, #2850	; 0xb22
 800863c:	4618      	mov	r0, r3
 800863e:	f7fe fbff 	bl	8006e40 <MATCH_MARK>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d101      	bne.n	800864c <decodeWhynter+0x90>
 8008648:	2300      	movs	r3, #0
 800864a:	e076      	b.n	800873a <decodeWhynter+0x17e>
	if (!MATCH_SPACE(results->rawbuf[offset++], WHYNTER_HDR_SPACE))  return false ;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	68da      	ldr	r2, [r3, #12]
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	1c59      	adds	r1, r3, #1
 8008654:	6139      	str	r1, [r7, #16]
 8008656:	005b      	lsls	r3, r3, #1
 8008658:	4413      	add	r3, r2
 800865a:	881b      	ldrh	r3, [r3, #0]
 800865c:	b29b      	uxth	r3, r3
 800865e:	f640 3122 	movw	r1, #2850	; 0xb22
 8008662:	4618      	mov	r0, r3
 8008664:	f7fe fc44 	bl	8006ef0 <MATCH_SPACE>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d101      	bne.n	8008672 <decodeWhynter+0xb6>
 800866e:	2300      	movs	r3, #0
 8008670:	e063      	b.n	800873a <decodeWhynter+0x17e>

	// data bits
	for (int i = 0;  i < WHYNTER_BITS;  i++) {
 8008672:	2300      	movs	r3, #0
 8008674:	60fb      	str	r3, [r7, #12]
 8008676:	e042      	b.n	80086fe <decodeWhynter+0x142>
		if (!MATCH_MARK(results->rawbuf[offset++], WHYNTER_BIT_MARK))  return false ;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68da      	ldr	r2, [r3, #12]
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	1c59      	adds	r1, r3, #1
 8008680:	6139      	str	r1, [r7, #16]
 8008682:	005b      	lsls	r3, r3, #1
 8008684:	4413      	add	r3, r2
 8008686:	881b      	ldrh	r3, [r3, #0]
 8008688:	b29b      	uxth	r3, r3
 800868a:	f240 21ee 	movw	r1, #750	; 0x2ee
 800868e:	4618      	mov	r0, r3
 8008690:	f7fe fbd6 	bl	8006e40 <MATCH_MARK>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d101      	bne.n	800869e <decodeWhynter+0xe2>
 800869a:	2300      	movs	r3, #0
 800869c:	e04d      	b.n	800873a <decodeWhynter+0x17e>

		if      (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ONE_SPACE ))  data = (data << 1) | 1 ;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68da      	ldr	r2, [r3, #12]
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	005b      	lsls	r3, r3, #1
 80086a6:	4413      	add	r3, r2
 80086a8:	881b      	ldrh	r3, [r3, #0]
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	f640 0166 	movw	r1, #2150	; 0x866
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fe fc1d 	bl	8006ef0 <MATCH_SPACE>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d005      	beq.n	80086c8 <decodeWhynter+0x10c>
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	005b      	lsls	r3, r3, #1
 80086c0:	f043 0301 	orr.w	r3, r3, #1
 80086c4:	617b      	str	r3, [r7, #20]
 80086c6:	e014      	b.n	80086f2 <decodeWhynter+0x136>
		else if (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ZERO_SPACE))  data = (data << 1) | 0 ;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68da      	ldr	r2, [r3, #12]
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	005b      	lsls	r3, r3, #1
 80086d0:	4413      	add	r3, r2
 80086d2:	881b      	ldrh	r3, [r3, #0]
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	f240 21ee 	movw	r1, #750	; 0x2ee
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fe fc08 	bl	8006ef0 <MATCH_SPACE>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d003      	beq.n	80086ee <decodeWhynter+0x132>
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	005b      	lsls	r3, r3, #1
 80086ea:	617b      	str	r3, [r7, #20]
 80086ec:	e001      	b.n	80086f2 <decodeWhynter+0x136>
		else                                                                return false ;
 80086ee:	2300      	movs	r3, #0
 80086f0:	e023      	b.n	800873a <decodeWhynter+0x17e>
		offset++;
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	3301      	adds	r3, #1
 80086f6:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < WHYNTER_BITS;  i++) {
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	3301      	adds	r3, #1
 80086fc:	60fb      	str	r3, [r7, #12]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2b1f      	cmp	r3, #31
 8008702:	ddb9      	ble.n	8008678 <decodeWhynter+0xbc>
	}

	// trailing mark
	if (!MATCH_MARK(results->rawbuf[offset], WHYNTER_BIT_MARK))  return false ;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	68da      	ldr	r2, [r3, #12]
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	005b      	lsls	r3, r3, #1
 800870c:	4413      	add	r3, r2
 800870e:	881b      	ldrh	r3, [r3, #0]
 8008710:	b29b      	uxth	r3, r3
 8008712:	f240 21ee 	movw	r1, #750	; 0x2ee
 8008716:	4618      	mov	r0, r3
 8008718:	f7fe fb92 	bl	8006e40 <MATCH_MARK>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d101      	bne.n	8008726 <decodeWhynter+0x16a>
 8008722:	2300      	movs	r3, #0
 8008724:	e009      	b.n	800873a <decodeWhynter+0x17e>

	// Success
	results->bits = WHYNTER_BITS;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2220      	movs	r2, #32
 800872a:	811a      	strh	r2, [r3, #8]
	results->value = data;
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	605a      	str	r2, [r3, #4]
	results->decode_type = WHYNTER;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2208      	movs	r2, #8
 8008736:	701a      	strb	r2, [r3, #0]
	return true;
 8008738:	2301      	movs	r3, #1
}
 800873a:	4618      	mov	r0, r3
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	200040fc 	.word	0x200040fc

08008748 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8008750:	1d39      	adds	r1, r7, #4
 8008752:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008756:	2201      	movs	r2, #1
 8008758:	4803      	ldr	r0, [pc, #12]	; (8008768 <__io_putchar+0x20>)
 800875a:	f7fc fb12 	bl	8004d82 <HAL_UART_Transmit>

  return ch;
 800875e:	687b      	ldr	r3, [r7, #4]
}
 8008760:	4618      	mov	r0, r3
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	200050d4 	.word	0x200050d4

0800876c <Control_IR>:
	hum = (float)(humidity/1000.0f);
	tmpInthu1 = (int) hum;
	float tmpH = hum - tmpInthu1;
	tmpInthu2 = trunc(tmpH * 100);
}
void Control_IR(void){
 800876c:	b580      	push	{r7, lr}
 800876e:	af00      	add	r7, sp, #0

	 if (SwitchIR == 1 && flagSW == 1){
 8008770:	4b6d      	ldr	r3, [pc, #436]	; (8008928 <Control_IR+0x1bc>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d110      	bne.n	800879a <Control_IR+0x2e>
 8008778:	4b6c      	ldr	r3, [pc, #432]	; (800892c <Control_IR+0x1c0>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d10c      	bne.n	800879a <Control_IR+0x2e>
			  power = Power_On;
 8008780:	4b6b      	ldr	r3, [pc, #428]	; (8008930 <Control_IR+0x1c4>)
 8008782:	2201      	movs	r2, #1
 8008784:	601a      	str	r2, [r3, #0]
			  speed = med;
 8008786:	4b6b      	ldr	r3, [pc, #428]	; (8008934 <Control_IR+0x1c8>)
 8008788:	2202      	movs	r2, #2
 800878a:	601a      	str	r2, [r3, #0]
			  //fan_12_run(medspeed);
			  xiaomi_fan_run(MED_SPEED);
 800878c:	2002      	movs	r0, #2
 800878e:	f7fe fe1f 	bl	80073d0 <xiaomi_fan_run>
			  flagSW = 0;
 8008792:	4b66      	ldr	r3, [pc, #408]	; (800892c <Control_IR+0x1c0>)
 8008794:	2200      	movs	r2, #0
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	e012      	b.n	80087c0 <Control_IR+0x54>
		  }
		  else if (SwitchIR == 2 && flagSW == 1) {
 800879a:	4b63      	ldr	r3, [pc, #396]	; (8008928 <Control_IR+0x1bc>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d10e      	bne.n	80087c0 <Control_IR+0x54>
 80087a2:	4b62      	ldr	r3, [pc, #392]	; (800892c <Control_IR+0x1c0>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d10a      	bne.n	80087c0 <Control_IR+0x54>
			  power = Power_Off;
 80087aa:	4b61      	ldr	r3, [pc, #388]	; (8008930 <Control_IR+0x1c4>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]
			  speed = Power_Off;
 80087b0:	4b60      	ldr	r3, [pc, #384]	; (8008934 <Control_IR+0x1c8>)
 80087b2:	2200      	movs	r2, #0
 80087b4:	601a      	str	r2, [r3, #0]
			  //fan_1_stop();
			  //fan_2_stop();
			  xiaomi_fan_stop();
 80087b6:	f7fe fe3d 	bl	8007434 <xiaomi_fan_stop>
			  flagSW = 0;
 80087ba:	4b5c      	ldr	r3, [pc, #368]	; (800892c <Control_IR+0x1c0>)
 80087bc:	2200      	movs	r2, #0
 80087be:	601a      	str	r2, [r3, #0]
		  }
		  if (SpeedIR == 1 && flagSP == 1 && SwitchIR == 1){
 80087c0:	4b5d      	ldr	r3, [pc, #372]	; (8008938 <Control_IR+0x1cc>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d10e      	bne.n	80087e6 <Control_IR+0x7a>
 80087c8:	4b5c      	ldr	r3, [pc, #368]	; (800893c <Control_IR+0x1d0>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d10a      	bne.n	80087e6 <Control_IR+0x7a>
 80087d0:	4b55      	ldr	r3, [pc, #340]	; (8008928 <Control_IR+0x1bc>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d106      	bne.n	80087e6 <Control_IR+0x7a>
			  //fan_12_run(lowspeed);
			  xiaomi_fan_run(LOW_SPEED);
 80087d8:	2001      	movs	r0, #1
 80087da:	f7fe fdf9 	bl	80073d0 <xiaomi_fan_run>
			  flagSP = 0;
 80087de:	4b57      	ldr	r3, [pc, #348]	; (800893c <Control_IR+0x1d0>)
 80087e0:	2200      	movs	r2, #0
 80087e2:	601a      	str	r2, [r3, #0]
 80087e4:	e024      	b.n	8008830 <Control_IR+0xc4>
		  }
		  else if (SpeedIR == 2 && flagSP == 1 && SwitchIR == 1){
 80087e6:	4b54      	ldr	r3, [pc, #336]	; (8008938 <Control_IR+0x1cc>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d10e      	bne.n	800880c <Control_IR+0xa0>
 80087ee:	4b53      	ldr	r3, [pc, #332]	; (800893c <Control_IR+0x1d0>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d10a      	bne.n	800880c <Control_IR+0xa0>
 80087f6:	4b4c      	ldr	r3, [pc, #304]	; (8008928 <Control_IR+0x1bc>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d106      	bne.n	800880c <Control_IR+0xa0>
			  //fan_12_run(medspeed);
			  xiaomi_fan_run(MED_SPEED);
 80087fe:	2002      	movs	r0, #2
 8008800:	f7fe fde6 	bl	80073d0 <xiaomi_fan_run>
			  flagSP = 0;
 8008804:	4b4d      	ldr	r3, [pc, #308]	; (800893c <Control_IR+0x1d0>)
 8008806:	2200      	movs	r2, #0
 8008808:	601a      	str	r2, [r3, #0]
 800880a:	e011      	b.n	8008830 <Control_IR+0xc4>
		  }
		  else if (SpeedIR == 3 && flagSP == 1 && SwitchIR == 1){
 800880c:	4b4a      	ldr	r3, [pc, #296]	; (8008938 <Control_IR+0x1cc>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b03      	cmp	r3, #3
 8008812:	d10d      	bne.n	8008830 <Control_IR+0xc4>
 8008814:	4b49      	ldr	r3, [pc, #292]	; (800893c <Control_IR+0x1d0>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d109      	bne.n	8008830 <Control_IR+0xc4>
 800881c:	4b42      	ldr	r3, [pc, #264]	; (8008928 <Control_IR+0x1bc>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d105      	bne.n	8008830 <Control_IR+0xc4>
			 //fan_12_run(hightspeed);
			  xiaomi_fan_run(HIGH_SPEED);
 8008824:	2003      	movs	r0, #3
 8008826:	f7fe fdd3 	bl	80073d0 <xiaomi_fan_run>
			  flagSP = 0;
 800882a:	4b44      	ldr	r3, [pc, #272]	; (800893c <Control_IR+0x1d0>)
 800882c:	2200      	movs	r2, #0
 800882e:	601a      	str	r2, [r3, #0]
		  }
		  if (ModeIR == 1 && flagMode == 1 && SwitchIR == 1){
 8008830:	4b43      	ldr	r3, [pc, #268]	; (8008940 <Control_IR+0x1d4>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d114      	bne.n	8008862 <Control_IR+0xf6>
 8008838:	4b42      	ldr	r3, [pc, #264]	; (8008944 <Control_IR+0x1d8>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d110      	bne.n	8008862 <Control_IR+0xf6>
 8008840:	4b39      	ldr	r3, [pc, #228]	; (8008928 <Control_IR+0x1bc>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d10c      	bne.n	8008862 <Control_IR+0xf6>
			  filter_mode = Fresh_Air;
 8008848:	4b3f      	ldr	r3, [pc, #252]	; (8008948 <Control_IR+0x1dc>)
 800884a:	2201      	movs	r2, #1
 800884c:	601a      	str	r2, [r3, #0]
			  Vanst = 1;
 800884e:	4b3f      	ldr	r3, [pc, #252]	; (800894c <Control_IR+0x1e0>)
 8008850:	2201      	movs	r2, #1
 8008852:	601a      	str	r2, [r3, #0]
			  night_mode = Nightmode_Off;
 8008854:	4b3e      	ldr	r3, [pc, #248]	; (8008950 <Control_IR+0x1e4>)
 8008856:	2200      	movs	r2, #0
 8008858:	601a      	str	r2, [r3, #0]
			  flagMode = 0;
 800885a:	4b3a      	ldr	r3, [pc, #232]	; (8008944 <Control_IR+0x1d8>)
 800885c:	2200      	movs	r2, #0
 800885e:	601a      	str	r2, [r3, #0]
 8008860:	e030      	b.n	80088c4 <Control_IR+0x158>
		  }
		  else if (ModeIR == 2 && flagMode == 1 && SwitchIR == 1){
 8008862:	4b37      	ldr	r3, [pc, #220]	; (8008940 <Control_IR+0x1d4>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2b02      	cmp	r3, #2
 8008868:	d114      	bne.n	8008894 <Control_IR+0x128>
 800886a:	4b36      	ldr	r3, [pc, #216]	; (8008944 <Control_IR+0x1d8>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2b01      	cmp	r3, #1
 8008870:	d110      	bne.n	8008894 <Control_IR+0x128>
 8008872:	4b2d      	ldr	r3, [pc, #180]	; (8008928 <Control_IR+0x1bc>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d10c      	bne.n	8008894 <Control_IR+0x128>
			  filter_mode = Indoor;
 800887a:	4b33      	ldr	r3, [pc, #204]	; (8008948 <Control_IR+0x1dc>)
 800887c:	2200      	movs	r2, #0
 800887e:	601a      	str	r2, [r3, #0]
			  Vanst = 0;
 8008880:	4b32      	ldr	r3, [pc, #200]	; (800894c <Control_IR+0x1e0>)
 8008882:	2200      	movs	r2, #0
 8008884:	601a      	str	r2, [r3, #0]
			  night_mode = Nightmode_Off;
 8008886:	4b32      	ldr	r3, [pc, #200]	; (8008950 <Control_IR+0x1e4>)
 8008888:	2200      	movs	r2, #0
 800888a:	601a      	str	r2, [r3, #0]
			  flagMode = 0;
 800888c:	4b2d      	ldr	r3, [pc, #180]	; (8008944 <Control_IR+0x1d8>)
 800888e:	2200      	movs	r2, #0
 8008890:	601a      	str	r2, [r3, #0]
 8008892:	e017      	b.n	80088c4 <Control_IR+0x158>
		  }
		  else if (ModeIR == 3 && flagMode == 1 && SwitchIR == 1){
 8008894:	4b2a      	ldr	r3, [pc, #168]	; (8008940 <Control_IR+0x1d4>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b03      	cmp	r3, #3
 800889a:	d113      	bne.n	80088c4 <Control_IR+0x158>
 800889c:	4b29      	ldr	r3, [pc, #164]	; (8008944 <Control_IR+0x1d8>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d10f      	bne.n	80088c4 <Control_IR+0x158>
 80088a4:	4b20      	ldr	r3, [pc, #128]	; (8008928 <Control_IR+0x1bc>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d10b      	bne.n	80088c4 <Control_IR+0x158>
			  speed = low;
 80088ac:	4b21      	ldr	r3, [pc, #132]	; (8008934 <Control_IR+0x1c8>)
 80088ae:	2201      	movs	r2, #1
 80088b0:	601a      	str	r2, [r3, #0]
			  //fan_12_run(lowspeed);
			  xiaomi_fan_run(LOW_SPEED);
 80088b2:	2001      	movs	r0, #1
 80088b4:	f7fe fd8c 	bl	80073d0 <xiaomi_fan_run>
			  night_mode = Nightmode_On;
 80088b8:	4b25      	ldr	r3, [pc, #148]	; (8008950 <Control_IR+0x1e4>)
 80088ba:	2201      	movs	r2, #1
 80088bc:	601a      	str	r2, [r3, #0]
			  flagMode = 0;
 80088be:	4b21      	ldr	r3, [pc, #132]	; (8008944 <Control_IR+0x1d8>)
 80088c0:	2200      	movs	r2, #0
 80088c2:	601a      	str	r2, [r3, #0]

		  }
		  if (IonIR == 1 && flagIon == 1 && SwitchIR == 1){
 80088c4:	4b23      	ldr	r3, [pc, #140]	; (8008954 <Control_IR+0x1e8>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d113      	bne.n	80088f4 <Control_IR+0x188>
 80088cc:	4b22      	ldr	r3, [pc, #136]	; (8008958 <Control_IR+0x1ec>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d10f      	bne.n	80088f4 <Control_IR+0x188>
 80088d4:	4b14      	ldr	r3, [pc, #80]	; (8008928 <Control_IR+0x1bc>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d10b      	bne.n	80088f4 <Control_IR+0x188>
			  ION_mode = IONon;
 80088dc:	4b1f      	ldr	r3, [pc, #124]	; (800895c <Control_IR+0x1f0>)
 80088de:	2201      	movs	r2, #1
 80088e0:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(Ion_GPIO_Port, Ion_Pin, GPIO_PIN_SET);
 80088e2:	2201      	movs	r2, #1
 80088e4:	2102      	movs	r1, #2
 80088e6:	481e      	ldr	r0, [pc, #120]	; (8008960 <Control_IR+0x1f4>)
 80088e8:	f7f8 fed0 	bl	800168c <HAL_GPIO_WritePin>
			  flagIon = 0;
 80088ec:	4b1a      	ldr	r3, [pc, #104]	; (8008958 <Control_IR+0x1ec>)
 80088ee:	2200      	movs	r2, #0
 80088f0:	601a      	str	r2, [r3, #0]
		  else if (IonIR == 2 && flagIon == 1 && SwitchIR == 1) {
			  ION_mode = IONoff;
			  HAL_GPIO_WritePin(Ion_GPIO_Port, Ion_Pin, GPIO_PIN_RESET);
			  flagIon = 0;
		  }
}
 80088f2:	e016      	b.n	8008922 <Control_IR+0x1b6>
		  else if (IonIR == 2 && flagIon == 1 && SwitchIR == 1) {
 80088f4:	4b17      	ldr	r3, [pc, #92]	; (8008954 <Control_IR+0x1e8>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d112      	bne.n	8008922 <Control_IR+0x1b6>
 80088fc:	4b16      	ldr	r3, [pc, #88]	; (8008958 <Control_IR+0x1ec>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d10e      	bne.n	8008922 <Control_IR+0x1b6>
 8008904:	4b08      	ldr	r3, [pc, #32]	; (8008928 <Control_IR+0x1bc>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d10a      	bne.n	8008922 <Control_IR+0x1b6>
			  ION_mode = IONoff;
 800890c:	4b13      	ldr	r3, [pc, #76]	; (800895c <Control_IR+0x1f0>)
 800890e:	2200      	movs	r2, #0
 8008910:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(Ion_GPIO_Port, Ion_Pin, GPIO_PIN_RESET);
 8008912:	2200      	movs	r2, #0
 8008914:	2102      	movs	r1, #2
 8008916:	4812      	ldr	r0, [pc, #72]	; (8008960 <Control_IR+0x1f4>)
 8008918:	f7f8 feb8 	bl	800168c <HAL_GPIO_WritePin>
			  flagIon = 0;
 800891c:	4b0e      	ldr	r3, [pc, #56]	; (8008958 <Control_IR+0x1ec>)
 800891e:	2200      	movs	r2, #0
 8008920:	601a      	str	r2, [r3, #0]
}
 8008922:	bf00      	nop
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20004fb8 	.word	0x20004fb8
 800892c:	20004e50 	.word	0x20004e50
 8008930:	20004d94 	.word	0x20004d94
 8008934:	2000507c 	.word	0x2000507c
 8008938:	20005374 	.word	0x20005374
 800893c:	20004fa8 	.word	0x20004fa8
 8008940:	20004ee4 	.word	0x20004ee4
 8008944:	20004e54 	.word	0x20004e54
 8008948:	20004e44 	.word	0x20004e44
 800894c:	200040e4 	.word	0x200040e4
 8008950:	20004fc0 	.word	0x20004fc0
 8008954:	20004e48 	.word	0x20004e48
 8008958:	20004d98 	.word	0x20004d98
 800895c:	20004f64 	.word	0x20004f64
 8008960:	40020800 	.word	0x40020800

08008964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008964:	b5b0      	push	{r4, r5, r7, lr}
 8008966:	b09c      	sub	sp, #112	; 0x70
 8008968:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800896a:	f7f8 fa8f 	bl	8000e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800896e:	f000 f8bb 	bl	8008ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008972:	f000 fbeb 	bl	800914c <MX_GPIO_Init>
  MX_I2C1_Init();
 8008976:	f000 f921 	bl	8008bbc <MX_I2C1_Init>
  MX_I2C2_Init();
 800897a:	f000 f94d 	bl	8008c18 <MX_I2C2_Init>
  MX_SPI2_Init();
 800897e:	f000 f979 	bl	8008c74 <MX_SPI2_Init>
  MX_SPI3_Init();
 8008982:	f000 f9ad 	bl	8008ce0 <MX_SPI3_Init>
  MX_TIM1_Init();
 8008986:	f000 f9e1 	bl	8008d4c <MX_TIM1_Init>
  MX_TIM2_Init();
 800898a:	f000 faa1 	bl	8008ed0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800898e:	f000 fb13 	bl	8008fb8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8008992:	f000 fb5d 	bl	8009050 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8008996:	f000 fb85 	bl	80090a4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800899a:	f000 fbad 	bl	80090f8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  //khởi tạo kết nối cho IR
  my_enableIRIn();
 800899e:	f7fe fb95 	bl	80070cc <my_enableIRIn>
  printf("test\r\n");
 80089a2:	483e      	ldr	r0, [pc, #248]	; (8008a9c <main+0x138>)
 80089a4:	f002 f9e8 	bl	800ad78 <puts>
   //SM_UART_04L_Init(&huart6);
   //err = sgp30_iaq_init();
   //startToRevSM04L();

  // Khởi tạo PWM cho quạt
  	 fan_init();
 80089a8:	f7fe fc7e 	bl	80072a8 <fan_init>
  	 //initMQTT();



  // Khởi tạo chế độ ban đầu cho hệ thống, ở đây sau này là lấy các biến lưu trong EEPROM
  night_mode = Nightmode_Off;
 80089ac:	4b3c      	ldr	r3, [pc, #240]	; (8008aa0 <main+0x13c>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]
  speed = low;
 80089b2:	4b3c      	ldr	r3, [pc, #240]	; (8008aa4 <main+0x140>)
 80089b4:	2201      	movs	r2, #1
 80089b6:	601a      	str	r2, [r3, #0]
  power = Power_On;
 80089b8:	4b3b      	ldr	r3, [pc, #236]	; (8008aa8 <main+0x144>)
 80089ba:	2201      	movs	r2, #1
 80089bc:	601a      	str	r2, [r3, #0]
  control_mode = Manual;
 80089be:	4b3b      	ldr	r3, [pc, #236]	; (8008aac <main+0x148>)
 80089c0:	2201      	movs	r2, #1
 80089c2:	601a      	str	r2, [r3, #0]
  filter_mode = Fresh_Air;
 80089c4:	4b3a      	ldr	r3, [pc, #232]	; (8008ab0 <main+0x14c>)
 80089c6:	2201      	movs	r2, #1
 80089c8:	601a      	str	r2, [r3, #0]
  UV_mode = UVon;
 80089ca:	4b3a      	ldr	r3, [pc, #232]	; (8008ab4 <main+0x150>)
 80089cc:	2201      	movs	r2, #1
 80089ce:	601a      	str	r2, [r3, #0]
  ION_mode = IONoff;
 80089d0:	4b39      	ldr	r3, [pc, #228]	; (8008ab8 <main+0x154>)
 80089d2:	2200      	movs	r2, #0
 80089d4:	601a      	str	r2, [r3, #0]
  ion_val = 0;
 80089d6:	4b39      	ldr	r3, [pc, #228]	; (8008abc <main+0x158>)
 80089d8:	2200      	movs	r2, #0
 80089da:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(UV_GPIO_Port, UV_Pin, GPIO_PIN_SET);
 80089dc:	2201      	movs	r2, #1
 80089de:	2101      	movs	r1, #1
 80089e0:	4837      	ldr	r0, [pc, #220]	; (8008ac0 <main+0x15c>)
 80089e2:	f7f8 fe53 	bl	800168c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Ion_GPIO_Port, Ion_Pin, GPIO_PIN_RESET);
 80089e6:	2200      	movs	r2, #0
 80089e8:	2102      	movs	r1, #2
 80089ea:	4835      	ldr	r0, [pc, #212]	; (8008ac0 <main+0x15c>)
 80089ec:	f7f8 fe4e 	bl	800168c <HAL_GPIO_WritePin>
  //fan_12_run(lowspeed);
  xiaomi_fan_run(LOW_SPEED);
 80089f0:	2001      	movs	r0, #1
 80089f2:	f7fe fced 	bl	80073d0 <xiaomi_fan_run>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of SensorTask */
  osThreadDef(SensorTask, StartSensor_Task, osPriorityAboveNormal, 0, 128);
 80089f6:	4b33      	ldr	r3, [pc, #204]	; (8008ac4 <main+0x160>)
 80089f8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80089fc:	461d      	mov	r5, r3
 80089fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008a06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 8008a0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008a0e:	2100      	movs	r1, #0
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7fc fefe 	bl	8005812 <osThreadCreate>
 8008a16:	4602      	mov	r2, r0
 8008a18:	4b2b      	ldr	r3, [pc, #172]	; (8008ac8 <main+0x164>)
 8008a1a:	601a      	str	r2, [r3, #0]

  /* definition and creation of ControlTask */
  osThreadDef(ControlTask, StartControl_Task, osPriorityNormal, 0, 128);
 8008a1c:	4b2b      	ldr	r3, [pc, #172]	; (8008acc <main+0x168>)
 8008a1e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8008a22:	461d      	mov	r5, r3
 8008a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008a2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlTaskHandle = osThreadCreate(osThread(ControlTask), NULL);
 8008a30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008a34:	2100      	movs	r1, #0
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7fc feeb 	bl	8005812 <osThreadCreate>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	4b24      	ldr	r3, [pc, #144]	; (8008ad0 <main+0x16c>)
 8008a40:	601a      	str	r2, [r3, #0]

  /* definition and creation of DisplayTask */
  osThreadDef(DisplayTask, StartDisplay_task, osPriorityBelowNormal, 0, 128);
 8008a42:	4b24      	ldr	r3, [pc, #144]	; (8008ad4 <main+0x170>)
 8008a44:	f107 041c 	add.w	r4, r7, #28
 8008a48:	461d      	mov	r5, r3
 8008a4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008a52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DisplayTaskHandle = osThreadCreate(osThread(DisplayTask), NULL);
 8008a56:	f107 031c 	add.w	r3, r7, #28
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7fc fed8 	bl	8005812 <osThreadCreate>
 8008a62:	4602      	mov	r2, r0
 8008a64:	4b1c      	ldr	r3, [pc, #112]	; (8008ad8 <main+0x174>)
 8008a66:	601a      	str	r2, [r3, #0]

  /* definition and creation of ServerTask */
  osThreadDef(ServerTask, StartServer_task, osPriorityAboveNormal, 0, 128);
 8008a68:	4b1c      	ldr	r3, [pc, #112]	; (8008adc <main+0x178>)
 8008a6a:	463c      	mov	r4, r7
 8008a6c:	461d      	mov	r5, r3
 8008a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008a76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ServerTaskHandle = osThreadCreate(osThread(ServerTask), NULL);
 8008a7a:	463b      	mov	r3, r7
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fc fec7 	bl	8005812 <osThreadCreate>
 8008a84:	4602      	mov	r2, r0
 8008a86:	4b16      	ldr	r3, [pc, #88]	; (8008ae0 <main+0x17c>)
 8008a88:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8008a8a:	f7fc febb 	bl	8005804 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		  MQTTYield(&client, 500);
 8008a8e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008a92:	4814      	ldr	r0, [pc, #80]	; (8008ae4 <main+0x180>)
 8008a94:	f001 fdb6 	bl	800a604 <MQTTYield>
 8008a98:	e7f9      	b.n	8008a8e <main+0x12a>
 8008a9a:	bf00      	nop
 8008a9c:	0800c1d4 	.word	0x0800c1d4
 8008aa0:	20004fc0 	.word	0x20004fc0
 8008aa4:	2000507c 	.word	0x2000507c
 8008aa8:	20004d94 	.word	0x20004d94
 8008aac:	20005350 	.word	0x20005350
 8008ab0:	20004e44 	.word	0x20004e44
 8008ab4:	20005148 	.word	0x20005148
 8008ab8:	20004f64 	.word	0x20004f64
 8008abc:	20004e4c 	.word	0x20004e4c
 8008ac0:	40020800 	.word	0x40020800
 8008ac4:	0800c1e8 	.word	0x0800c1e8
 8008ac8:	20004528 	.word	0x20004528
 8008acc:	0800c210 	.word	0x0800c210
 8008ad0:	2000534c 	.word	0x2000534c
 8008ad4:	0800c238 	.word	0x0800c238
 8008ad8:	20005034 	.word	0x20005034
 8008adc:	0800c260 	.word	0x0800c260
 8008ae0:	20005038 	.word	0x20005038
 8008ae4:	20004080 	.word	0x20004080

08008ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b094      	sub	sp, #80	; 0x50
 8008aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008aee:	f107 0320 	add.w	r3, r7, #32
 8008af2:	2230      	movs	r2, #48	; 0x30
 8008af4:	2100      	movs	r1, #0
 8008af6:	4618      	mov	r0, r3
 8008af8:	f002 f8d9 	bl	800acae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008afc:	f107 030c 	add.w	r3, r7, #12
 8008b00:	2200      	movs	r2, #0
 8008b02:	601a      	str	r2, [r3, #0]
 8008b04:	605a      	str	r2, [r3, #4]
 8008b06:	609a      	str	r2, [r3, #8]
 8008b08:	60da      	str	r2, [r3, #12]
 8008b0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	60bb      	str	r3, [r7, #8]
 8008b10:	4b28      	ldr	r3, [pc, #160]	; (8008bb4 <SystemClock_Config+0xcc>)
 8008b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b14:	4a27      	ldr	r2, [pc, #156]	; (8008bb4 <SystemClock_Config+0xcc>)
 8008b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8008b1c:	4b25      	ldr	r3, [pc, #148]	; (8008bb4 <SystemClock_Config+0xcc>)
 8008b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b24:	60bb      	str	r3, [r7, #8]
 8008b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008b28:	2300      	movs	r3, #0
 8008b2a:	607b      	str	r3, [r7, #4]
 8008b2c:	4b22      	ldr	r3, [pc, #136]	; (8008bb8 <SystemClock_Config+0xd0>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a21      	ldr	r2, [pc, #132]	; (8008bb8 <SystemClock_Config+0xd0>)
 8008b32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	4b1f      	ldr	r3, [pc, #124]	; (8008bb8 <SystemClock_Config+0xd0>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008b40:	607b      	str	r3, [r7, #4]
 8008b42:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008b44:	2302      	movs	r3, #2
 8008b46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008b4c:	2310      	movs	r3, #16
 8008b4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008b50:	2302      	movs	r3, #2
 8008b52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008b54:	2300      	movs	r3, #0
 8008b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8008b58:	2310      	movs	r3, #16
 8008b5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8008b5c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8008b60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8008b62:	2304      	movs	r3, #4
 8008b64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8008b66:	2304      	movs	r3, #4
 8008b68:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008b6a:	f107 0320 	add.w	r3, r7, #32
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7fa faba 	bl	80030e8 <HAL_RCC_OscConfig>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8008b7a:	f000 fc9b 	bl	80094b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008b7e:	230f      	movs	r3, #15
 8008b80:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008b82:	2302      	movs	r3, #2
 8008b84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008b86:	2300      	movs	r3, #0
 8008b88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8008b8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008b8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8008b90:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008b94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008b96:	f107 030c 	add.w	r3, r7, #12
 8008b9a:	2102      	movs	r1, #2
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fa fce5 	bl	800356c <HAL_RCC_ClockConfig>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8008ba8:	f000 fc84 	bl	80094b4 <Error_Handler>
  }
}
 8008bac:	bf00      	nop
 8008bae:	3750      	adds	r7, #80	; 0x50
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	40023800 	.word	0x40023800
 8008bb8:	40007000 	.word	0x40007000

08008bbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008bc0:	4b12      	ldr	r3, [pc, #72]	; (8008c0c <MX_I2C1_Init+0x50>)
 8008bc2:	4a13      	ldr	r2, [pc, #76]	; (8008c10 <MX_I2C1_Init+0x54>)
 8008bc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8008bc6:	4b11      	ldr	r3, [pc, #68]	; (8008c0c <MX_I2C1_Init+0x50>)
 8008bc8:	4a12      	ldr	r2, [pc, #72]	; (8008c14 <MX_I2C1_Init+0x58>)
 8008bca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008bcc:	4b0f      	ldr	r3, [pc, #60]	; (8008c0c <MX_I2C1_Init+0x50>)
 8008bce:	2200      	movs	r2, #0
 8008bd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008bd2:	4b0e      	ldr	r3, [pc, #56]	; (8008c0c <MX_I2C1_Init+0x50>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008bd8:	4b0c      	ldr	r3, [pc, #48]	; (8008c0c <MX_I2C1_Init+0x50>)
 8008bda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008bde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008be0:	4b0a      	ldr	r3, [pc, #40]	; (8008c0c <MX_I2C1_Init+0x50>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008be6:	4b09      	ldr	r3, [pc, #36]	; (8008c0c <MX_I2C1_Init+0x50>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008bec:	4b07      	ldr	r3, [pc, #28]	; (8008c0c <MX_I2C1_Init+0x50>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008bf2:	4b06      	ldr	r3, [pc, #24]	; (8008c0c <MX_I2C1_Init+0x50>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008bf8:	4804      	ldr	r0, [pc, #16]	; (8008c0c <MX_I2C1_Init+0x50>)
 8008bfa:	f7f8 fd7b 	bl	80016f4 <HAL_I2C_Init>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008c04:	f000 fc56 	bl	80094b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008c08:	bf00      	nop
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	20004d9c 	.word	0x20004d9c
 8008c10:	40005400 	.word	0x40005400
 8008c14:	000186a0 	.word	0x000186a0

08008c18 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8008c1c:	4b12      	ldr	r3, [pc, #72]	; (8008c68 <MX_I2C2_Init+0x50>)
 8008c1e:	4a13      	ldr	r2, [pc, #76]	; (8008c6c <MX_I2C2_Init+0x54>)
 8008c20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8008c22:	4b11      	ldr	r3, [pc, #68]	; (8008c68 <MX_I2C2_Init+0x50>)
 8008c24:	4a12      	ldr	r2, [pc, #72]	; (8008c70 <MX_I2C2_Init+0x58>)
 8008c26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008c28:	4b0f      	ldr	r3, [pc, #60]	; (8008c68 <MX_I2C2_Init+0x50>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8008c2e:	4b0e      	ldr	r3, [pc, #56]	; (8008c68 <MX_I2C2_Init+0x50>)
 8008c30:	2200      	movs	r2, #0
 8008c32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008c34:	4b0c      	ldr	r3, [pc, #48]	; (8008c68 <MX_I2C2_Init+0x50>)
 8008c36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008c3a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008c3c:	4b0a      	ldr	r3, [pc, #40]	; (8008c68 <MX_I2C2_Init+0x50>)
 8008c3e:	2200      	movs	r2, #0
 8008c40:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8008c42:	4b09      	ldr	r3, [pc, #36]	; (8008c68 <MX_I2C2_Init+0x50>)
 8008c44:	2200      	movs	r2, #0
 8008c46:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008c48:	4b07      	ldr	r3, [pc, #28]	; (8008c68 <MX_I2C2_Init+0x50>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008c4e:	4b06      	ldr	r3, [pc, #24]	; (8008c68 <MX_I2C2_Init+0x50>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008c54:	4804      	ldr	r0, [pc, #16]	; (8008c68 <MX_I2C2_Init+0x50>)
 8008c56:	f7f8 fd4d 	bl	80016f4 <HAL_I2C_Init>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8008c60:	f000 fc28 	bl	80094b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8008c64:	bf00      	nop
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	20004df0 	.word	0x20004df0
 8008c6c:	40005800 	.word	0x40005800
 8008c70:	000186a0 	.word	0x000186a0

08008c74 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8008c78:	4b17      	ldr	r3, [pc, #92]	; (8008cd8 <MX_SPI2_Init+0x64>)
 8008c7a:	4a18      	ldr	r2, [pc, #96]	; (8008cdc <MX_SPI2_Init+0x68>)
 8008c7c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008c7e:	4b16      	ldr	r3, [pc, #88]	; (8008cd8 <MX_SPI2_Init+0x64>)
 8008c80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008c84:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008c86:	4b14      	ldr	r3, [pc, #80]	; (8008cd8 <MX_SPI2_Init+0x64>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008c8c:	4b12      	ldr	r3, [pc, #72]	; (8008cd8 <MX_SPI2_Init+0x64>)
 8008c8e:	2200      	movs	r2, #0
 8008c90:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c92:	4b11      	ldr	r3, [pc, #68]	; (8008cd8 <MX_SPI2_Init+0x64>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008c98:	4b0f      	ldr	r3, [pc, #60]	; (8008cd8 <MX_SPI2_Init+0x64>)
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8008c9e:	4b0e      	ldr	r3, [pc, #56]	; (8008cd8 <MX_SPI2_Init+0x64>)
 8008ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ca4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ca6:	4b0c      	ldr	r3, [pc, #48]	; (8008cd8 <MX_SPI2_Init+0x64>)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008cac:	4b0a      	ldr	r3, [pc, #40]	; (8008cd8 <MX_SPI2_Init+0x64>)
 8008cae:	2200      	movs	r2, #0
 8008cb0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008cb2:	4b09      	ldr	r3, [pc, #36]	; (8008cd8 <MX_SPI2_Init+0x64>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008cb8:	4b07      	ldr	r3, [pc, #28]	; (8008cd8 <MX_SPI2_Init+0x64>)
 8008cba:	2200      	movs	r2, #0
 8008cbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8008cbe:	4b06      	ldr	r3, [pc, #24]	; (8008cd8 <MX_SPI2_Init+0x64>)
 8008cc0:	220a      	movs	r2, #10
 8008cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008cc4:	4804      	ldr	r0, [pc, #16]	; (8008cd8 <MX_SPI2_Init+0x64>)
 8008cc6:	f7fa fe4b 	bl	8003960 <HAL_SPI_Init>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8008cd0:	f000 fbf0 	bl	80094b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8008cd4:	bf00      	nop
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	20004d3c 	.word	0x20004d3c
 8008cdc:	40003800 	.word	0x40003800

08008ce0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8008ce4:	4b17      	ldr	r3, [pc, #92]	; (8008d44 <MX_SPI3_Init+0x64>)
 8008ce6:	4a18      	ldr	r2, [pc, #96]	; (8008d48 <MX_SPI3_Init+0x68>)
 8008ce8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008cea:	4b16      	ldr	r3, [pc, #88]	; (8008d44 <MX_SPI3_Init+0x64>)
 8008cec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008cf0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008cf2:	4b14      	ldr	r3, [pc, #80]	; (8008d44 <MX_SPI3_Init+0x64>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008cf8:	4b12      	ldr	r3, [pc, #72]	; (8008d44 <MX_SPI3_Init+0x64>)
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008cfe:	4b11      	ldr	r3, [pc, #68]	; (8008d44 <MX_SPI3_Init+0x64>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008d04:	4b0f      	ldr	r3, [pc, #60]	; (8008d44 <MX_SPI3_Init+0x64>)
 8008d06:	2200      	movs	r2, #0
 8008d08:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008d0a:	4b0e      	ldr	r3, [pc, #56]	; (8008d44 <MX_SPI3_Init+0x64>)
 8008d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d10:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008d12:	4b0c      	ldr	r3, [pc, #48]	; (8008d44 <MX_SPI3_Init+0x64>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008d18:	4b0a      	ldr	r3, [pc, #40]	; (8008d44 <MX_SPI3_Init+0x64>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008d1e:	4b09      	ldr	r3, [pc, #36]	; (8008d44 <MX_SPI3_Init+0x64>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d24:	4b07      	ldr	r3, [pc, #28]	; (8008d44 <MX_SPI3_Init+0x64>)
 8008d26:	2200      	movs	r2, #0
 8008d28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8008d2a:	4b06      	ldr	r3, [pc, #24]	; (8008d44 <MX_SPI3_Init+0x64>)
 8008d2c:	220a      	movs	r2, #10
 8008d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008d30:	4804      	ldr	r0, [pc, #16]	; (8008d44 <MX_SPI3_Init+0x64>)
 8008d32:	f7fa fe15 	bl	8003960 <HAL_SPI_Init>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d001      	beq.n	8008d40 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8008d3c:	f000 fbba 	bl	80094b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8008d40:	bf00      	nop
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	20004ee8 	.word	0x20004ee8
 8008d48:	40003c00 	.word	0x40003c00

08008d4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b09a      	sub	sp, #104	; 0x68
 8008d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008d52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d56:	2200      	movs	r2, #0
 8008d58:	601a      	str	r2, [r3, #0]
 8008d5a:	605a      	str	r2, [r3, #4]
 8008d5c:	609a      	str	r2, [r3, #8]
 8008d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008d60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d64:	2200      	movs	r2, #0
 8008d66:	601a      	str	r2, [r3, #0]
 8008d68:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008d6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008d6e:	2200      	movs	r2, #0
 8008d70:	601a      	str	r2, [r3, #0]
 8008d72:	605a      	str	r2, [r3, #4]
 8008d74:	609a      	str	r2, [r3, #8]
 8008d76:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	605a      	str	r2, [r3, #4]
 8008d82:	609a      	str	r2, [r3, #8]
 8008d84:	60da      	str	r2, [r3, #12]
 8008d86:	611a      	str	r2, [r3, #16]
 8008d88:	615a      	str	r2, [r3, #20]
 8008d8a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008d8c:	1d3b      	adds	r3, r7, #4
 8008d8e:	2220      	movs	r2, #32
 8008d90:	2100      	movs	r1, #0
 8008d92:	4618      	mov	r0, r3
 8008d94:	f001 ff8b 	bl	800acae <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008d98:	4b4b      	ldr	r3, [pc, #300]	; (8008ec8 <MX_TIM1_Init+0x17c>)
 8008d9a:	4a4c      	ldr	r2, [pc, #304]	; (8008ecc <MX_TIM1_Init+0x180>)
 8008d9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8008d9e:	4b4a      	ldr	r3, [pc, #296]	; (8008ec8 <MX_TIM1_Init+0x17c>)
 8008da0:	2214      	movs	r2, #20
 8008da2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008da4:	4b48      	ldr	r3, [pc, #288]	; (8008ec8 <MX_TIM1_Init+0x17c>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8008daa:	4b47      	ldr	r3, [pc, #284]	; (8008ec8 <MX_TIM1_Init+0x17c>)
 8008dac:	f241 3287 	movw	r2, #4999	; 0x1387
 8008db0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008db2:	4b45      	ldr	r3, [pc, #276]	; (8008ec8 <MX_TIM1_Init+0x17c>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008db8:	4b43      	ldr	r3, [pc, #268]	; (8008ec8 <MX_TIM1_Init+0x17c>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008dbe:	4b42      	ldr	r3, [pc, #264]	; (8008ec8 <MX_TIM1_Init+0x17c>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008dc4:	4840      	ldr	r0, [pc, #256]	; (8008ec8 <MX_TIM1_Init+0x17c>)
 8008dc6:	f7fa fe2f 	bl	8003a28 <HAL_TIM_Base_Init>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8008dd0:	f000 fb70 	bl	80094b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dd8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008dda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008dde:	4619      	mov	r1, r3
 8008de0:	4839      	ldr	r0, [pc, #228]	; (8008ec8 <MX_TIM1_Init+0x17c>)
 8008de2:	f7fb fa17 	bl	8004214 <HAL_TIM_ConfigClockSource>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d001      	beq.n	8008df0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8008dec:	f000 fb62 	bl	80094b4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8008df0:	4835      	ldr	r0, [pc, #212]	; (8008ec8 <MX_TIM1_Init+0x17c>)
 8008df2:	f7fa feff 	bl	8003bf4 <HAL_TIM_IC_Init>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8008dfc:	f000 fb5a 	bl	80094b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008e00:	4831      	ldr	r0, [pc, #196]	; (8008ec8 <MX_TIM1_Init+0x17c>)
 8008e02:	f7fa fe90 	bl	8003b26 <HAL_TIM_PWM_Init>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d001      	beq.n	8008e10 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8008e0c:	f000 fb52 	bl	80094b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008e10:	2300      	movs	r3, #0
 8008e12:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008e14:	2300      	movs	r3, #0
 8008e16:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008e18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	482a      	ldr	r0, [pc, #168]	; (8008ec8 <MX_TIM1_Init+0x17c>)
 8008e20:	f7fb feb7 	bl	8004b92 <HAL_TIMEx_MasterConfigSynchronization>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d001      	beq.n	8008e2e <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8008e2a:	f000 fb43 	bl	80094b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008e32:	2301      	movs	r3, #1
 8008e34:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008e36:	2300      	movs	r3, #0
 8008e38:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigIC.ICFilter = 0;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008e3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008e42:	2200      	movs	r2, #0
 8008e44:	4619      	mov	r1, r3
 8008e46:	4820      	ldr	r0, [pc, #128]	; (8008ec8 <MX_TIM1_Init+0x17c>)
 8008e48:	f7fb f882 	bl	8003f50 <HAL_TIM_IC_ConfigChannel>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d001      	beq.n	8008e56 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8008e52:	f000 fb2f 	bl	80094b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008e56:	2360      	movs	r3, #96	; 0x60
 8008e58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008e62:	2300      	movs	r3, #0
 8008e64:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008e66:	2300      	movs	r3, #0
 8008e68:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e72:	220c      	movs	r2, #12
 8008e74:	4619      	mov	r1, r3
 8008e76:	4814      	ldr	r0, [pc, #80]	; (8008ec8 <MX_TIM1_Init+0x17c>)
 8008e78:	f7fb f906 	bl	8004088 <HAL_TIM_PWM_ConfigChannel>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8008e82:	f000 fb17 	bl	80094b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008e86:	2300      	movs	r3, #0
 8008e88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008e92:	2300      	movs	r3, #0
 8008e94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008e96:	2300      	movs	r3, #0
 8008e98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008e9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008ea4:	1d3b      	adds	r3, r7, #4
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	4807      	ldr	r0, [pc, #28]	; (8008ec8 <MX_TIM1_Init+0x17c>)
 8008eaa:	f7fb feb7 	bl	8004c1c <HAL_TIMEx_ConfigBreakDeadTime>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 8008eb4:	f000 fafe 	bl	80094b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8008eb8:	4803      	ldr	r0, [pc, #12]	; (8008ec8 <MX_TIM1_Init+0x17c>)
 8008eba:	f000 fd11 	bl	80098e0 <HAL_TIM_MspPostInit>

}
 8008ebe:	bf00      	nop
 8008ec0:	3768      	adds	r7, #104	; 0x68
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	20004fcc 	.word	0x20004fcc
 8008ecc:	40010000 	.word	0x40010000

08008ed0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b08e      	sub	sp, #56	; 0x38
 8008ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008ed6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008eda:	2200      	movs	r2, #0
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	605a      	str	r2, [r3, #4]
 8008ee0:	609a      	str	r2, [r3, #8]
 8008ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008ee4:	f107 0320 	add.w	r3, r7, #32
 8008ee8:	2200      	movs	r2, #0
 8008eea:	601a      	str	r2, [r3, #0]
 8008eec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008eee:	1d3b      	adds	r3, r7, #4
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	601a      	str	r2, [r3, #0]
 8008ef4:	605a      	str	r2, [r3, #4]
 8008ef6:	609a      	str	r2, [r3, #8]
 8008ef8:	60da      	str	r2, [r3, #12]
 8008efa:	611a      	str	r2, [r3, #16]
 8008efc:	615a      	str	r2, [r3, #20]
 8008efe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008f00:	4b2c      	ldr	r3, [pc, #176]	; (8008fb4 <MX_TIM2_Init+0xe4>)
 8008f02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008f06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008f08:	4b2a      	ldr	r3, [pc, #168]	; (8008fb4 <MX_TIM2_Init+0xe4>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f0e:	4b29      	ldr	r3, [pc, #164]	; (8008fb4 <MX_TIM2_Init+0xe4>)
 8008f10:	2200      	movs	r2, #0
 8008f12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8008f14:	4b27      	ldr	r3, [pc, #156]	; (8008fb4 <MX_TIM2_Init+0xe4>)
 8008f16:	2200      	movs	r2, #0
 8008f18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008f1a:	4b26      	ldr	r3, [pc, #152]	; (8008fb4 <MX_TIM2_Init+0xe4>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008f20:	4b24      	ldr	r3, [pc, #144]	; (8008fb4 <MX_TIM2_Init+0xe4>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008f26:	4823      	ldr	r0, [pc, #140]	; (8008fb4 <MX_TIM2_Init+0xe4>)
 8008f28:	f7fa fd7e 	bl	8003a28 <HAL_TIM_Base_Init>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d001      	beq.n	8008f36 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8008f32:	f000 fabf 	bl	80094b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008f36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008f3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f40:	4619      	mov	r1, r3
 8008f42:	481c      	ldr	r0, [pc, #112]	; (8008fb4 <MX_TIM2_Init+0xe4>)
 8008f44:	f7fb f966 	bl	8004214 <HAL_TIM_ConfigClockSource>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8008f4e:	f000 fab1 	bl	80094b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008f52:	4818      	ldr	r0, [pc, #96]	; (8008fb4 <MX_TIM2_Init+0xe4>)
 8008f54:	f7fa fde7 	bl	8003b26 <HAL_TIM_PWM_Init>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8008f5e:	f000 faa9 	bl	80094b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f62:	2300      	movs	r3, #0
 8008f64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f66:	2300      	movs	r3, #0
 8008f68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008f6a:	f107 0320 	add.w	r3, r7, #32
 8008f6e:	4619      	mov	r1, r3
 8008f70:	4810      	ldr	r0, [pc, #64]	; (8008fb4 <MX_TIM2_Init+0xe4>)
 8008f72:	f7fb fe0e 	bl	8004b92 <HAL_TIMEx_MasterConfigSynchronization>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8008f7c:	f000 fa9a 	bl	80094b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008f80:	2360      	movs	r3, #96	; 0x60
 8008f82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008f84:	2300      	movs	r3, #0
 8008f86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008f90:	1d3b      	adds	r3, r7, #4
 8008f92:	2204      	movs	r2, #4
 8008f94:	4619      	mov	r1, r3
 8008f96:	4807      	ldr	r0, [pc, #28]	; (8008fb4 <MX_TIM2_Init+0xe4>)
 8008f98:	f7fb f876 	bl	8004088 <HAL_TIM_PWM_ConfigChannel>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8008fa2:	f000 fa87 	bl	80094b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8008fa6:	4803      	ldr	r0, [pc, #12]	; (8008fb4 <MX_TIM2_Init+0xe4>)
 8008fa8:	f000 fc9a 	bl	80098e0 <HAL_TIM_MspPostInit>

}
 8008fac:	bf00      	nop
 8008fae:	3738      	adds	r7, #56	; 0x38
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	20005090 	.word	0x20005090

08008fb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008fbe:	f107 0308 	add.w	r3, r7, #8
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	601a      	str	r2, [r3, #0]
 8008fc6:	605a      	str	r2, [r3, #4]
 8008fc8:	609a      	str	r2, [r3, #8]
 8008fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008fcc:	463b      	mov	r3, r7
 8008fce:	2200      	movs	r2, #0
 8008fd0:	601a      	str	r2, [r3, #0]
 8008fd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008fd4:	4b1c      	ldr	r3, [pc, #112]	; (8009048 <MX_TIM3_Init+0x90>)
 8008fd6:	4a1d      	ldr	r2, [pc, #116]	; (800904c <MX_TIM3_Init+0x94>)
 8008fd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008fda:	4b1b      	ldr	r3, [pc, #108]	; (8009048 <MX_TIM3_Init+0x90>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008fe0:	4b19      	ldr	r3, [pc, #100]	; (8009048 <MX_TIM3_Init+0x90>)
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8008fe6:	4b18      	ldr	r3, [pc, #96]	; (8009048 <MX_TIM3_Init+0x90>)
 8008fe8:	2200      	movs	r2, #0
 8008fea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008fec:	4b16      	ldr	r3, [pc, #88]	; (8009048 <MX_TIM3_Init+0x90>)
 8008fee:	2200      	movs	r2, #0
 8008ff0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008ff2:	4b15      	ldr	r3, [pc, #84]	; (8009048 <MX_TIM3_Init+0x90>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008ff8:	4813      	ldr	r0, [pc, #76]	; (8009048 <MX_TIM3_Init+0x90>)
 8008ffa:	f7fa fd15 	bl	8003a28 <HAL_TIM_Base_Init>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d001      	beq.n	8009008 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8009004:	f000 fa56 	bl	80094b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800900c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800900e:	f107 0308 	add.w	r3, r7, #8
 8009012:	4619      	mov	r1, r3
 8009014:	480c      	ldr	r0, [pc, #48]	; (8009048 <MX_TIM3_Init+0x90>)
 8009016:	f7fb f8fd 	bl	8004214 <HAL_TIM_ConfigClockSource>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d001      	beq.n	8009024 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8009020:	f000 fa48 	bl	80094b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009024:	2300      	movs	r3, #0
 8009026:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009028:	2300      	movs	r3, #0
 800902a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800902c:	463b      	mov	r3, r7
 800902e:	4619      	mov	r1, r3
 8009030:	4805      	ldr	r0, [pc, #20]	; (8009048 <MX_TIM3_Init+0x90>)
 8009032:	f7fb fdae 	bl	8004b92 <HAL_TIMEx_MasterConfigSynchronization>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800903c:	f000 fa3a 	bl	80094b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8009040:	bf00      	nop
 8009042:	3718      	adds	r7, #24
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	20004e70 	.word	0x20004e70
 800904c:	40000400 	.word	0x40000400

08009050 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009054:	4b11      	ldr	r3, [pc, #68]	; (800909c <MX_USART1_UART_Init+0x4c>)
 8009056:	4a12      	ldr	r2, [pc, #72]	; (80090a0 <MX_USART1_UART_Init+0x50>)
 8009058:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800905a:	4b10      	ldr	r3, [pc, #64]	; (800909c <MX_USART1_UART_Init+0x4c>)
 800905c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009060:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009062:	4b0e      	ldr	r3, [pc, #56]	; (800909c <MX_USART1_UART_Init+0x4c>)
 8009064:	2200      	movs	r2, #0
 8009066:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009068:	4b0c      	ldr	r3, [pc, #48]	; (800909c <MX_USART1_UART_Init+0x4c>)
 800906a:	2200      	movs	r2, #0
 800906c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800906e:	4b0b      	ldr	r3, [pc, #44]	; (800909c <MX_USART1_UART_Init+0x4c>)
 8009070:	2200      	movs	r2, #0
 8009072:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009074:	4b09      	ldr	r3, [pc, #36]	; (800909c <MX_USART1_UART_Init+0x4c>)
 8009076:	220c      	movs	r2, #12
 8009078:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800907a:	4b08      	ldr	r3, [pc, #32]	; (800909c <MX_USART1_UART_Init+0x4c>)
 800907c:	2200      	movs	r2, #0
 800907e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009080:	4b06      	ldr	r3, [pc, #24]	; (800909c <MX_USART1_UART_Init+0x4c>)
 8009082:	2200      	movs	r2, #0
 8009084:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009086:	4805      	ldr	r0, [pc, #20]	; (800909c <MX_USART1_UART_Init+0x4c>)
 8009088:	f7fb fe2e 	bl	8004ce8 <HAL_UART_Init>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d001      	beq.n	8009096 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009092:	f000 fa0f 	bl	80094b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009096:	bf00      	nop
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	20004f68 	.word	0x20004f68
 80090a0:	40011000 	.word	0x40011000

080090a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80090a8:	4b11      	ldr	r3, [pc, #68]	; (80090f0 <MX_USART2_UART_Init+0x4c>)
 80090aa:	4a12      	ldr	r2, [pc, #72]	; (80090f4 <MX_USART2_UART_Init+0x50>)
 80090ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80090ae:	4b10      	ldr	r3, [pc, #64]	; (80090f0 <MX_USART2_UART_Init+0x4c>)
 80090b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80090b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80090b6:	4b0e      	ldr	r3, [pc, #56]	; (80090f0 <MX_USART2_UART_Init+0x4c>)
 80090b8:	2200      	movs	r2, #0
 80090ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80090bc:	4b0c      	ldr	r3, [pc, #48]	; (80090f0 <MX_USART2_UART_Init+0x4c>)
 80090be:	2200      	movs	r2, #0
 80090c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80090c2:	4b0b      	ldr	r3, [pc, #44]	; (80090f0 <MX_USART2_UART_Init+0x4c>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80090c8:	4b09      	ldr	r3, [pc, #36]	; (80090f0 <MX_USART2_UART_Init+0x4c>)
 80090ca:	220c      	movs	r2, #12
 80090cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80090ce:	4b08      	ldr	r3, [pc, #32]	; (80090f0 <MX_USART2_UART_Init+0x4c>)
 80090d0:	2200      	movs	r2, #0
 80090d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80090d4:	4b06      	ldr	r3, [pc, #24]	; (80090f0 <MX_USART2_UART_Init+0x4c>)
 80090d6:	2200      	movs	r2, #0
 80090d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80090da:	4805      	ldr	r0, [pc, #20]	; (80090f0 <MX_USART2_UART_Init+0x4c>)
 80090dc:	f7fb fe04 	bl	8004ce8 <HAL_UART_Init>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80090e6:	f000 f9e5 	bl	80094b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80090ea:	bf00      	nop
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	200050d4 	.word	0x200050d4
 80090f4:	40004400 	.word	0x40004400

080090f8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80090fc:	4b11      	ldr	r3, [pc, #68]	; (8009144 <MX_USART6_UART_Init+0x4c>)
 80090fe:	4a12      	ldr	r2, [pc, #72]	; (8009148 <MX_USART6_UART_Init+0x50>)
 8009100:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8009102:	4b10      	ldr	r3, [pc, #64]	; (8009144 <MX_USART6_UART_Init+0x4c>)
 8009104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009108:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800910a:	4b0e      	ldr	r3, [pc, #56]	; (8009144 <MX_USART6_UART_Init+0x4c>)
 800910c:	2200      	movs	r2, #0
 800910e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8009110:	4b0c      	ldr	r3, [pc, #48]	; (8009144 <MX_USART6_UART_Init+0x4c>)
 8009112:	2200      	movs	r2, #0
 8009114:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8009116:	4b0b      	ldr	r3, [pc, #44]	; (8009144 <MX_USART6_UART_Init+0x4c>)
 8009118:	2200      	movs	r2, #0
 800911a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800911c:	4b09      	ldr	r3, [pc, #36]	; (8009144 <MX_USART6_UART_Init+0x4c>)
 800911e:	220c      	movs	r2, #12
 8009120:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009122:	4b08      	ldr	r3, [pc, #32]	; (8009144 <MX_USART6_UART_Init+0x4c>)
 8009124:	2200      	movs	r2, #0
 8009126:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8009128:	4b06      	ldr	r3, [pc, #24]	; (8009144 <MX_USART6_UART_Init+0x4c>)
 800912a:	2200      	movs	r2, #0
 800912c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800912e:	4805      	ldr	r0, [pc, #20]	; (8009144 <MX_USART6_UART_Init+0x4c>)
 8009130:	f7fb fdda 	bl	8004ce8 <HAL_UART_Init>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d001      	beq.n	800913e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800913a:	f000 f9bb 	bl	80094b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800913e:	bf00      	nop
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	2000503c 	.word	0x2000503c
 8009148:	40011400 	.word	0x40011400

0800914c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b08a      	sub	sp, #40	; 0x28
 8009150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009152:	f107 0314 	add.w	r3, r7, #20
 8009156:	2200      	movs	r2, #0
 8009158:	601a      	str	r2, [r3, #0]
 800915a:	605a      	str	r2, [r3, #4]
 800915c:	609a      	str	r2, [r3, #8]
 800915e:	60da      	str	r2, [r3, #12]
 8009160:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009162:	2300      	movs	r3, #0
 8009164:	613b      	str	r3, [r7, #16]
 8009166:	4b3f      	ldr	r3, [pc, #252]	; (8009264 <MX_GPIO_Init+0x118>)
 8009168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916a:	4a3e      	ldr	r2, [pc, #248]	; (8009264 <MX_GPIO_Init+0x118>)
 800916c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009170:	6313      	str	r3, [r2, #48]	; 0x30
 8009172:	4b3c      	ldr	r3, [pc, #240]	; (8009264 <MX_GPIO_Init+0x118>)
 8009174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800917a:	613b      	str	r3, [r7, #16]
 800917c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800917e:	2300      	movs	r3, #0
 8009180:	60fb      	str	r3, [r7, #12]
 8009182:	4b38      	ldr	r3, [pc, #224]	; (8009264 <MX_GPIO_Init+0x118>)
 8009184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009186:	4a37      	ldr	r2, [pc, #220]	; (8009264 <MX_GPIO_Init+0x118>)
 8009188:	f043 0304 	orr.w	r3, r3, #4
 800918c:	6313      	str	r3, [r2, #48]	; 0x30
 800918e:	4b35      	ldr	r3, [pc, #212]	; (8009264 <MX_GPIO_Init+0x118>)
 8009190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009192:	f003 0304 	and.w	r3, r3, #4
 8009196:	60fb      	str	r3, [r7, #12]
 8009198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800919a:	2300      	movs	r3, #0
 800919c:	60bb      	str	r3, [r7, #8]
 800919e:	4b31      	ldr	r3, [pc, #196]	; (8009264 <MX_GPIO_Init+0x118>)
 80091a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a2:	4a30      	ldr	r2, [pc, #192]	; (8009264 <MX_GPIO_Init+0x118>)
 80091a4:	f043 0301 	orr.w	r3, r3, #1
 80091a8:	6313      	str	r3, [r2, #48]	; 0x30
 80091aa:	4b2e      	ldr	r3, [pc, #184]	; (8009264 <MX_GPIO_Init+0x118>)
 80091ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	60bb      	str	r3, [r7, #8]
 80091b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80091b6:	2300      	movs	r3, #0
 80091b8:	607b      	str	r3, [r7, #4]
 80091ba:	4b2a      	ldr	r3, [pc, #168]	; (8009264 <MX_GPIO_Init+0x118>)
 80091bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091be:	4a29      	ldr	r2, [pc, #164]	; (8009264 <MX_GPIO_Init+0x118>)
 80091c0:	f043 0302 	orr.w	r3, r3, #2
 80091c4:	6313      	str	r3, [r2, #48]	; 0x30
 80091c6:	4b27      	ldr	r3, [pc, #156]	; (8009264 <MX_GPIO_Init+0x118>)
 80091c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ca:	f003 0302 	and.w	r3, r3, #2
 80091ce:	607b      	str	r3, [r7, #4]
 80091d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UV_Pin|Ion_Pin|Damperin3_Pin|Damperin4_Pin, GPIO_PIN_RESET);
 80091d2:	2200      	movs	r2, #0
 80091d4:	2133      	movs	r1, #51	; 0x33
 80091d6:	4824      	ldr	r0, [pc, #144]	; (8009268 <MX_GPIO_Init+0x11c>)
 80091d8:	f7f8 fa58 	bl	800168c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Damperout1_Pin|Damperout2_Pin|Damperout3_Pin|Damperout4_Pin, GPIO_PIN_RESET);
 80091dc:	2200      	movs	r2, #0
 80091de:	21f0      	movs	r1, #240	; 0xf0
 80091e0:	4822      	ldr	r0, [pc, #136]	; (800926c <MX_GPIO_Init+0x120>)
 80091e2:	f7f8 fa53 	bl	800168c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Damperin1_Pin|Damperin2_Pin, GPIO_PIN_RESET);
 80091e6:	2200      	movs	r2, #0
 80091e8:	2103      	movs	r1, #3
 80091ea:	4821      	ldr	r0, [pc, #132]	; (8009270 <MX_GPIO_Init+0x124>)
 80091ec:	f7f8 fa4e 	bl	800168c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : UV_Pin Ion_Pin Damperin3_Pin Damperin4_Pin */
  GPIO_InitStruct.Pin = UV_Pin|Ion_Pin|Damperin3_Pin|Damperin4_Pin;
 80091f0:	2333      	movs	r3, #51	; 0x33
 80091f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80091f4:	2301      	movs	r3, #1
 80091f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091f8:	2300      	movs	r3, #0
 80091fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091fc:	2300      	movs	r3, #0
 80091fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009200:	f107 0314 	add.w	r3, r7, #20
 8009204:	4619      	mov	r1, r3
 8009206:	4818      	ldr	r0, [pc, #96]	; (8009268 <MX_GPIO_Init+0x11c>)
 8009208:	f7f7 ffc4 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pins : Damperout1_Pin Damperout2_Pin Damperout3_Pin Damperout4_Pin */
  GPIO_InitStruct.Pin = Damperout1_Pin|Damperout2_Pin|Damperout3_Pin|Damperout4_Pin;
 800920c:	23f0      	movs	r3, #240	; 0xf0
 800920e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009210:	2301      	movs	r3, #1
 8009212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009214:	2300      	movs	r3, #0
 8009216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009218:	2300      	movs	r3, #0
 800921a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800921c:	f107 0314 	add.w	r3, r7, #20
 8009220:	4619      	mov	r1, r3
 8009222:	4812      	ldr	r0, [pc, #72]	; (800926c <MX_GPIO_Init+0x120>)
 8009224:	f7f7 ffb6 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pins : Damperin1_Pin Damperin2_Pin */
  GPIO_InitStruct.Pin = Damperin1_Pin|Damperin2_Pin;
 8009228:	2303      	movs	r3, #3
 800922a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800922c:	2301      	movs	r3, #1
 800922e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009230:	2300      	movs	r3, #0
 8009232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009234:	2300      	movs	r3, #0
 8009236:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009238:	f107 0314 	add.w	r3, r7, #20
 800923c:	4619      	mov	r1, r3
 800923e:	480c      	ldr	r0, [pc, #48]	; (8009270 <MX_GPIO_Init+0x124>)
 8009240:	f7f7 ffa8 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : recive_IR_Pin */
  GPIO_InitStruct.Pin = recive_IR_Pin;
 8009244:	2304      	movs	r3, #4
 8009246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009248:	2300      	movs	r3, #0
 800924a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800924c:	2300      	movs	r3, #0
 800924e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(recive_IR_GPIO_Port, &GPIO_InitStruct);
 8009250:	f107 0314 	add.w	r3, r7, #20
 8009254:	4619      	mov	r1, r3
 8009256:	4806      	ldr	r0, [pc, #24]	; (8009270 <MX_GPIO_Init+0x124>)
 8009258:	f7f7 ff9c 	bl	8001194 <HAL_GPIO_Init>

}
 800925c:	bf00      	nop
 800925e:	3728      	adds	r7, #40	; 0x28
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	40023800 	.word	0x40023800
 8009268:	40020800 	.word	0x40020800
 800926c:	40020000 	.word	0x40020000
 8009270:	40020400 	.word	0x40020400

08009274 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
	uint32_t value;
	if (htim->Instance==TIM2)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009284:	d12c      	bne.n	80092e0 <HAL_TIM_IC_CaptureCallback+0x6c>
	{
		i++;
 8009286:	4b18      	ldr	r3, [pc, #96]	; (80092e8 <HAL_TIM_IC_CaptureCallback+0x74>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	3301      	adds	r3, #1
 800928c:	4a16      	ldr	r2, [pc, #88]	; (80092e8 <HAL_TIM_IC_CaptureCallback+0x74>)
 800928e:	6013      	str	r3, [r2, #0]
		if(i==1)
 8009290:	4b15      	ldr	r3, [pc, #84]	; (80092e8 <HAL_TIM_IC_CaptureCallback+0x74>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b01      	cmp	r3, #1
 8009296:	d103      	bne.n	80092a0 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
//			value1 = __HAL_TIM_GetCounter(&htim2);    //read TIM2 channel 1 capture value
			__HAL_TIM_SetCounter(&htim2, 0);    //reset counter after input capture interrupt occurs
 8009298:	4b14      	ldr	r3, [pc, #80]	; (80092ec <HAL_TIM_IC_CaptureCallback+0x78>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2200      	movs	r2, #0
 800929e:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(i==2)
 80092a0:	4b11      	ldr	r3, [pc, #68]	; (80092e8 <HAL_TIM_IC_CaptureCallback+0x74>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d11b      	bne.n	80092e0 <HAL_TIM_IC_CaptureCallback+0x6c>
		{
			i = 0;
 80092a8:	4b0f      	ldr	r3, [pc, #60]	; (80092e8 <HAL_TIM_IC_CaptureCallback+0x74>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	601a      	str	r2, [r3, #0]
			value = __HAL_TIM_GetCounter(&htim2);    //read TIM2 channel 1 capture value
 80092ae:	4b0f      	ldr	r3, [pc, #60]	; (80092ec <HAL_TIM_IC_CaptureCallback+0x78>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b4:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SetCounter(&htim2, 0);    //reset counter after input capture interrupt occurs
 80092b6:	4b0d      	ldr	r3, [pc, #52]	; (80092ec <HAL_TIM_IC_CaptureCallback+0x78>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2200      	movs	r2, #0
 80092bc:	625a      	str	r2, [r3, #36]	; 0x24
			speed = value*60/15;
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	4613      	mov	r3, r2
 80092c2:	011b      	lsls	r3, r3, #4
 80092c4:	1a9b      	subs	r3, r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	461a      	mov	r2, r3
 80092ca:	4b09      	ldr	r3, [pc, #36]	; (80092f0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80092cc:	fba3 2302 	umull	r2, r3, r3, r2
 80092d0:	08db      	lsrs	r3, r3, #3
 80092d2:	461a      	mov	r2, r3
 80092d4:	4b07      	ldr	r3, [pc, #28]	; (80092f4 <HAL_TIM_IC_CaptureCallback+0x80>)
 80092d6:	601a      	str	r2, [r3, #0]
			HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 80092d8:	2100      	movs	r1, #0
 80092da:	4804      	ldr	r0, [pc, #16]	; (80092ec <HAL_TIM_IC_CaptureCallback+0x78>)
 80092dc:	f7fa fcc0 	bl	8003c60 <HAL_TIM_IC_Stop_IT>
		}
	}
}
 80092e0:	bf00      	nop
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	200040e0 	.word	0x200040e0
 80092ec:	20005090 	.word	0x20005090
 80092f0:	88888889 	.word	0x88888889
 80092f4:	2000507c 	.word	0x2000507c

080092f8 <StartSensor_Task>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartSensor_Task */
void StartSensor_Task(void const * argument)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
	//checkState();

  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8009300:	2120      	movs	r1, #32
 8009302:	4804      	ldr	r0, [pc, #16]	; (8009314 <StartSensor_Task+0x1c>)
 8009304:	f7f8 f9db 	bl	80016be <HAL_GPIO_TogglePin>
    osDelay(500);
 8009308:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800930c:	f7fc facd 	bl	80058aa <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8009310:	e7f6      	b.n	8009300 <StartSensor_Task+0x8>
 8009312:	bf00      	nop
 8009314:	40020000 	.word	0x40020000

08009318 <StartControl_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControl_Task */
void StartControl_Task(void const * argument)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b09c      	sub	sp, #112	; 0x70
 800931c:	af02      	add	r7, sp, #8
 800931e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControl_Task */
	char trans_str[96] = {0,};
 8009320:	f107 0308 	add.w	r3, r7, #8
 8009324:	2260      	movs	r2, #96	; 0x60
 8009326:	2100      	movs	r1, #0
 8009328:	4618      	mov	r0, r3
 800932a:	f001 fcc0 	bl	800acae <memset>
	//	directionOfRotation(true, 220);
	//}
  /* Infinite loop */
  for(;;)
  {
	  if(my_decode(&results))
 800932e:	483e      	ldr	r0, [pc, #248]	; (8009428 <StartControl_Task+0x110>)
 8009330:	f7fd fe36 	bl	8006fa0 <my_decode>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d070      	beq.n	800941c <StartControl_Task+0x104>
		{

			snprintf(trans_str, 96, "Cod: %p | Type: %s | Bits: %d\n", (void*)results.value, decode_str[results.decode_type + 1], results.bits);
 800933a:	4b3b      	ldr	r3, [pc, #236]	; (8009428 <StartControl_Task+0x110>)
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	4619      	mov	r1, r3
 8009340:	4b39      	ldr	r3, [pc, #228]	; (8009428 <StartControl_Task+0x110>)
 8009342:	f993 3000 	ldrsb.w	r3, [r3]
 8009346:	3301      	adds	r3, #1
 8009348:	4a38      	ldr	r2, [pc, #224]	; (800942c <StartControl_Task+0x114>)
 800934a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800934e:	4a36      	ldr	r2, [pc, #216]	; (8009428 <StartControl_Task+0x110>)
 8009350:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8009354:	f107 0008 	add.w	r0, r7, #8
 8009358:	9201      	str	r2, [sp, #4]
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	460b      	mov	r3, r1
 800935e:	4a34      	ldr	r2, [pc, #208]	; (8009430 <StartControl_Task+0x118>)
 8009360:	2160      	movs	r1, #96	; 0x60
 8009362:	f001 fd11 	bl	800ad88 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)&trans_str, sizeof(trans_str), 100);
 8009366:	f107 0108 	add.w	r1, r7, #8
 800936a:	2364      	movs	r3, #100	; 0x64
 800936c:	2260      	movs	r2, #96	; 0x60
 800936e:	4831      	ldr	r0, [pc, #196]	; (8009434 <StartControl_Task+0x11c>)
 8009370:	f7fb fd07 	bl	8004d82 <HAL_UART_Transmit>
			//printf("%s",trans_str);
			if ((void*)results.value == 0xffb04f ){
 8009374:	4b2c      	ldr	r3, [pc, #176]	; (8009428 <StartControl_Task+0x110>)
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	4a2f      	ldr	r2, [pc, #188]	; (8009438 <StartControl_Task+0x120>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d10e      	bne.n	800939c <StartControl_Task+0x84>
				SwitchIR++;
 800937e:	4b2f      	ldr	r3, [pc, #188]	; (800943c <StartControl_Task+0x124>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3301      	adds	r3, #1
 8009384:	4a2d      	ldr	r2, [pc, #180]	; (800943c <StartControl_Task+0x124>)
 8009386:	6013      	str	r3, [r2, #0]
				flagSW = 1;
 8009388:	4b2d      	ldr	r3, [pc, #180]	; (8009440 <StartControl_Task+0x128>)
 800938a:	2201      	movs	r2, #1
 800938c:	601a      	str	r2, [r3, #0]
				if (SwitchIR == 3){
 800938e:	4b2b      	ldr	r3, [pc, #172]	; (800943c <StartControl_Task+0x124>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2b03      	cmp	r3, #3
 8009394:	d102      	bne.n	800939c <StartControl_Task+0x84>
					SwitchIR = 1;
 8009396:	4b29      	ldr	r3, [pc, #164]	; (800943c <StartControl_Task+0x124>)
 8009398:	2201      	movs	r2, #1
 800939a:	601a      	str	r2, [r3, #0]
				}
			}
			if ((void*)results.value == 0xff22dd ){
 800939c:	4b22      	ldr	r3, [pc, #136]	; (8009428 <StartControl_Task+0x110>)
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	4a28      	ldr	r2, [pc, #160]	; (8009444 <StartControl_Task+0x12c>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d10e      	bne.n	80093c4 <StartControl_Task+0xac>
				SpeedIR++;
 80093a6:	4b28      	ldr	r3, [pc, #160]	; (8009448 <StartControl_Task+0x130>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	3301      	adds	r3, #1
 80093ac:	4a26      	ldr	r2, [pc, #152]	; (8009448 <StartControl_Task+0x130>)
 80093ae:	6013      	str	r3, [r2, #0]
				flagSP = 1;
 80093b0:	4b26      	ldr	r3, [pc, #152]	; (800944c <StartControl_Task+0x134>)
 80093b2:	2201      	movs	r2, #1
 80093b4:	601a      	str	r2, [r3, #0]
				if (SpeedIR == 4){
 80093b6:	4b24      	ldr	r3, [pc, #144]	; (8009448 <StartControl_Task+0x130>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2b04      	cmp	r3, #4
 80093bc:	d102      	bne.n	80093c4 <StartControl_Task+0xac>
					SpeedIR = 1;
 80093be:	4b22      	ldr	r3, [pc, #136]	; (8009448 <StartControl_Task+0x130>)
 80093c0:	2201      	movs	r2, #1
 80093c2:	601a      	str	r2, [r3, #0]
				}
			}
			if ((void*)results.value == 0xff7887 ){
 80093c4:	4b18      	ldr	r3, [pc, #96]	; (8009428 <StartControl_Task+0x110>)
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	4a21      	ldr	r2, [pc, #132]	; (8009450 <StartControl_Task+0x138>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d10e      	bne.n	80093ec <StartControl_Task+0xd4>
				ModeIR++;
 80093ce:	4b21      	ldr	r3, [pc, #132]	; (8009454 <StartControl_Task+0x13c>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3301      	adds	r3, #1
 80093d4:	4a1f      	ldr	r2, [pc, #124]	; (8009454 <StartControl_Task+0x13c>)
 80093d6:	6013      	str	r3, [r2, #0]
				flagMode = 1;
 80093d8:	4b1f      	ldr	r3, [pc, #124]	; (8009458 <StartControl_Task+0x140>)
 80093da:	2201      	movs	r2, #1
 80093dc:	601a      	str	r2, [r3, #0]
				if (ModeIR == 4){
 80093de:	4b1d      	ldr	r3, [pc, #116]	; (8009454 <StartControl_Task+0x13c>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2b04      	cmp	r3, #4
 80093e4:	d102      	bne.n	80093ec <StartControl_Task+0xd4>
					ModeIR = 1;
 80093e6:	4b1b      	ldr	r3, [pc, #108]	; (8009454 <StartControl_Task+0x13c>)
 80093e8:	2201      	movs	r2, #1
 80093ea:	601a      	str	r2, [r3, #0]
				}
			}
			if ((void*)results.value == 0xff8877  ){
 80093ec:	4b0e      	ldr	r3, [pc, #56]	; (8009428 <StartControl_Task+0x110>)
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	4a1a      	ldr	r2, [pc, #104]	; (800945c <StartControl_Task+0x144>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d10e      	bne.n	8009414 <StartControl_Task+0xfc>
				IonIR++;
 80093f6:	4b1a      	ldr	r3, [pc, #104]	; (8009460 <StartControl_Task+0x148>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3301      	adds	r3, #1
 80093fc:	4a18      	ldr	r2, [pc, #96]	; (8009460 <StartControl_Task+0x148>)
 80093fe:	6013      	str	r3, [r2, #0]
				flagIon = 1;
 8009400:	4b18      	ldr	r3, [pc, #96]	; (8009464 <StartControl_Task+0x14c>)
 8009402:	2201      	movs	r2, #1
 8009404:	601a      	str	r2, [r3, #0]
				if (IonIR == 3){
 8009406:	4b16      	ldr	r3, [pc, #88]	; (8009460 <StartControl_Task+0x148>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2b03      	cmp	r3, #3
 800940c:	d102      	bne.n	8009414 <StartControl_Task+0xfc>
					IonIR = 1;
 800940e:	4b14      	ldr	r3, [pc, #80]	; (8009460 <StartControl_Task+0x148>)
 8009410:	2201      	movs	r2, #1
 8009412:	601a      	str	r2, [r3, #0]
				}
			}
			Control_IR();
 8009414:	f7ff f9aa 	bl	800876c <Control_IR>

			my_resume();
 8009418:	f7fd fea4 	bl	8007164 <my_resume>
		}

    osDelay(500);
 800941c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009420:	f7fc fa43 	bl	80058aa <osDelay>
	  if(my_decode(&results))
 8009424:	e783      	b.n	800932e <StartControl_Task+0x16>
 8009426:	bf00      	nop
 8009428:	20004304 	.word	0x20004304
 800942c:	20000010 	.word	0x20000010
 8009430:	0800c27c 	.word	0x0800c27c
 8009434:	200050d4 	.word	0x200050d4
 8009438:	00ffb04f 	.word	0x00ffb04f
 800943c:	20004fb8 	.word	0x20004fb8
 8009440:	20004e50 	.word	0x20004e50
 8009444:	00ff22dd 	.word	0x00ff22dd
 8009448:	20005374 	.word	0x20005374
 800944c:	20004fa8 	.word	0x20004fa8
 8009450:	00ff7887 	.word	0x00ff7887
 8009454:	20004ee4 	.word	0x20004ee4
 8009458:	20004e54 	.word	0x20004e54
 800945c:	00ff8877 	.word	0x00ff8877
 8009460:	20004e48 	.word	0x20004e48
 8009464:	20004d98 	.word	0x20004d98

08009468 <StartDisplay_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplay_task */
void StartDisplay_task(void const * argument)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplay_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 8009470:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009474:	f7fc fa19 	bl	80058aa <osDelay>
 8009478:	e7fa      	b.n	8009470 <StartDisplay_task+0x8>

0800947a <StartServer_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartServer_task */
void StartServer_task(void const * argument)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b082      	sub	sp, #8
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartServer_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 8009482:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009486:	f7fc fa10 	bl	80058aa <osDelay>
 800948a:	e7fa      	b.n	8009482 <StartServer_task+0x8>

0800948c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	user_TIM_PeriodElapsedCallback(htim);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7fd fbc3 	bl	8006c20 <user_TIM_PeriodElapsedCallback>
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a04      	ldr	r2, [pc, #16]	; (80094b0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d101      	bne.n	80094a8 <HAL_TIM_PeriodElapsedCallback+0x1c>
    HAL_IncTick();
 80094a4:	f7f7 fd14 	bl	8000ed0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80094a8:	bf00      	nop
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	40000800 	.word	0x40000800

080094b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80094b4:	b480      	push	{r7}
 80094b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80094b8:	bf00      	nop
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
	...

080094c4 <HAL_MspInit>:
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	2300      	movs	r3, #0
 80094cc:	607b      	str	r3, [r7, #4]
 80094ce:	4b12      	ldr	r3, [pc, #72]	; (8009518 <HAL_MspInit+0x54>)
 80094d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094d2:	4a11      	ldr	r2, [pc, #68]	; (8009518 <HAL_MspInit+0x54>)
 80094d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094d8:	6453      	str	r3, [r2, #68]	; 0x44
 80094da:	4b0f      	ldr	r3, [pc, #60]	; (8009518 <HAL_MspInit+0x54>)
 80094dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094e2:	607b      	str	r3, [r7, #4]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2300      	movs	r3, #0
 80094e8:	603b      	str	r3, [r7, #0]
 80094ea:	4b0b      	ldr	r3, [pc, #44]	; (8009518 <HAL_MspInit+0x54>)
 80094ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ee:	4a0a      	ldr	r2, [pc, #40]	; (8009518 <HAL_MspInit+0x54>)
 80094f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094f4:	6413      	str	r3, [r2, #64]	; 0x40
 80094f6:	4b08      	ldr	r3, [pc, #32]	; (8009518 <HAL_MspInit+0x54>)
 80094f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094fe:	603b      	str	r3, [r7, #0]
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	2200      	movs	r2, #0
 8009504:	210f      	movs	r1, #15
 8009506:	f06f 0001 	mvn.w	r0, #1
 800950a:	f7f7 fddb 	bl	80010c4 <HAL_NVIC_SetPriority>
 800950e:	bf00      	nop
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	40023800 	.word	0x40023800

0800951c <HAL_I2C_MspInit>:
 800951c:	b580      	push	{r7, lr}
 800951e:	b08c      	sub	sp, #48	; 0x30
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	f107 031c 	add.w	r3, r7, #28
 8009528:	2200      	movs	r2, #0
 800952a:	601a      	str	r2, [r3, #0]
 800952c:	605a      	str	r2, [r3, #4]
 800952e:	609a      	str	r2, [r3, #8]
 8009530:	60da      	str	r2, [r3, #12]
 8009532:	611a      	str	r2, [r3, #16]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a42      	ldr	r2, [pc, #264]	; (8009644 <HAL_I2C_MspInit+0x128>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d13c      	bne.n	80095b8 <HAL_I2C_MspInit+0x9c>
 800953e:	2300      	movs	r3, #0
 8009540:	61bb      	str	r3, [r7, #24]
 8009542:	4b41      	ldr	r3, [pc, #260]	; (8009648 <HAL_I2C_MspInit+0x12c>)
 8009544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009546:	4a40      	ldr	r2, [pc, #256]	; (8009648 <HAL_I2C_MspInit+0x12c>)
 8009548:	f043 0302 	orr.w	r3, r3, #2
 800954c:	6313      	str	r3, [r2, #48]	; 0x30
 800954e:	4b3e      	ldr	r3, [pc, #248]	; (8009648 <HAL_I2C_MspInit+0x12c>)
 8009550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009552:	f003 0302 	and.w	r3, r3, #2
 8009556:	61bb      	str	r3, [r7, #24]
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	23c0      	movs	r3, #192	; 0xc0
 800955c:	61fb      	str	r3, [r7, #28]
 800955e:	2312      	movs	r3, #18
 8009560:	623b      	str	r3, [r7, #32]
 8009562:	2301      	movs	r3, #1
 8009564:	627b      	str	r3, [r7, #36]	; 0x24
 8009566:	2303      	movs	r3, #3
 8009568:	62bb      	str	r3, [r7, #40]	; 0x28
 800956a:	2304      	movs	r3, #4
 800956c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800956e:	f107 031c 	add.w	r3, r7, #28
 8009572:	4619      	mov	r1, r3
 8009574:	4835      	ldr	r0, [pc, #212]	; (800964c <HAL_I2C_MspInit+0x130>)
 8009576:	f7f7 fe0d 	bl	8001194 <HAL_GPIO_Init>
 800957a:	2300      	movs	r3, #0
 800957c:	617b      	str	r3, [r7, #20]
 800957e:	4b32      	ldr	r3, [pc, #200]	; (8009648 <HAL_I2C_MspInit+0x12c>)
 8009580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009582:	4a31      	ldr	r2, [pc, #196]	; (8009648 <HAL_I2C_MspInit+0x12c>)
 8009584:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009588:	6413      	str	r3, [r2, #64]	; 0x40
 800958a:	4b2f      	ldr	r3, [pc, #188]	; (8009648 <HAL_I2C_MspInit+0x12c>)
 800958c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009592:	617b      	str	r3, [r7, #20]
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	2200      	movs	r2, #0
 8009598:	2105      	movs	r1, #5
 800959a:	201f      	movs	r0, #31
 800959c:	f7f7 fd92 	bl	80010c4 <HAL_NVIC_SetPriority>
 80095a0:	201f      	movs	r0, #31
 80095a2:	f7f7 fdab 	bl	80010fc <HAL_NVIC_EnableIRQ>
 80095a6:	2200      	movs	r2, #0
 80095a8:	2105      	movs	r1, #5
 80095aa:	2020      	movs	r0, #32
 80095ac:	f7f7 fd8a 	bl	80010c4 <HAL_NVIC_SetPriority>
 80095b0:	2020      	movs	r0, #32
 80095b2:	f7f7 fda3 	bl	80010fc <HAL_NVIC_EnableIRQ>
 80095b6:	e041      	b.n	800963c <HAL_I2C_MspInit+0x120>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a24      	ldr	r2, [pc, #144]	; (8009650 <HAL_I2C_MspInit+0x134>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d13c      	bne.n	800963c <HAL_I2C_MspInit+0x120>
 80095c2:	2300      	movs	r3, #0
 80095c4:	613b      	str	r3, [r7, #16]
 80095c6:	4b20      	ldr	r3, [pc, #128]	; (8009648 <HAL_I2C_MspInit+0x12c>)
 80095c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ca:	4a1f      	ldr	r2, [pc, #124]	; (8009648 <HAL_I2C_MspInit+0x12c>)
 80095cc:	f043 0302 	orr.w	r3, r3, #2
 80095d0:	6313      	str	r3, [r2, #48]	; 0x30
 80095d2:	4b1d      	ldr	r3, [pc, #116]	; (8009648 <HAL_I2C_MspInit+0x12c>)
 80095d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d6:	f003 0302 	and.w	r3, r3, #2
 80095da:	613b      	str	r3, [r7, #16]
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095e2:	61fb      	str	r3, [r7, #28]
 80095e4:	2312      	movs	r3, #18
 80095e6:	623b      	str	r3, [r7, #32]
 80095e8:	2301      	movs	r3, #1
 80095ea:	627b      	str	r3, [r7, #36]	; 0x24
 80095ec:	2303      	movs	r3, #3
 80095ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80095f0:	2304      	movs	r3, #4
 80095f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095f4:	f107 031c 	add.w	r3, r7, #28
 80095f8:	4619      	mov	r1, r3
 80095fa:	4814      	ldr	r0, [pc, #80]	; (800964c <HAL_I2C_MspInit+0x130>)
 80095fc:	f7f7 fdca 	bl	8001194 <HAL_GPIO_Init>
 8009600:	2308      	movs	r3, #8
 8009602:	61fb      	str	r3, [r7, #28]
 8009604:	2312      	movs	r3, #18
 8009606:	623b      	str	r3, [r7, #32]
 8009608:	2301      	movs	r3, #1
 800960a:	627b      	str	r3, [r7, #36]	; 0x24
 800960c:	2303      	movs	r3, #3
 800960e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009610:	2309      	movs	r3, #9
 8009612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009614:	f107 031c 	add.w	r3, r7, #28
 8009618:	4619      	mov	r1, r3
 800961a:	480c      	ldr	r0, [pc, #48]	; (800964c <HAL_I2C_MspInit+0x130>)
 800961c:	f7f7 fdba 	bl	8001194 <HAL_GPIO_Init>
 8009620:	2300      	movs	r3, #0
 8009622:	60fb      	str	r3, [r7, #12]
 8009624:	4b08      	ldr	r3, [pc, #32]	; (8009648 <HAL_I2C_MspInit+0x12c>)
 8009626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009628:	4a07      	ldr	r2, [pc, #28]	; (8009648 <HAL_I2C_MspInit+0x12c>)
 800962a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800962e:	6413      	str	r3, [r2, #64]	; 0x40
 8009630:	4b05      	ldr	r3, [pc, #20]	; (8009648 <HAL_I2C_MspInit+0x12c>)
 8009632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009638:	60fb      	str	r3, [r7, #12]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	bf00      	nop
 800963e:	3730      	adds	r7, #48	; 0x30
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	40005400 	.word	0x40005400
 8009648:	40023800 	.word	0x40023800
 800964c:	40020400 	.word	0x40020400
 8009650:	40005800 	.word	0x40005800

08009654 <HAL_SPI_MspInit>:
 8009654:	b580      	push	{r7, lr}
 8009656:	b08e      	sub	sp, #56	; 0x38
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009660:	2200      	movs	r2, #0
 8009662:	601a      	str	r2, [r3, #0]
 8009664:	605a      	str	r2, [r3, #4]
 8009666:	609a      	str	r2, [r3, #8]
 8009668:	60da      	str	r2, [r3, #12]
 800966a:	611a      	str	r2, [r3, #16]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a51      	ldr	r2, [pc, #324]	; (80097b8 <HAL_SPI_MspInit+0x164>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d14b      	bne.n	800970e <HAL_SPI_MspInit+0xba>
 8009676:	2300      	movs	r3, #0
 8009678:	623b      	str	r3, [r7, #32]
 800967a:	4b50      	ldr	r3, [pc, #320]	; (80097bc <HAL_SPI_MspInit+0x168>)
 800967c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967e:	4a4f      	ldr	r2, [pc, #316]	; (80097bc <HAL_SPI_MspInit+0x168>)
 8009680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009684:	6413      	str	r3, [r2, #64]	; 0x40
 8009686:	4b4d      	ldr	r3, [pc, #308]	; (80097bc <HAL_SPI_MspInit+0x168>)
 8009688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800968e:	623b      	str	r3, [r7, #32]
 8009690:	6a3b      	ldr	r3, [r7, #32]
 8009692:	2300      	movs	r3, #0
 8009694:	61fb      	str	r3, [r7, #28]
 8009696:	4b49      	ldr	r3, [pc, #292]	; (80097bc <HAL_SPI_MspInit+0x168>)
 8009698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969a:	4a48      	ldr	r2, [pc, #288]	; (80097bc <HAL_SPI_MspInit+0x168>)
 800969c:	f043 0304 	orr.w	r3, r3, #4
 80096a0:	6313      	str	r3, [r2, #48]	; 0x30
 80096a2:	4b46      	ldr	r3, [pc, #280]	; (80097bc <HAL_SPI_MspInit+0x168>)
 80096a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a6:	f003 0304 	and.w	r3, r3, #4
 80096aa:	61fb      	str	r3, [r7, #28]
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	2300      	movs	r3, #0
 80096b0:	61bb      	str	r3, [r7, #24]
 80096b2:	4b42      	ldr	r3, [pc, #264]	; (80097bc <HAL_SPI_MspInit+0x168>)
 80096b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b6:	4a41      	ldr	r2, [pc, #260]	; (80097bc <HAL_SPI_MspInit+0x168>)
 80096b8:	f043 0302 	orr.w	r3, r3, #2
 80096bc:	6313      	str	r3, [r2, #48]	; 0x30
 80096be:	4b3f      	ldr	r3, [pc, #252]	; (80097bc <HAL_SPI_MspInit+0x168>)
 80096c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c2:	f003 0302 	and.w	r3, r3, #2
 80096c6:	61bb      	str	r3, [r7, #24]
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	230c      	movs	r3, #12
 80096cc:	627b      	str	r3, [r7, #36]	; 0x24
 80096ce:	2302      	movs	r3, #2
 80096d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80096d2:	2300      	movs	r3, #0
 80096d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096d6:	2303      	movs	r3, #3
 80096d8:	633b      	str	r3, [r7, #48]	; 0x30
 80096da:	2305      	movs	r3, #5
 80096dc:	637b      	str	r3, [r7, #52]	; 0x34
 80096de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096e2:	4619      	mov	r1, r3
 80096e4:	4836      	ldr	r0, [pc, #216]	; (80097c0 <HAL_SPI_MspInit+0x16c>)
 80096e6:	f7f7 fd55 	bl	8001194 <HAL_GPIO_Init>
 80096ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80096ee:	627b      	str	r3, [r7, #36]	; 0x24
 80096f0:	2302      	movs	r3, #2
 80096f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80096f4:	2300      	movs	r3, #0
 80096f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096f8:	2303      	movs	r3, #3
 80096fa:	633b      	str	r3, [r7, #48]	; 0x30
 80096fc:	2305      	movs	r3, #5
 80096fe:	637b      	str	r3, [r7, #52]	; 0x34
 8009700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009704:	4619      	mov	r1, r3
 8009706:	482f      	ldr	r0, [pc, #188]	; (80097c4 <HAL_SPI_MspInit+0x170>)
 8009708:	f7f7 fd44 	bl	8001194 <HAL_GPIO_Init>
 800970c:	e050      	b.n	80097b0 <HAL_SPI_MspInit+0x15c>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a2d      	ldr	r2, [pc, #180]	; (80097c8 <HAL_SPI_MspInit+0x174>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d14b      	bne.n	80097b0 <HAL_SPI_MspInit+0x15c>
 8009718:	2300      	movs	r3, #0
 800971a:	617b      	str	r3, [r7, #20]
 800971c:	4b27      	ldr	r3, [pc, #156]	; (80097bc <HAL_SPI_MspInit+0x168>)
 800971e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009720:	4a26      	ldr	r2, [pc, #152]	; (80097bc <HAL_SPI_MspInit+0x168>)
 8009722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009726:	6413      	str	r3, [r2, #64]	; 0x40
 8009728:	4b24      	ldr	r3, [pc, #144]	; (80097bc <HAL_SPI_MspInit+0x168>)
 800972a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800972c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009730:	617b      	str	r3, [r7, #20]
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	2300      	movs	r3, #0
 8009736:	613b      	str	r3, [r7, #16]
 8009738:	4b20      	ldr	r3, [pc, #128]	; (80097bc <HAL_SPI_MspInit+0x168>)
 800973a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800973c:	4a1f      	ldr	r2, [pc, #124]	; (80097bc <HAL_SPI_MspInit+0x168>)
 800973e:	f043 0302 	orr.w	r3, r3, #2
 8009742:	6313      	str	r3, [r2, #48]	; 0x30
 8009744:	4b1d      	ldr	r3, [pc, #116]	; (80097bc <HAL_SPI_MspInit+0x168>)
 8009746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009748:	f003 0302 	and.w	r3, r3, #2
 800974c:	613b      	str	r3, [r7, #16]
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	2300      	movs	r3, #0
 8009752:	60fb      	str	r3, [r7, #12]
 8009754:	4b19      	ldr	r3, [pc, #100]	; (80097bc <HAL_SPI_MspInit+0x168>)
 8009756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009758:	4a18      	ldr	r2, [pc, #96]	; (80097bc <HAL_SPI_MspInit+0x168>)
 800975a:	f043 0304 	orr.w	r3, r3, #4
 800975e:	6313      	str	r3, [r2, #48]	; 0x30
 8009760:	4b16      	ldr	r3, [pc, #88]	; (80097bc <HAL_SPI_MspInit+0x168>)
 8009762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009764:	f003 0304 	and.w	r3, r3, #4
 8009768:	60fb      	str	r3, [r7, #12]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009770:	627b      	str	r3, [r7, #36]	; 0x24
 8009772:	2302      	movs	r3, #2
 8009774:	62bb      	str	r3, [r7, #40]	; 0x28
 8009776:	2300      	movs	r3, #0
 8009778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800977a:	2303      	movs	r3, #3
 800977c:	633b      	str	r3, [r7, #48]	; 0x30
 800977e:	2307      	movs	r3, #7
 8009780:	637b      	str	r3, [r7, #52]	; 0x34
 8009782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009786:	4619      	mov	r1, r3
 8009788:	480e      	ldr	r0, [pc, #56]	; (80097c4 <HAL_SPI_MspInit+0x170>)
 800978a:	f7f7 fd03 	bl	8001194 <HAL_GPIO_Init>
 800978e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009792:	627b      	str	r3, [r7, #36]	; 0x24
 8009794:	2302      	movs	r3, #2
 8009796:	62bb      	str	r3, [r7, #40]	; 0x28
 8009798:	2300      	movs	r3, #0
 800979a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800979c:	2303      	movs	r3, #3
 800979e:	633b      	str	r3, [r7, #48]	; 0x30
 80097a0:	2306      	movs	r3, #6
 80097a2:	637b      	str	r3, [r7, #52]	; 0x34
 80097a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097a8:	4619      	mov	r1, r3
 80097aa:	4805      	ldr	r0, [pc, #20]	; (80097c0 <HAL_SPI_MspInit+0x16c>)
 80097ac:	f7f7 fcf2 	bl	8001194 <HAL_GPIO_Init>
 80097b0:	bf00      	nop
 80097b2:	3738      	adds	r7, #56	; 0x38
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	40003800 	.word	0x40003800
 80097bc:	40023800 	.word	0x40023800
 80097c0:	40020800 	.word	0x40020800
 80097c4:	40020400 	.word	0x40020400
 80097c8:	40003c00 	.word	0x40003c00

080097cc <HAL_TIM_Base_MspInit>:
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b08c      	sub	sp, #48	; 0x30
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	f107 031c 	add.w	r3, r7, #28
 80097d8:	2200      	movs	r2, #0
 80097da:	601a      	str	r2, [r3, #0]
 80097dc:	605a      	str	r2, [r3, #4]
 80097de:	609a      	str	r2, [r3, #8]
 80097e0:	60da      	str	r2, [r3, #12]
 80097e2:	611a      	str	r2, [r3, #16]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a39      	ldr	r2, [pc, #228]	; (80098d0 <HAL_TIM_Base_MspInit+0x104>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d135      	bne.n	800985a <HAL_TIM_Base_MspInit+0x8e>
 80097ee:	2300      	movs	r3, #0
 80097f0:	61bb      	str	r3, [r7, #24]
 80097f2:	4b38      	ldr	r3, [pc, #224]	; (80098d4 <HAL_TIM_Base_MspInit+0x108>)
 80097f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097f6:	4a37      	ldr	r2, [pc, #220]	; (80098d4 <HAL_TIM_Base_MspInit+0x108>)
 80097f8:	f043 0301 	orr.w	r3, r3, #1
 80097fc:	6453      	str	r3, [r2, #68]	; 0x44
 80097fe:	4b35      	ldr	r3, [pc, #212]	; (80098d4 <HAL_TIM_Base_MspInit+0x108>)
 8009800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009802:	f003 0301 	and.w	r3, r3, #1
 8009806:	61bb      	str	r3, [r7, #24]
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	2300      	movs	r3, #0
 800980c:	617b      	str	r3, [r7, #20]
 800980e:	4b31      	ldr	r3, [pc, #196]	; (80098d4 <HAL_TIM_Base_MspInit+0x108>)
 8009810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009812:	4a30      	ldr	r2, [pc, #192]	; (80098d4 <HAL_TIM_Base_MspInit+0x108>)
 8009814:	f043 0301 	orr.w	r3, r3, #1
 8009818:	6313      	str	r3, [r2, #48]	; 0x30
 800981a:	4b2e      	ldr	r3, [pc, #184]	; (80098d4 <HAL_TIM_Base_MspInit+0x108>)
 800981c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981e:	f003 0301 	and.w	r3, r3, #1
 8009822:	617b      	str	r3, [r7, #20]
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800982a:	61fb      	str	r3, [r7, #28]
 800982c:	2302      	movs	r3, #2
 800982e:	623b      	str	r3, [r7, #32]
 8009830:	2300      	movs	r3, #0
 8009832:	627b      	str	r3, [r7, #36]	; 0x24
 8009834:	2300      	movs	r3, #0
 8009836:	62bb      	str	r3, [r7, #40]	; 0x28
 8009838:	2301      	movs	r3, #1
 800983a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800983c:	f107 031c 	add.w	r3, r7, #28
 8009840:	4619      	mov	r1, r3
 8009842:	4825      	ldr	r0, [pc, #148]	; (80098d8 <HAL_TIM_Base_MspInit+0x10c>)
 8009844:	f7f7 fca6 	bl	8001194 <HAL_GPIO_Init>
 8009848:	2200      	movs	r2, #0
 800984a:	2105      	movs	r1, #5
 800984c:	201b      	movs	r0, #27
 800984e:	f7f7 fc39 	bl	80010c4 <HAL_NVIC_SetPriority>
 8009852:	201b      	movs	r0, #27
 8009854:	f7f7 fc52 	bl	80010fc <HAL_NVIC_EnableIRQ>
 8009858:	e036      	b.n	80098c8 <HAL_TIM_Base_MspInit+0xfc>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009862:	d116      	bne.n	8009892 <HAL_TIM_Base_MspInit+0xc6>
 8009864:	2300      	movs	r3, #0
 8009866:	613b      	str	r3, [r7, #16]
 8009868:	4b1a      	ldr	r3, [pc, #104]	; (80098d4 <HAL_TIM_Base_MspInit+0x108>)
 800986a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986c:	4a19      	ldr	r2, [pc, #100]	; (80098d4 <HAL_TIM_Base_MspInit+0x108>)
 800986e:	f043 0301 	orr.w	r3, r3, #1
 8009872:	6413      	str	r3, [r2, #64]	; 0x40
 8009874:	4b17      	ldr	r3, [pc, #92]	; (80098d4 <HAL_TIM_Base_MspInit+0x108>)
 8009876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009878:	f003 0301 	and.w	r3, r3, #1
 800987c:	613b      	str	r3, [r7, #16]
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	2200      	movs	r2, #0
 8009882:	2105      	movs	r1, #5
 8009884:	201c      	movs	r0, #28
 8009886:	f7f7 fc1d 	bl	80010c4 <HAL_NVIC_SetPriority>
 800988a:	201c      	movs	r0, #28
 800988c:	f7f7 fc36 	bl	80010fc <HAL_NVIC_EnableIRQ>
 8009890:	e01a      	b.n	80098c8 <HAL_TIM_Base_MspInit+0xfc>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a11      	ldr	r2, [pc, #68]	; (80098dc <HAL_TIM_Base_MspInit+0x110>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d115      	bne.n	80098c8 <HAL_TIM_Base_MspInit+0xfc>
 800989c:	2300      	movs	r3, #0
 800989e:	60fb      	str	r3, [r7, #12]
 80098a0:	4b0c      	ldr	r3, [pc, #48]	; (80098d4 <HAL_TIM_Base_MspInit+0x108>)
 80098a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a4:	4a0b      	ldr	r2, [pc, #44]	; (80098d4 <HAL_TIM_Base_MspInit+0x108>)
 80098a6:	f043 0302 	orr.w	r3, r3, #2
 80098aa:	6413      	str	r3, [r2, #64]	; 0x40
 80098ac:	4b09      	ldr	r3, [pc, #36]	; (80098d4 <HAL_TIM_Base_MspInit+0x108>)
 80098ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b0:	f003 0302 	and.w	r3, r3, #2
 80098b4:	60fb      	str	r3, [r7, #12]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2200      	movs	r2, #0
 80098ba:	2105      	movs	r1, #5
 80098bc:	201d      	movs	r0, #29
 80098be:	f7f7 fc01 	bl	80010c4 <HAL_NVIC_SetPriority>
 80098c2:	201d      	movs	r0, #29
 80098c4:	f7f7 fc1a 	bl	80010fc <HAL_NVIC_EnableIRQ>
 80098c8:	bf00      	nop
 80098ca:	3730      	adds	r7, #48	; 0x30
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	40010000 	.word	0x40010000
 80098d4:	40023800 	.word	0x40023800
 80098d8:	40020000 	.word	0x40020000
 80098dc:	40000400 	.word	0x40000400

080098e0 <HAL_TIM_MspPostInit>:
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b08a      	sub	sp, #40	; 0x28
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	f107 0314 	add.w	r3, r7, #20
 80098ec:	2200      	movs	r2, #0
 80098ee:	601a      	str	r2, [r3, #0]
 80098f0:	605a      	str	r2, [r3, #4]
 80098f2:	609a      	str	r2, [r3, #8]
 80098f4:	60da      	str	r2, [r3, #12]
 80098f6:	611a      	str	r2, [r3, #16]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a24      	ldr	r2, [pc, #144]	; (8009990 <HAL_TIM_MspPostInit+0xb0>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d11f      	bne.n	8009942 <HAL_TIM_MspPostInit+0x62>
 8009902:	2300      	movs	r3, #0
 8009904:	613b      	str	r3, [r7, #16]
 8009906:	4b23      	ldr	r3, [pc, #140]	; (8009994 <HAL_TIM_MspPostInit+0xb4>)
 8009908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800990a:	4a22      	ldr	r2, [pc, #136]	; (8009994 <HAL_TIM_MspPostInit+0xb4>)
 800990c:	f043 0301 	orr.w	r3, r3, #1
 8009910:	6313      	str	r3, [r2, #48]	; 0x30
 8009912:	4b20      	ldr	r3, [pc, #128]	; (8009994 <HAL_TIM_MspPostInit+0xb4>)
 8009914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009916:	f003 0301 	and.w	r3, r3, #1
 800991a:	613b      	str	r3, [r7, #16]
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009922:	617b      	str	r3, [r7, #20]
 8009924:	2302      	movs	r3, #2
 8009926:	61bb      	str	r3, [r7, #24]
 8009928:	2300      	movs	r3, #0
 800992a:	61fb      	str	r3, [r7, #28]
 800992c:	2300      	movs	r3, #0
 800992e:	623b      	str	r3, [r7, #32]
 8009930:	2301      	movs	r3, #1
 8009932:	627b      	str	r3, [r7, #36]	; 0x24
 8009934:	f107 0314 	add.w	r3, r7, #20
 8009938:	4619      	mov	r1, r3
 800993a:	4817      	ldr	r0, [pc, #92]	; (8009998 <HAL_TIM_MspPostInit+0xb8>)
 800993c:	f7f7 fc2a 	bl	8001194 <HAL_GPIO_Init>
 8009940:	e022      	b.n	8009988 <HAL_TIM_MspPostInit+0xa8>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800994a:	d11d      	bne.n	8009988 <HAL_TIM_MspPostInit+0xa8>
 800994c:	2300      	movs	r3, #0
 800994e:	60fb      	str	r3, [r7, #12]
 8009950:	4b10      	ldr	r3, [pc, #64]	; (8009994 <HAL_TIM_MspPostInit+0xb4>)
 8009952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009954:	4a0f      	ldr	r2, [pc, #60]	; (8009994 <HAL_TIM_MspPostInit+0xb4>)
 8009956:	f043 0301 	orr.w	r3, r3, #1
 800995a:	6313      	str	r3, [r2, #48]	; 0x30
 800995c:	4b0d      	ldr	r3, [pc, #52]	; (8009994 <HAL_TIM_MspPostInit+0xb4>)
 800995e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009960:	f003 0301 	and.w	r3, r3, #1
 8009964:	60fb      	str	r3, [r7, #12]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2302      	movs	r3, #2
 800996a:	617b      	str	r3, [r7, #20]
 800996c:	2302      	movs	r3, #2
 800996e:	61bb      	str	r3, [r7, #24]
 8009970:	2300      	movs	r3, #0
 8009972:	61fb      	str	r3, [r7, #28]
 8009974:	2300      	movs	r3, #0
 8009976:	623b      	str	r3, [r7, #32]
 8009978:	2301      	movs	r3, #1
 800997a:	627b      	str	r3, [r7, #36]	; 0x24
 800997c:	f107 0314 	add.w	r3, r7, #20
 8009980:	4619      	mov	r1, r3
 8009982:	4805      	ldr	r0, [pc, #20]	; (8009998 <HAL_TIM_MspPostInit+0xb8>)
 8009984:	f7f7 fc06 	bl	8001194 <HAL_GPIO_Init>
 8009988:	bf00      	nop
 800998a:	3728      	adds	r7, #40	; 0x28
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	40010000 	.word	0x40010000
 8009994:	40023800 	.word	0x40023800
 8009998:	40020000 	.word	0x40020000

0800999c <HAL_TIM_Base_MspDeInit>:
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a19      	ldr	r2, [pc, #100]	; (8009a10 <HAL_TIM_Base_MspDeInit+0x74>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d10e      	bne.n	80099cc <HAL_TIM_Base_MspDeInit+0x30>
 80099ae:	4b19      	ldr	r3, [pc, #100]	; (8009a14 <HAL_TIM_Base_MspDeInit+0x78>)
 80099b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099b2:	4a18      	ldr	r2, [pc, #96]	; (8009a14 <HAL_TIM_Base_MspDeInit+0x78>)
 80099b4:	f023 0301 	bic.w	r3, r3, #1
 80099b8:	6453      	str	r3, [r2, #68]	; 0x44
 80099ba:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80099be:	4816      	ldr	r0, [pc, #88]	; (8009a18 <HAL_TIM_Base_MspDeInit+0x7c>)
 80099c0:	f7f7 fd6a 	bl	8001498 <HAL_GPIO_DeInit>
 80099c4:	201b      	movs	r0, #27
 80099c6:	f7f7 fba7 	bl	8001118 <HAL_NVIC_DisableIRQ>
 80099ca:	e01c      	b.n	8009a06 <HAL_TIM_Base_MspDeInit+0x6a>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099d4:	d109      	bne.n	80099ea <HAL_TIM_Base_MspDeInit+0x4e>
 80099d6:	4b0f      	ldr	r3, [pc, #60]	; (8009a14 <HAL_TIM_Base_MspDeInit+0x78>)
 80099d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099da:	4a0e      	ldr	r2, [pc, #56]	; (8009a14 <HAL_TIM_Base_MspDeInit+0x78>)
 80099dc:	f023 0301 	bic.w	r3, r3, #1
 80099e0:	6413      	str	r3, [r2, #64]	; 0x40
 80099e2:	201c      	movs	r0, #28
 80099e4:	f7f7 fb98 	bl	8001118 <HAL_NVIC_DisableIRQ>
 80099e8:	e00d      	b.n	8009a06 <HAL_TIM_Base_MspDeInit+0x6a>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a0b      	ldr	r2, [pc, #44]	; (8009a1c <HAL_TIM_Base_MspDeInit+0x80>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d108      	bne.n	8009a06 <HAL_TIM_Base_MspDeInit+0x6a>
 80099f4:	4b07      	ldr	r3, [pc, #28]	; (8009a14 <HAL_TIM_Base_MspDeInit+0x78>)
 80099f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f8:	4a06      	ldr	r2, [pc, #24]	; (8009a14 <HAL_TIM_Base_MspDeInit+0x78>)
 80099fa:	f023 0302 	bic.w	r3, r3, #2
 80099fe:	6413      	str	r3, [r2, #64]	; 0x40
 8009a00:	201d      	movs	r0, #29
 8009a02:	f7f7 fb89 	bl	8001118 <HAL_NVIC_DisableIRQ>
 8009a06:	bf00      	nop
 8009a08:	3708      	adds	r7, #8
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	40010000 	.word	0x40010000
 8009a14:	40023800 	.word	0x40023800
 8009a18:	40020000 	.word	0x40020000
 8009a1c:	40000400 	.word	0x40000400

08009a20 <HAL_UART_MspInit>:
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b08e      	sub	sp, #56	; 0x38
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	601a      	str	r2, [r3, #0]
 8009a30:	605a      	str	r2, [r3, #4]
 8009a32:	609a      	str	r2, [r3, #8]
 8009a34:	60da      	str	r2, [r3, #12]
 8009a36:	611a      	str	r2, [r3, #16]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a4f      	ldr	r2, [pc, #316]	; (8009b7c <HAL_UART_MspInit+0x15c>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d12d      	bne.n	8009a9e <HAL_UART_MspInit+0x7e>
 8009a42:	2300      	movs	r3, #0
 8009a44:	623b      	str	r3, [r7, #32]
 8009a46:	4b4e      	ldr	r3, [pc, #312]	; (8009b80 <HAL_UART_MspInit+0x160>)
 8009a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a4a:	4a4d      	ldr	r2, [pc, #308]	; (8009b80 <HAL_UART_MspInit+0x160>)
 8009a4c:	f043 0310 	orr.w	r3, r3, #16
 8009a50:	6453      	str	r3, [r2, #68]	; 0x44
 8009a52:	4b4b      	ldr	r3, [pc, #300]	; (8009b80 <HAL_UART_MspInit+0x160>)
 8009a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a56:	f003 0310 	and.w	r3, r3, #16
 8009a5a:	623b      	str	r3, [r7, #32]
 8009a5c:	6a3b      	ldr	r3, [r7, #32]
 8009a5e:	2300      	movs	r3, #0
 8009a60:	61fb      	str	r3, [r7, #28]
 8009a62:	4b47      	ldr	r3, [pc, #284]	; (8009b80 <HAL_UART_MspInit+0x160>)
 8009a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a66:	4a46      	ldr	r2, [pc, #280]	; (8009b80 <HAL_UART_MspInit+0x160>)
 8009a68:	f043 0301 	orr.w	r3, r3, #1
 8009a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8009a6e:	4b44      	ldr	r3, [pc, #272]	; (8009b80 <HAL_UART_MspInit+0x160>)
 8009a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a72:	f003 0301 	and.w	r3, r3, #1
 8009a76:	61fb      	str	r3, [r7, #28]
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8009a80:	2302      	movs	r3, #2
 8009a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a84:	2301      	movs	r3, #1
 8009a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a88:	2303      	movs	r3, #3
 8009a8a:	633b      	str	r3, [r7, #48]	; 0x30
 8009a8c:	2307      	movs	r3, #7
 8009a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8009a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a94:	4619      	mov	r1, r3
 8009a96:	483b      	ldr	r0, [pc, #236]	; (8009b84 <HAL_UART_MspInit+0x164>)
 8009a98:	f7f7 fb7c 	bl	8001194 <HAL_GPIO_Init>
 8009a9c:	e06a      	b.n	8009b74 <HAL_UART_MspInit+0x154>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a39      	ldr	r2, [pc, #228]	; (8009b88 <HAL_UART_MspInit+0x168>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d134      	bne.n	8009b12 <HAL_UART_MspInit+0xf2>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	61bb      	str	r3, [r7, #24]
 8009aac:	4b34      	ldr	r3, [pc, #208]	; (8009b80 <HAL_UART_MspInit+0x160>)
 8009aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab0:	4a33      	ldr	r2, [pc, #204]	; (8009b80 <HAL_UART_MspInit+0x160>)
 8009ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ab6:	6413      	str	r3, [r2, #64]	; 0x40
 8009ab8:	4b31      	ldr	r3, [pc, #196]	; (8009b80 <HAL_UART_MspInit+0x160>)
 8009aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ac0:	61bb      	str	r3, [r7, #24]
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	617b      	str	r3, [r7, #20]
 8009ac8:	4b2d      	ldr	r3, [pc, #180]	; (8009b80 <HAL_UART_MspInit+0x160>)
 8009aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009acc:	4a2c      	ldr	r2, [pc, #176]	; (8009b80 <HAL_UART_MspInit+0x160>)
 8009ace:	f043 0301 	orr.w	r3, r3, #1
 8009ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8009ad4:	4b2a      	ldr	r3, [pc, #168]	; (8009b80 <HAL_UART_MspInit+0x160>)
 8009ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad8:	f003 0301 	and.w	r3, r3, #1
 8009adc:	617b      	str	r3, [r7, #20]
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	230c      	movs	r3, #12
 8009ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ae8:	2301      	movs	r3, #1
 8009aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009aec:	2303      	movs	r3, #3
 8009aee:	633b      	str	r3, [r7, #48]	; 0x30
 8009af0:	2307      	movs	r3, #7
 8009af2:	637b      	str	r3, [r7, #52]	; 0x34
 8009af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009af8:	4619      	mov	r1, r3
 8009afa:	4822      	ldr	r0, [pc, #136]	; (8009b84 <HAL_UART_MspInit+0x164>)
 8009afc:	f7f7 fb4a 	bl	8001194 <HAL_GPIO_Init>
 8009b00:	2200      	movs	r2, #0
 8009b02:	2105      	movs	r1, #5
 8009b04:	2026      	movs	r0, #38	; 0x26
 8009b06:	f7f7 fadd 	bl	80010c4 <HAL_NVIC_SetPriority>
 8009b0a:	2026      	movs	r0, #38	; 0x26
 8009b0c:	f7f7 faf6 	bl	80010fc <HAL_NVIC_EnableIRQ>
 8009b10:	e030      	b.n	8009b74 <HAL_UART_MspInit+0x154>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a1d      	ldr	r2, [pc, #116]	; (8009b8c <HAL_UART_MspInit+0x16c>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d12b      	bne.n	8009b74 <HAL_UART_MspInit+0x154>
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	613b      	str	r3, [r7, #16]
 8009b20:	4b17      	ldr	r3, [pc, #92]	; (8009b80 <HAL_UART_MspInit+0x160>)
 8009b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b24:	4a16      	ldr	r2, [pc, #88]	; (8009b80 <HAL_UART_MspInit+0x160>)
 8009b26:	f043 0320 	orr.w	r3, r3, #32
 8009b2a:	6453      	str	r3, [r2, #68]	; 0x44
 8009b2c:	4b14      	ldr	r3, [pc, #80]	; (8009b80 <HAL_UART_MspInit+0x160>)
 8009b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b30:	f003 0320 	and.w	r3, r3, #32
 8009b34:	613b      	str	r3, [r7, #16]
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	2300      	movs	r3, #0
 8009b3a:	60fb      	str	r3, [r7, #12]
 8009b3c:	4b10      	ldr	r3, [pc, #64]	; (8009b80 <HAL_UART_MspInit+0x160>)
 8009b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b40:	4a0f      	ldr	r2, [pc, #60]	; (8009b80 <HAL_UART_MspInit+0x160>)
 8009b42:	f043 0304 	orr.w	r3, r3, #4
 8009b46:	6313      	str	r3, [r2, #48]	; 0x30
 8009b48:	4b0d      	ldr	r3, [pc, #52]	; (8009b80 <HAL_UART_MspInit+0x160>)
 8009b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4c:	f003 0304 	and.w	r3, r3, #4
 8009b50:	60fb      	str	r3, [r7, #12]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	23c0      	movs	r3, #192	; 0xc0
 8009b56:	627b      	str	r3, [r7, #36]	; 0x24
 8009b58:	2302      	movs	r3, #2
 8009b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b60:	2303      	movs	r3, #3
 8009b62:	633b      	str	r3, [r7, #48]	; 0x30
 8009b64:	2308      	movs	r3, #8
 8009b66:	637b      	str	r3, [r7, #52]	; 0x34
 8009b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	4808      	ldr	r0, [pc, #32]	; (8009b90 <HAL_UART_MspInit+0x170>)
 8009b70:	f7f7 fb10 	bl	8001194 <HAL_GPIO_Init>
 8009b74:	bf00      	nop
 8009b76:	3738      	adds	r7, #56	; 0x38
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	40011000 	.word	0x40011000
 8009b80:	40023800 	.word	0x40023800
 8009b84:	40020000 	.word	0x40020000
 8009b88:	40004400 	.word	0x40004400
 8009b8c:	40011400 	.word	0x40011400
 8009b90:	40020800 	.word	0x40020800

08009b94 <HAL_InitTick>:
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b08c      	sub	sp, #48	; 0x30
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	6879      	ldr	r1, [r7, #4]
 8009ba8:	201e      	movs	r0, #30
 8009baa:	f7f7 fa8b 	bl	80010c4 <HAL_NVIC_SetPriority>
 8009bae:	201e      	movs	r0, #30
 8009bb0:	f7f7 faa4 	bl	80010fc <HAL_NVIC_EnableIRQ>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	60fb      	str	r3, [r7, #12]
 8009bb8:	4b1f      	ldr	r3, [pc, #124]	; (8009c38 <HAL_InitTick+0xa4>)
 8009bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bbc:	4a1e      	ldr	r2, [pc, #120]	; (8009c38 <HAL_InitTick+0xa4>)
 8009bbe:	f043 0304 	orr.w	r3, r3, #4
 8009bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8009bc4:	4b1c      	ldr	r3, [pc, #112]	; (8009c38 <HAL_InitTick+0xa4>)
 8009bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc8:	f003 0304 	and.w	r3, r3, #4
 8009bcc:	60fb      	str	r3, [r7, #12]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f107 0210 	add.w	r2, r7, #16
 8009bd4:	f107 0314 	add.w	r3, r7, #20
 8009bd8:	4611      	mov	r1, r2
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7f9 fe8e 	bl	80038fc <HAL_RCC_GetClockConfig>
 8009be0:	f7f9 fe64 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8009be4:	4603      	mov	r3, r0
 8009be6:	005b      	lsls	r3, r3, #1
 8009be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bec:	4a13      	ldr	r2, [pc, #76]	; (8009c3c <HAL_InitTick+0xa8>)
 8009bee:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf2:	0c9b      	lsrs	r3, r3, #18
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bf8:	4b11      	ldr	r3, [pc, #68]	; (8009c40 <HAL_InitTick+0xac>)
 8009bfa:	4a12      	ldr	r2, [pc, #72]	; (8009c44 <HAL_InitTick+0xb0>)
 8009bfc:	601a      	str	r2, [r3, #0]
 8009bfe:	4b10      	ldr	r3, [pc, #64]	; (8009c40 <HAL_InitTick+0xac>)
 8009c00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009c04:	60da      	str	r2, [r3, #12]
 8009c06:	4a0e      	ldr	r2, [pc, #56]	; (8009c40 <HAL_InitTick+0xac>)
 8009c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0a:	6053      	str	r3, [r2, #4]
 8009c0c:	4b0c      	ldr	r3, [pc, #48]	; (8009c40 <HAL_InitTick+0xac>)
 8009c0e:	2200      	movs	r2, #0
 8009c10:	611a      	str	r2, [r3, #16]
 8009c12:	4b0b      	ldr	r3, [pc, #44]	; (8009c40 <HAL_InitTick+0xac>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	609a      	str	r2, [r3, #8]
 8009c18:	4809      	ldr	r0, [pc, #36]	; (8009c40 <HAL_InitTick+0xac>)
 8009c1a:	f7f9 ff05 	bl	8003a28 <HAL_TIM_Base_Init>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d104      	bne.n	8009c2e <HAL_InitTick+0x9a>
 8009c24:	4806      	ldr	r0, [pc, #24]	; (8009c40 <HAL_InitTick+0xac>)
 8009c26:	f7f9 ff5a 	bl	8003ade <HAL_TIM_Base_Start_IT>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	e000      	b.n	8009c30 <HAL_InitTick+0x9c>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	4618      	mov	r0, r3
 8009c32:	3730      	adds	r7, #48	; 0x30
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	40023800 	.word	0x40023800
 8009c3c:	431bde83 	.word	0x431bde83
 8009c40:	20005378 	.word	0x20005378
 8009c44:	40000800 	.word	0x40000800

08009c48 <NMI_Handler>:
 8009c48:	b480      	push	{r7}
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	bf00      	nop
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr

08009c56 <HardFault_Handler>:
 8009c56:	b480      	push	{r7}
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	e7fe      	b.n	8009c5a <HardFault_Handler+0x4>

08009c5c <MemManage_Handler>:
 8009c5c:	b480      	push	{r7}
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	e7fe      	b.n	8009c60 <MemManage_Handler+0x4>

08009c62 <BusFault_Handler>:
 8009c62:	b480      	push	{r7}
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	e7fe      	b.n	8009c66 <BusFault_Handler+0x4>

08009c68 <UsageFault_Handler>:
 8009c68:	b480      	push	{r7}
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	e7fe      	b.n	8009c6c <UsageFault_Handler+0x4>

08009c6e <DebugMon_Handler>:
 8009c6e:	b480      	push	{r7}
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	bf00      	nop
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <TIM1_CC_IRQHandler>:
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	4802      	ldr	r0, [pc, #8]	; (8009c8c <TIM1_CC_IRQHandler+0x10>)
 8009c82:	f7fa f85d 	bl	8003d40 <HAL_TIM_IRQHandler>
 8009c86:	bf00      	nop
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	20004fcc 	.word	0x20004fcc

08009c90 <TIM2_IRQHandler>:
 8009c90:	b580      	push	{r7, lr}
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	4802      	ldr	r0, [pc, #8]	; (8009ca0 <TIM2_IRQHandler+0x10>)
 8009c96:	f7fa f853 	bl	8003d40 <HAL_TIM_IRQHandler>
 8009c9a:	bf00      	nop
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	20005090 	.word	0x20005090

08009ca4 <TIM3_IRQHandler>:
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	4802      	ldr	r0, [pc, #8]	; (8009cb4 <TIM3_IRQHandler+0x10>)
 8009caa:	f7fa f849 	bl	8003d40 <HAL_TIM_IRQHandler>
 8009cae:	bf00      	nop
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	20004e70 	.word	0x20004e70

08009cb8 <TIM4_IRQHandler>:
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	4802      	ldr	r0, [pc, #8]	; (8009cc8 <TIM4_IRQHandler+0x10>)
 8009cbe:	f7fa f83f 	bl	8003d40 <HAL_TIM_IRQHandler>
 8009cc2:	bf00      	nop
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	20005378 	.word	0x20005378

08009ccc <I2C1_EV_IRQHandler>:
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	4802      	ldr	r0, [pc, #8]	; (8009cdc <I2C1_EV_IRQHandler+0x10>)
 8009cd2:	f7f7 fe37 	bl	8001944 <HAL_I2C_EV_IRQHandler>
 8009cd6:	bf00      	nop
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	20004d9c 	.word	0x20004d9c

08009ce0 <I2C1_ER_IRQHandler>:
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	4802      	ldr	r0, [pc, #8]	; (8009cf0 <I2C1_ER_IRQHandler+0x10>)
 8009ce6:	f7f7 ff93 	bl	8001c10 <HAL_I2C_ER_IRQHandler>
 8009cea:	bf00      	nop
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	20004d9c 	.word	0x20004d9c

08009cf4 <USART2_IRQHandler>:
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	4802      	ldr	r0, [pc, #8]	; (8009d04 <USART2_IRQHandler+0x10>)
 8009cfa:	f7fb f8db 	bl	8004eb4 <HAL_UART_IRQHandler>
 8009cfe:	bf00      	nop
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	200050d4 	.word	0x200050d4

08009d08 <_read>:
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
 8009d14:	2300      	movs	r3, #0
 8009d16:	617b      	str	r3, [r7, #20]
 8009d18:	e00a      	b.n	8009d30 <_read+0x28>
 8009d1a:	f3af 8000 	nop.w
 8009d1e:	4601      	mov	r1, r0
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	1c5a      	adds	r2, r3, #1
 8009d24:	60ba      	str	r2, [r7, #8]
 8009d26:	b2ca      	uxtb	r2, r1
 8009d28:	701a      	strb	r2, [r3, #0]
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	617b      	str	r3, [r7, #20]
 8009d30:	697a      	ldr	r2, [r7, #20]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	dbf0      	blt.n	8009d1a <_read+0x12>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3718      	adds	r7, #24
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <_write>:
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b086      	sub	sp, #24
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	60f8      	str	r0, [r7, #12]
 8009d4a:	60b9      	str	r1, [r7, #8]
 8009d4c:	607a      	str	r2, [r7, #4]
 8009d4e:	2300      	movs	r3, #0
 8009d50:	617b      	str	r3, [r7, #20]
 8009d52:	e009      	b.n	8009d68 <_write+0x26>
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	1c5a      	adds	r2, r3, #1
 8009d58:	60ba      	str	r2, [r7, #8]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7fe fcf3 	bl	8008748 <__io_putchar>
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	3301      	adds	r3, #1
 8009d66:	617b      	str	r3, [r7, #20]
 8009d68:	697a      	ldr	r2, [r7, #20]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	dbf1      	blt.n	8009d54 <_write+0x12>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4618      	mov	r0, r3
 8009d74:	3718      	adds	r7, #24
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <_close>:
 8009d7a:	b480      	push	{r7}
 8009d7c:	b083      	sub	sp, #12
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	f04f 33ff 	mov.w	r3, #4294967295
 8009d86:	4618      	mov	r0, r3
 8009d88:	370c      	adds	r7, #12
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr

08009d92 <_fstat>:
 8009d92:	b480      	push	{r7}
 8009d94:	b083      	sub	sp, #12
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	6039      	str	r1, [r7, #0]
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009da2:	605a      	str	r2, [r3, #4]
 8009da4:	2300      	movs	r3, #0
 8009da6:	4618      	mov	r0, r3
 8009da8:	370c      	adds	r7, #12
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr

08009db2 <_isatty>:
 8009db2:	b480      	push	{r7}
 8009db4:	b083      	sub	sp, #12
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
 8009dba:	2301      	movs	r3, #1
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <_lseek>:
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3714      	adds	r7, #20
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
	...

08009de4 <_sbrk>:
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	4b11      	ldr	r3, [pc, #68]	; (8009e34 <_sbrk+0x50>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d102      	bne.n	8009dfa <_sbrk+0x16>
 8009df4:	4b0f      	ldr	r3, [pc, #60]	; (8009e34 <_sbrk+0x50>)
 8009df6:	4a10      	ldr	r2, [pc, #64]	; (8009e38 <_sbrk+0x54>)
 8009df8:	601a      	str	r2, [r3, #0]
 8009dfa:	4b0e      	ldr	r3, [pc, #56]	; (8009e34 <_sbrk+0x50>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	60fb      	str	r3, [r7, #12]
 8009e00:	4b0c      	ldr	r3, [pc, #48]	; (8009e34 <_sbrk+0x50>)
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4413      	add	r3, r2
 8009e08:	466a      	mov	r2, sp
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d907      	bls.n	8009e1e <_sbrk+0x3a>
 8009e0e:	f000 ff19 	bl	800ac44 <__errno>
 8009e12:	4602      	mov	r2, r0
 8009e14:	230c      	movs	r3, #12
 8009e16:	6013      	str	r3, [r2, #0]
 8009e18:	f04f 33ff 	mov.w	r3, #4294967295
 8009e1c:	e006      	b.n	8009e2c <_sbrk+0x48>
 8009e1e:	4b05      	ldr	r3, [pc, #20]	; (8009e34 <_sbrk+0x50>)
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4413      	add	r3, r2
 8009e26:	4a03      	ldr	r2, [pc, #12]	; (8009e34 <_sbrk+0x50>)
 8009e28:	6013      	str	r3, [r2, #0]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	200040e8 	.word	0x200040e8
 8009e38:	200053c0 	.word	0x200053c0

08009e3c <SystemInit>:
 8009e3c:	b480      	push	{r7}
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	4b16      	ldr	r3, [pc, #88]	; (8009e9c <SystemInit+0x60>)
 8009e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e46:	4a15      	ldr	r2, [pc, #84]	; (8009e9c <SystemInit+0x60>)
 8009e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8009e50:	4b13      	ldr	r3, [pc, #76]	; (8009ea0 <SystemInit+0x64>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a12      	ldr	r2, [pc, #72]	; (8009ea0 <SystemInit+0x64>)
 8009e56:	f043 0301 	orr.w	r3, r3, #1
 8009e5a:	6013      	str	r3, [r2, #0]
 8009e5c:	4b10      	ldr	r3, [pc, #64]	; (8009ea0 <SystemInit+0x64>)
 8009e5e:	2200      	movs	r2, #0
 8009e60:	609a      	str	r2, [r3, #8]
 8009e62:	4b0f      	ldr	r3, [pc, #60]	; (8009ea0 <SystemInit+0x64>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a0e      	ldr	r2, [pc, #56]	; (8009ea0 <SystemInit+0x64>)
 8009e68:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8009e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e70:	6013      	str	r3, [r2, #0]
 8009e72:	4b0b      	ldr	r3, [pc, #44]	; (8009ea0 <SystemInit+0x64>)
 8009e74:	4a0b      	ldr	r2, [pc, #44]	; (8009ea4 <SystemInit+0x68>)
 8009e76:	605a      	str	r2, [r3, #4]
 8009e78:	4b09      	ldr	r3, [pc, #36]	; (8009ea0 <SystemInit+0x64>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a08      	ldr	r2, [pc, #32]	; (8009ea0 <SystemInit+0x64>)
 8009e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e82:	6013      	str	r3, [r2, #0]
 8009e84:	4b06      	ldr	r3, [pc, #24]	; (8009ea0 <SystemInit+0x64>)
 8009e86:	2200      	movs	r2, #0
 8009e88:	60da      	str	r2, [r3, #12]
 8009e8a:	4b04      	ldr	r3, [pc, #16]	; (8009e9c <SystemInit+0x60>)
 8009e8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009e90:	609a      	str	r2, [r3, #8]
 8009e92:	bf00      	nop
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr
 8009e9c:	e000ed00 	.word	0xe000ed00
 8009ea0:	40023800 	.word	0x40023800
 8009ea4:	24003010 	.word	0x24003010

08009ea8 <TimerInit>:
 8009ea8:	b490      	push	{r4, r7}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	f04f 0300 	mov.w	r3, #0
 8009eb6:	f04f 0400 	mov.w	r4, #0
 8009eba:	e9c2 3400 	strd	r3, r4, [r2]
 8009ebe:	bf00      	nop
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bc90      	pop	{r4, r7}
 8009ec6:	4770      	bx	lr

08009ec8 <TimerIsExpired>:
 8009ec8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009ecc:	b086      	sub	sp, #24
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	f7f7 f811 	bl	8000ef8 <HAL_GetTick>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	f04f 0400 	mov.w	r4, #0
 8009edc:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	4622      	mov	r2, r4
 8009eea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009eee:	1ac9      	subs	r1, r1, r3
 8009ef0:	eb62 0204 	sbc.w	r2, r2, r4
 8009ef4:	468b      	mov	fp, r1
 8009ef6:	4694      	mov	ip, r2
 8009ef8:	e9c7 bc02 	strd	fp, ip, [r7, #8]
 8009efc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	f174 0300 	sbcs.w	r3, r4, #0
 8009f06:	db03      	blt.n	8009f10 <TimerIsExpired+0x48>
 8009f08:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009f0c:	4323      	orrs	r3, r4
 8009f0e:	d101      	bne.n	8009f14 <TimerIsExpired+0x4c>
 8009f10:	2301      	movs	r3, #1
 8009f12:	e000      	b.n	8009f16 <TimerIsExpired+0x4e>
 8009f14:	2300      	movs	r3, #0
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3718      	adds	r7, #24
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08009f22 <TimerCountdownMS>:
 8009f22:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
 8009f2e:	f7f6 ffe3 	bl	8000ef8 <HAL_GetTick>
 8009f32:	4603      	mov	r3, r0
 8009f34:	f04f 0400 	mov.w	r4, #0
 8009f38:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	4619      	mov	r1, r3
 8009f40:	f04f 0200 	mov.w	r2, #0
 8009f44:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009f48:	eb13 0b01 	adds.w	fp, r3, r1
 8009f4c:	eb44 0c02 	adc.w	ip, r4, r2
 8009f50:	465b      	mov	r3, fp
 8009f52:	4664      	mov	r4, ip
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	e9c2 3400 	strd	r3, r4, [r2]
 8009f5a:	bf00      	nop
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08009f64 <TimerCountdown>:
 8009f64:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009f68:	b084      	sub	sp, #16
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
 8009f6e:	6039      	str	r1, [r7, #0]
 8009f70:	f7f6 ffc2 	bl	8000ef8 <HAL_GetTick>
 8009f74:	4603      	mov	r3, r0
 8009f76:	f04f 0400 	mov.w	r4, #0
 8009f7a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009f84:	fb02 f303 	mul.w	r3, r2, r3
 8009f88:	4619      	mov	r1, r3
 8009f8a:	f04f 0200 	mov.w	r2, #0
 8009f8e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009f92:	eb13 0b01 	adds.w	fp, r3, r1
 8009f96:	eb44 0c02 	adc.w	ip, r4, r2
 8009f9a:	465b      	mov	r3, fp
 8009f9c:	4664      	mov	r4, ip
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	e9c2 3400 	strd	r3, r4, [r2]
 8009fa4:	bf00      	nop
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08009fae <TimerLeftMS>:
 8009fae:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	f7f6 ff9e 	bl	8000ef8 <HAL_GetTick>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	f04f 0400 	mov.w	r4, #0
 8009fc2:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009fcc:	4619      	mov	r1, r3
 8009fce:	4622      	mov	r2, r4
 8009fd0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009fd4:	1ac9      	subs	r1, r1, r3
 8009fd6:	eb62 0204 	sbc.w	r2, r2, r4
 8009fda:	468b      	mov	fp, r1
 8009fdc:	4694      	mov	ip, r2
 8009fde:	e9c7 bc02 	strd	fp, ip, [r7, #8]
 8009fe2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	f174 0200 	sbcs.w	r2, r4, #0
 8009fec:	da03      	bge.n	8009ff6 <TimerLeftMS+0x48>
 8009fee:	f04f 0300 	mov.w	r3, #0
 8009ff2:	f04f 0400 	mov.w	r4, #0
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3718      	adds	r7, #24
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800a000 <NewMessageData>:
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	68ba      	ldr	r2, [r7, #8]
 800a010:	605a      	str	r2, [r3, #4]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	601a      	str	r2, [r3, #0]
 800a018:	bf00      	nop
 800a01a:	3714      	adds	r7, #20
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <sendPacket>:
 800a024:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a026:	b087      	sub	sp, #28
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	607a      	str	r2, [r7, #4]
 800a030:	f04f 33ff 	mov.w	r3, #4294967295
 800a034:	617b      	str	r3, [r7, #20]
 800a036:	2300      	movs	r3, #0
 800a038:	613b      	str	r3, [r7, #16]
 800a03a:	e018      	b.n	800a06e <sendPacket+0x4a>
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a040:	689c      	ldr	r4, [r3, #8]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	691a      	ldr	r2, [r3, #16]
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	18d6      	adds	r6, r2, r3
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7ff ffad 	bl	8009fae <TimerLeftMS>
 800a054:	4603      	mov	r3, r0
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	4631      	mov	r1, r6
 800a05a:	4628      	mov	r0, r5
 800a05c:	47a0      	blx	r4
 800a05e:	6178      	str	r0, [r7, #20]
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	2b00      	cmp	r3, #0
 800a064:	db0e      	blt.n	800a084 <sendPacket+0x60>
 800a066:	693a      	ldr	r2, [r7, #16]
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	4413      	add	r3, r2
 800a06c:	613b      	str	r3, [r7, #16]
 800a06e:	693a      	ldr	r2, [r7, #16]
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	429a      	cmp	r2, r3
 800a074:	da07      	bge.n	800a086 <sendPacket+0x62>
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f7ff ff26 	bl	8009ec8 <TimerIsExpired>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d0dc      	beq.n	800a03c <sendPacket+0x18>
 800a082:	e000      	b.n	800a086 <sendPacket+0x62>
 800a084:	bf00      	nop
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d10b      	bne.n	800a0a6 <sendPacket+0x82>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	699b      	ldr	r3, [r3, #24]
 800a098:	4619      	mov	r1, r3
 800a09a:	4610      	mov	r0, r2
 800a09c:	f7ff ff62 	bl	8009f64 <TimerCountdown>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	617b      	str	r3, [r7, #20]
 800a0a4:	e002      	b.n	800a0ac <sendPacket+0x88>
 800a0a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0aa:	617b      	str	r3, [r7, #20]
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	371c      	adds	r7, #28
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a0b6 <decodePacket>:
 800a0b6:	b590      	push	{r4, r7, lr}
 800a0b8:	b08b      	sub	sp, #44	; 0x2c
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	60f8      	str	r0, [r7, #12]
 800a0be:	60b9      	str	r1, [r7, #8]
 800a0c0:	607a      	str	r2, [r7, #4]
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	623b      	str	r3, [r7, #32]
 800a0ca:	2304      	movs	r3, #4
 800a0cc:	61fb      	str	r3, [r7, #28]
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	601a      	str	r2, [r3, #0]
 800a0d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0d8:	61bb      	str	r3, [r7, #24]
 800a0da:	6a3b      	ldr	r3, [r7, #32]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	623b      	str	r3, [r7, #32]
 800a0e0:	6a3a      	ldr	r2, [r7, #32]
 800a0e2:	69fb      	ldr	r3, [r7, #28]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	dd03      	ble.n	800a0f0 <decodePacket+0x3a>
 800a0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ec:	61bb      	str	r3, [r7, #24]
 800a0ee:	e021      	b.n	800a134 <decodePacket+0x7e>
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0f4:	685c      	ldr	r4, [r3, #4]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a0fa:	f107 0117 	add.w	r1, r7, #23
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	47a0      	blx	r4
 800a104:	61b8      	str	r0, [r7, #24]
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d112      	bne.n	800a132 <decodePacket+0x7c>
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	7dfb      	ldrb	r3, [r7, #23]
 800a112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a116:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a118:	fb01 f303 	mul.w	r3, r1, r3
 800a11c:	441a      	add	r2, r3
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	601a      	str	r2, [r3, #0]
 800a122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a124:	01db      	lsls	r3, r3, #7
 800a126:	627b      	str	r3, [r7, #36]	; 0x24
 800a128:	7dfb      	ldrb	r3, [r7, #23]
 800a12a:	b25b      	sxtb	r3, r3
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	dbd1      	blt.n	800a0d4 <decodePacket+0x1e>
 800a130:	e000      	b.n	800a134 <decodePacket+0x7e>
 800a132:	bf00      	nop
 800a134:	6a3b      	ldr	r3, [r7, #32]
 800a136:	4618      	mov	r0, r3
 800a138:	372c      	adds	r7, #44	; 0x2c
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd90      	pop	{r4, r7, pc}

0800a13e <readPacket>:
 800a13e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a140:	b089      	sub	sp, #36	; 0x24
 800a142:	af00      	add	r7, sp, #0
 800a144:	60f8      	str	r0, [r7, #12]
 800a146:	60b9      	str	r1, [r7, #8]
 800a148:	f04f 33ff 	mov.w	r3, #4294967295
 800a14c:	61fb      	str	r3, [r7, #28]
 800a14e:	2300      	movs	r3, #0
 800a150:	617b      	str	r3, [r7, #20]
 800a152:	2300      	movs	r3, #0
 800a154:	61bb      	str	r3, [r7, #24]
 800a156:	2300      	movs	r3, #0
 800a158:	613b      	str	r3, [r7, #16]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a15e:	685c      	ldr	r4, [r3, #4]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	695e      	ldr	r6, [r3, #20]
 800a168:	68b8      	ldr	r0, [r7, #8]
 800a16a:	f7ff ff20 	bl	8009fae <TimerLeftMS>
 800a16e:	4603      	mov	r3, r0
 800a170:	2201      	movs	r2, #1
 800a172:	4631      	mov	r1, r6
 800a174:	4628      	mov	r0, r5
 800a176:	47a0      	blx	r4
 800a178:	4603      	mov	r3, r0
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d13b      	bne.n	800a1f6 <readPacket+0xb8>
 800a17e:	2301      	movs	r3, #1
 800a180:	61bb      	str	r3, [r7, #24]
 800a182:	68b8      	ldr	r0, [r7, #8]
 800a184:	f7ff ff13 	bl	8009fae <TimerLeftMS>
 800a188:	4602      	mov	r2, r0
 800a18a:	f107 0310 	add.w	r3, r7, #16
 800a18e:	4619      	mov	r1, r3
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f7ff ff90 	bl	800a0b6 <decodePacket>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	695b      	ldr	r3, [r3, #20]
 800a19a:	3301      	adds	r3, #1
 800a19c:	693a      	ldr	r2, [r7, #16]
 800a19e:	4611      	mov	r1, r2
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f000 fb62 	bl	800a86a <MQTTPacket_encode>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	61bb      	str	r3, [r7, #24]
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	dd16      	ble.n	800a1e2 <readPacket+0xa4>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1b8:	685c      	ldr	r4, [r3, #4]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	695a      	ldr	r2, [r3, #20]
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	18d6      	adds	r6, r2, r3
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	607b      	str	r3, [r7, #4]
 800a1ca:	68b8      	ldr	r0, [r7, #8]
 800a1cc:	f7ff feef 	bl	8009fae <TimerLeftMS>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	4631      	mov	r1, r6
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	47a0      	blx	r4
 800a1da:	4602      	mov	r2, r0
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d10b      	bne.n	800a1fa <readPacket+0xbc>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	695b      	ldr	r3, [r3, #20]
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	753b      	strb	r3, [r7, #20]
 800a1ea:	7d3b      	ldrb	r3, [r7, #20]
 800a1ec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	61fb      	str	r3, [r7, #28]
 800a1f4:	e002      	b.n	800a1fc <readPacket+0xbe>
 800a1f6:	bf00      	nop
 800a1f8:	e000      	b.n	800a1fc <readPacket+0xbe>
 800a1fa:	bf00      	nop
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	4618      	mov	r0, r3
 800a200:	3724      	adds	r7, #36	; 0x24
 800a202:	46bd      	mov	sp, r7
 800a204:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a206 <isTopicMatched>:
 800a206:	b480      	push	{r7}
 800a208:	b087      	sub	sp, #28
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	6039      	str	r1, [r7, #0]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	617b      	str	r3, [r7, #20]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	613b      	str	r3, [r7, #16]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	461a      	mov	r2, r3
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	4413      	add	r3, r2
 800a224:	60bb      	str	r3, [r7, #8]
 800a226:	e039      	b.n	800a29c <isTopicMatched+0x96>
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	2b2f      	cmp	r3, #47	; 0x2f
 800a22e:	d103      	bne.n	800a238 <isTopicMatched+0x32>
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	2b2f      	cmp	r3, #47	; 0x2f
 800a236:	d13a      	bne.n	800a2ae <isTopicMatched+0xa8>
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	2b2b      	cmp	r3, #43	; 0x2b
 800a23e:	d009      	beq.n	800a254 <isTopicMatched+0x4e>
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	2b23      	cmp	r3, #35	; 0x23
 800a246:	d005      	beq.n	800a254 <isTopicMatched+0x4e>
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	781a      	ldrb	r2, [r3, #0]
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	429a      	cmp	r2, r3
 800a252:	d12e      	bne.n	800a2b2 <isTopicMatched+0xac>
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	2b2b      	cmp	r3, #43	; 0x2b
 800a25a:	d112      	bne.n	800a282 <isTopicMatched+0x7c>
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	3301      	adds	r3, #1
 800a260:	60fb      	str	r3, [r7, #12]
 800a262:	e005      	b.n	800a270 <isTopicMatched+0x6a>
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	3301      	adds	r3, #1
 800a268:	613b      	str	r3, [r7, #16]
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	3301      	adds	r3, #1
 800a26e:	60fb      	str	r3, [r7, #12]
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	429a      	cmp	r2, r3
 800a276:	d20b      	bcs.n	800a290 <isTopicMatched+0x8a>
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	2b2f      	cmp	r3, #47	; 0x2f
 800a27e:	d1f1      	bne.n	800a264 <isTopicMatched+0x5e>
 800a280:	e006      	b.n	800a290 <isTopicMatched+0x8a>
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	2b23      	cmp	r3, #35	; 0x23
 800a288:	d102      	bne.n	800a290 <isTopicMatched+0x8a>
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	3b01      	subs	r3, #1
 800a28e:	613b      	str	r3, [r7, #16]
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	3301      	adds	r3, #1
 800a294:	617b      	str	r3, [r7, #20]
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	3301      	adds	r3, #1
 800a29a:	613b      	str	r3, [r7, #16]
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d007      	beq.n	800a2b4 <isTopicMatched+0xae>
 800a2a4:	693a      	ldr	r2, [r7, #16]
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d3bd      	bcc.n	800a228 <isTopicMatched+0x22>
 800a2ac:	e002      	b.n	800a2b4 <isTopicMatched+0xae>
 800a2ae:	bf00      	nop
 800a2b0:	e000      	b.n	800a2b4 <isTopicMatched+0xae>
 800a2b2:	bf00      	nop
 800a2b4:	693a      	ldr	r2, [r7, #16]
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d105      	bne.n	800a2c8 <isTopicMatched+0xc2>
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d101      	bne.n	800a2c8 <isTopicMatched+0xc2>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e000      	b.n	800a2ca <isTopicMatched+0xc4>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	371c      	adds	r7, #28
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <deliverMessage>:
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b08a      	sub	sp, #40	; 0x28
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
 800a2e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a2e8:	623b      	str	r3, [r7, #32]
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	627b      	str	r3, [r7, #36]	; 0x24
 800a2ee:	e03f      	b.n	800a370 <deliverMessage+0x98>
 800a2f0:	68fa      	ldr	r2, [r7, #12]
 800a2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f4:	3304      	adds	r3, #4
 800a2f6:	00db      	lsls	r3, r3, #3
 800a2f8:	4413      	add	r3, r2
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d034      	beq.n	800a36a <deliverMessage+0x92>
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a304:	3304      	adds	r3, #4
 800a306:	00db      	lsls	r3, r3, #3
 800a308:	4413      	add	r3, r2
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	4619      	mov	r1, r3
 800a30e:	68b8      	ldr	r0, [r7, #8]
 800a310:	f000 fbea 	bl	800aae8 <MQTTPacket_equals>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10c      	bne.n	800a334 <deliverMessage+0x5c>
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31e:	3304      	adds	r3, #4
 800a320:	00db      	lsls	r3, r3, #3
 800a322:	4413      	add	r3, r2
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	68b9      	ldr	r1, [r7, #8]
 800a328:	4618      	mov	r0, r3
 800a32a:	f7ff ff6c 	bl	800a206 <isTopicMatched>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d01a      	beq.n	800a36a <deliverMessage+0x92>
 800a334:	68fa      	ldr	r2, [r7, #12]
 800a336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a338:	3304      	adds	r3, #4
 800a33a:	00db      	lsls	r3, r3, #3
 800a33c:	4413      	add	r3, r2
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d012      	beq.n	800a36a <deliverMessage+0x92>
 800a344:	f107 0318 	add.w	r3, r7, #24
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	68b9      	ldr	r1, [r7, #8]
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7ff fe57 	bl	800a000 <NewMessageData>
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a356:	3304      	adds	r3, #4
 800a358:	00db      	lsls	r3, r3, #3
 800a35a:	4413      	add	r3, r2
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	f107 0218 	add.w	r2, r7, #24
 800a362:	4610      	mov	r0, r2
 800a364:	4798      	blx	r3
 800a366:	2300      	movs	r3, #0
 800a368:	623b      	str	r3, [r7, #32]
 800a36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36c:	3301      	adds	r3, #1
 800a36e:	627b      	str	r3, [r7, #36]	; 0x24
 800a370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a372:	2b04      	cmp	r3, #4
 800a374:	ddbc      	ble.n	800a2f0 <deliverMessage+0x18>
 800a376:	6a3b      	ldr	r3, [r7, #32]
 800a378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a37c:	d112      	bne.n	800a3a4 <deliverMessage+0xcc>
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00e      	beq.n	800a3a4 <deliverMessage+0xcc>
 800a386:	f107 0310 	add.w	r3, r7, #16
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	68b9      	ldr	r1, [r7, #8]
 800a38e:	4618      	mov	r0, r3
 800a390:	f7ff fe36 	bl	800a000 <NewMessageData>
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a398:	f107 0210 	add.w	r2, r7, #16
 800a39c:	4610      	mov	r0, r2
 800a39e:	4798      	blx	r3
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	623b      	str	r3, [r7, #32]
 800a3a4:	6a3b      	ldr	r3, [r7, #32]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3728      	adds	r7, #40	; 0x28
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <keepalive>:
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b086      	sub	sp, #24
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
 800a3b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ba:	617b      	str	r3, [r7, #20]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	699b      	ldr	r3, [r3, #24]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d102      	bne.n	800a3ca <keepalive+0x1c>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	617b      	str	r3, [r7, #20]
 800a3c8:	e033      	b.n	800a432 <keepalive+0x84>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	3358      	adds	r3, #88	; 0x58
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7ff fd7a 	bl	8009ec8 <TimerIsExpired>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d02a      	beq.n	800a430 <keepalive+0x82>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	7f1b      	ldrb	r3, [r3, #28]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d126      	bne.n	800a430 <keepalive+0x82>
 800a3e2:	f107 0308 	add.w	r3, r7, #8
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7ff fd5e 	bl	8009ea8 <TimerInit>
 800a3ec:	f107 0308 	add.w	r3, r7, #8
 800a3f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7ff fd94 	bl	8009f22 <TimerCountdownMS>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	691a      	ldr	r2, [r3, #16]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	4619      	mov	r1, r3
 800a404:	4610      	mov	r0, r2
 800a406:	f000 f964 	bl	800a6d2 <MQTTSerialize_pingreq>
 800a40a:	6138      	str	r0, [r7, #16]
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	dd0f      	ble.n	800a432 <keepalive+0x84>
 800a412:	f107 0308 	add.w	r3, r7, #8
 800a416:	461a      	mov	r2, r3
 800a418:	6939      	ldr	r1, [r7, #16]
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f7ff fe02 	bl	800a024 <sendPacket>
 800a420:	6178      	str	r0, [r7, #20]
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d104      	bne.n	800a432 <keepalive+0x84>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2201      	movs	r2, #1
 800a42c:	771a      	strb	r2, [r3, #28]
 800a42e:	e000      	b.n	800a432 <keepalive+0x84>
 800a430:	bf00      	nop
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	4618      	mov	r0, r3
 800a436:	3718      	adds	r7, #24
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <cycle>:
 800a43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a43e:	b095      	sub	sp, #84	; 0x54
 800a440:	af06      	add	r7, sp, #24
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
 800a446:	6839      	ldr	r1, [r7, #0]
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f7ff fe78 	bl	800a13e <readPacket>
 800a44e:	4603      	mov	r3, r0
 800a450:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a452:	2300      	movs	r3, #0
 800a454:	637b      	str	r3, [r7, #52]	; 0x34
 800a456:	2300      	movs	r3, #0
 800a458:	633b      	str	r3, [r7, #48]	; 0x30
 800a45a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a45c:	3b02      	subs	r3, #2
 800a45e:	2b0b      	cmp	r3, #11
 800a460:	f200 80c1 	bhi.w	800a5e6 <cycle+0x1aa>
 800a464:	a201      	add	r2, pc, #4	; (adr r2, 800a46c <cycle+0x30>)
 800a466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a46a:	bf00      	nop
 800a46c:	0800a5e7 	.word	0x0800a5e7
 800a470:	0800a49d 	.word	0x0800a49d
 800a474:	0800a5e7 	.word	0x0800a5e7
 800a478:	0800a567 	.word	0x0800a567
 800a47c:	0800a5e7 	.word	0x0800a5e7
 800a480:	0800a5e7 	.word	0x0800a5e7
 800a484:	0800a5e7 	.word	0x0800a5e7
 800a488:	0800a5e7 	.word	0x0800a5e7
 800a48c:	0800a5e7 	.word	0x0800a5e7
 800a490:	0800a5e7 	.word	0x0800a5e7
 800a494:	0800a5e7 	.word	0x0800a5e7
 800a498:	0800a5d9 	.word	0x0800a5d9
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	695b      	ldr	r3, [r3, #20]
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	68d2      	ldr	r2, [r2, #12]
 800a4a4:	4616      	mov	r6, r2
 800a4a6:	f107 0210 	add.w	r2, r7, #16
 800a4aa:	1d15      	adds	r5, r2, #4
 800a4ac:	f107 0210 	add.w	r2, r7, #16
 800a4b0:	1c54      	adds	r4, r2, #1
 800a4b2:	f107 010c 	add.w	r1, r7, #12
 800a4b6:	f107 0210 	add.w	r2, r7, #16
 800a4ba:	1c90      	adds	r0, r2, #2
 800a4bc:	9604      	str	r6, [sp, #16]
 800a4be:	9303      	str	r3, [sp, #12]
 800a4c0:	f107 0310 	add.w	r3, r7, #16
 800a4c4:	330c      	adds	r3, #12
 800a4c6:	9302      	str	r3, [sp, #8]
 800a4c8:	f107 0310 	add.w	r3, r7, #16
 800a4cc:	3308      	adds	r3, #8
 800a4ce:	9301      	str	r3, [sp, #4]
 800a4d0:	f107 0320 	add.w	r3, r7, #32
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	462b      	mov	r3, r5
 800a4d8:	4622      	mov	r2, r4
 800a4da:	f000 f909 	bl	800a6f0 <MQTTDeserialize_publish>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	f040 8084 	bne.w	800a5ee <cycle+0x1b2>
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	743b      	strb	r3, [r7, #16]
 800a4ec:	f107 0210 	add.w	r2, r7, #16
 800a4f0:	f107 0320 	add.w	r3, r7, #32
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f7ff feee 	bl	800a2d8 <deliverMessage>
 800a4fc:	7c3b      	ldrb	r3, [r7, #16]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d06e      	beq.n	800a5e0 <cycle+0x1a4>
 800a502:	7c3b      	ldrb	r3, [r7, #16]
 800a504:	2b01      	cmp	r3, #1
 800a506:	d10c      	bne.n	800a522 <cycle+0xe6>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6918      	ldr	r0, [r3, #16]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	4619      	mov	r1, r3
 800a512:	8abb      	ldrh	r3, [r7, #20]
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	2300      	movs	r3, #0
 800a518:	2204      	movs	r2, #4
 800a51a:	f000 fb1c 	bl	800ab56 <MQTTSerialize_ack>
 800a51e:	6378      	str	r0, [r7, #52]	; 0x34
 800a520:	e00e      	b.n	800a540 <cycle+0x104>
 800a522:	7c3b      	ldrb	r3, [r7, #16]
 800a524:	2b02      	cmp	r3, #2
 800a526:	d10b      	bne.n	800a540 <cycle+0x104>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6918      	ldr	r0, [r3, #16]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	4619      	mov	r1, r3
 800a532:	8abb      	ldrh	r3, [r7, #20]
 800a534:	9300      	str	r3, [sp, #0]
 800a536:	2300      	movs	r3, #0
 800a538:	2205      	movs	r2, #5
 800a53a:	f000 fb0c 	bl	800ab56 <MQTTSerialize_ack>
 800a53e:	6378      	str	r0, [r7, #52]	; 0x34
 800a540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a542:	2b00      	cmp	r3, #0
 800a544:	dc03      	bgt.n	800a54e <cycle+0x112>
 800a546:	f04f 33ff 	mov.w	r3, #4294967295
 800a54a:	633b      	str	r3, [r7, #48]	; 0x30
 800a54c:	e005      	b.n	800a55a <cycle+0x11e>
 800a54e:	683a      	ldr	r2, [r7, #0]
 800a550:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f7ff fd66 	bl	800a024 <sendPacket>
 800a558:	6338      	str	r0, [r7, #48]	; 0x30
 800a55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a560:	d13e      	bne.n	800a5e0 <cycle+0x1a4>
 800a562:	bf00      	nop
 800a564:	e044      	b.n	800a5f0 <cycle+0x1b4>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	695c      	ldr	r4, [r3, #20]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	f107 020a 	add.w	r2, r7, #10
 800a572:	f107 0109 	add.w	r1, r7, #9
 800a576:	f107 0008 	add.w	r0, r7, #8
 800a57a:	9300      	str	r3, [sp, #0]
 800a57c:	4623      	mov	r3, r4
 800a57e:	f000 f929 	bl	800a7d4 <MQTTDeserialize_ack>
 800a582:	4603      	mov	r3, r0
 800a584:	2b01      	cmp	r3, #1
 800a586:	d003      	beq.n	800a590 <cycle+0x154>
 800a588:	f04f 33ff 	mov.w	r3, #4294967295
 800a58c:	633b      	str	r3, [r7, #48]	; 0x30
 800a58e:	e01e      	b.n	800a5ce <cycle+0x192>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6918      	ldr	r0, [r3, #16]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	4619      	mov	r1, r3
 800a59a:	897b      	ldrh	r3, [r7, #10]
 800a59c:	9300      	str	r3, [sp, #0]
 800a59e:	2300      	movs	r3, #0
 800a5a0:	2206      	movs	r2, #6
 800a5a2:	f000 fad8 	bl	800ab56 <MQTTSerialize_ack>
 800a5a6:	6378      	str	r0, [r7, #52]	; 0x34
 800a5a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	dc03      	bgt.n	800a5b6 <cycle+0x17a>
 800a5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b2:	633b      	str	r3, [r7, #48]	; 0x30
 800a5b4:	e00b      	b.n	800a5ce <cycle+0x192>
 800a5b6:	683a      	ldr	r2, [r7, #0]
 800a5b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f7ff fd32 	bl	800a024 <sendPacket>
 800a5c0:	6338      	str	r0, [r7, #48]	; 0x30
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d002      	beq.n	800a5ce <cycle+0x192>
 800a5c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a5cc:	633b      	str	r3, [r7, #48]	; 0x30
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5d4:	d106      	bne.n	800a5e4 <cycle+0x1a8>
 800a5d6:	e00b      	b.n	800a5f0 <cycle+0x1b4>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	771a      	strb	r2, [r3, #28]
 800a5de:	e002      	b.n	800a5e6 <cycle+0x1aa>
 800a5e0:	bf00      	nop
 800a5e2:	e000      	b.n	800a5e6 <cycle+0x1aa>
 800a5e4:	bf00      	nop
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f7ff fee1 	bl	800a3ae <keepalive>
 800a5ec:	e000      	b.n	800a5f0 <cycle+0x1b4>
 800a5ee:	bf00      	nop
 800a5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d101      	bne.n	800a5fa <cycle+0x1be>
 800a5f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a5f8:	633b      	str	r3, [r7, #48]	; 0x30
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	373c      	adds	r7, #60	; 0x3c
 800a600:	46bd      	mov	sp, r7
 800a602:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a604 <MQTTYield>:
 800a604:	b580      	push	{r7, lr}
 800a606:	b086      	sub	sp, #24
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
 800a60e:	2300      	movs	r3, #0
 800a610:	617b      	str	r3, [r7, #20]
 800a612:	f107 0308 	add.w	r3, r7, #8
 800a616:	4618      	mov	r0, r3
 800a618:	f7ff fc46 	bl	8009ea8 <TimerInit>
 800a61c:	683a      	ldr	r2, [r7, #0]
 800a61e:	f107 0308 	add.w	r3, r7, #8
 800a622:	4611      	mov	r1, r2
 800a624:	4618      	mov	r0, r3
 800a626:	f7ff fc7c 	bl	8009f22 <TimerCountdownMS>
 800a62a:	f107 0308 	add.w	r3, r7, #8
 800a62e:	4619      	mov	r1, r3
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f7ff ff03 	bl	800a43c <cycle>
 800a636:	4603      	mov	r3, r0
 800a638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a63c:	d103      	bne.n	800a646 <MQTTYield+0x42>
 800a63e:	f04f 33ff 	mov.w	r3, #4294967295
 800a642:	617b      	str	r3, [r7, #20]
 800a644:	e007      	b.n	800a656 <MQTTYield+0x52>
 800a646:	f107 0308 	add.w	r3, r7, #8
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7ff fc3c 	bl	8009ec8 <TimerIsExpired>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d0e9      	beq.n	800a62a <MQTTYield+0x26>
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	4618      	mov	r0, r3
 800a65a:	3718      	adds	r7, #24
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <MQTTSerialize_zero>:
 800a660:	b580      	push	{r7, lr}
 800a662:	b088      	sub	sp, #32
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	4613      	mov	r3, r2
 800a66c:	71fb      	strb	r3, [r7, #7]
 800a66e:	2300      	movs	r3, #0
 800a670:	61bb      	str	r3, [r7, #24]
 800a672:	f04f 33ff 	mov.w	r3, #4294967295
 800a676:	61fb      	str	r3, [r7, #28]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	617b      	str	r3, [r7, #20]
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	dc03      	bgt.n	800a68a <MQTTSerialize_zero+0x2a>
 800a682:	f06f 0301 	mvn.w	r3, #1
 800a686:	61fb      	str	r3, [r7, #28]
 800a688:	e01e      	b.n	800a6c8 <MQTTSerialize_zero+0x68>
 800a68a:	2300      	movs	r3, #0
 800a68c:	763b      	strb	r3, [r7, #24]
 800a68e:	79fb      	ldrb	r3, [r7, #7]
 800a690:	f003 030f 	and.w	r3, r3, #15
 800a694:	b2da      	uxtb	r2, r3
 800a696:	7e3b      	ldrb	r3, [r7, #24]
 800a698:	f362 1307 	bfi	r3, r2, #4, #4
 800a69c:	763b      	strb	r3, [r7, #24]
 800a69e:	7e3a      	ldrb	r2, [r7, #24]
 800a6a0:	f107 0314 	add.w	r3, r7, #20
 800a6a4:	4611      	mov	r1, r2
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f000 f9af 	bl	800aa0a <writeChar>
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	2100      	movs	r1, #0
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f000 f8da 	bl	800a86a <MQTTPacket_encode>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	617b      	str	r3, [r7, #20]
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	1ad3      	subs	r3, r2, r3
 800a6c6:	61fb      	str	r3, [r7, #28]
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3720      	adds	r7, #32
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <MQTTSerialize_pingreq>:
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b082      	sub	sp, #8
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	6039      	str	r1, [r7, #0]
 800a6dc:	220c      	movs	r2, #12
 800a6de:	6839      	ldr	r1, [r7, #0]
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f7ff ffbd 	bl	800a660 <MQTTSerialize_zero>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3708      	adds	r7, #8
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <MQTTDeserialize_publish>:
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b08a      	sub	sp, #40	; 0x28
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
 800a6fc:	603b      	str	r3, [r7, #0]
 800a6fe:	2300      	movs	r3, #0
 800a700:	61fb      	str	r3, [r7, #28]
 800a702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a704:	61bb      	str	r3, [r7, #24]
 800a706:	2300      	movs	r3, #0
 800a708:	623b      	str	r3, [r7, #32]
 800a70a:	2300      	movs	r3, #0
 800a70c:	627b      	str	r3, [r7, #36]	; 0x24
 800a70e:	2300      	movs	r3, #0
 800a710:	617b      	str	r3, [r7, #20]
 800a712:	f107 0318 	add.w	r3, r7, #24
 800a716:	4618      	mov	r0, r3
 800a718:	f000 f963 	bl	800a9e2 <readChar>
 800a71c:	4603      	mov	r3, r0
 800a71e:	773b      	strb	r3, [r7, #28]
 800a720:	7f3b      	ldrb	r3, [r7, #28]
 800a722:	f023 030f 	bic.w	r3, r3, #15
 800a726:	b2db      	uxtb	r3, r3
 800a728:	2b30      	cmp	r3, #48	; 0x30
 800a72a:	d14b      	bne.n	800a7c4 <MQTTDeserialize_publish+0xd4>
 800a72c:	7f3b      	ldrb	r3, [r7, #28]
 800a72e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a732:	b2db      	uxtb	r3, r3
 800a734:	461a      	mov	r2, r3
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	701a      	strb	r2, [r3, #0]
 800a73a:	7f3b      	ldrb	r3, [r7, #28]
 800a73c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800a740:	b2db      	uxtb	r3, r3
 800a742:	461a      	mov	r2, r3
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	601a      	str	r2, [r3, #0]
 800a748:	7f3b      	ldrb	r3, [r7, #28]
 800a74a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	461a      	mov	r2, r3
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	701a      	strb	r2, [r3, #0]
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	f107 0214 	add.w	r2, r7, #20
 800a75c:	4611      	mov	r1, r2
 800a75e:	4618      	mov	r0, r3
 800a760:	f000 f90e 	bl	800a980 <MQTTPacket_decodeBuf>
 800a764:	6278      	str	r0, [r7, #36]	; 0x24
 800a766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	4413      	add	r3, r2
 800a76c:	61bb      	str	r3, [r7, #24]
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	697a      	ldr	r2, [r7, #20]
 800a772:	4413      	add	r3, r2
 800a774:	623b      	str	r3, [r7, #32]
 800a776:	f107 0318 	add.w	r3, r7, #24
 800a77a:	6a3a      	ldr	r2, [r7, #32]
 800a77c:	4619      	mov	r1, r3
 800a77e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a780:	f000 f981 	bl	800aa86 <readMQTTLenString>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d01e      	beq.n	800a7c8 <MQTTDeserialize_publish+0xd8>
 800a78a:	6a3b      	ldr	r3, [r7, #32]
 800a78c:	69ba      	ldr	r2, [r7, #24]
 800a78e:	1a9b      	subs	r3, r3, r2
 800a790:	2b00      	cmp	r3, #0
 800a792:	db19      	blt.n	800a7c8 <MQTTDeserialize_publish+0xd8>
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	dd08      	ble.n	800a7ae <MQTTDeserialize_publish+0xbe>
 800a79c:	f107 0318 	add.w	r3, r7, #24
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f000 f903 	bl	800a9ac <readInt>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	b29a      	uxth	r2, r3
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	801a      	strh	r2, [r3, #0]
 800a7ae:	6a3b      	ldr	r3, [r7, #32]
 800a7b0:	69ba      	ldr	r2, [r7, #24]
 800a7b2:	1a9a      	subs	r2, r3, r2
 800a7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b6:	601a      	str	r2, [r3, #0]
 800a7b8:	69ba      	ldr	r2, [r7, #24]
 800a7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7bc:	601a      	str	r2, [r3, #0]
 800a7be:	2301      	movs	r3, #1
 800a7c0:	627b      	str	r3, [r7, #36]	; 0x24
 800a7c2:	e002      	b.n	800a7ca <MQTTDeserialize_publish+0xda>
 800a7c4:	bf00      	nop
 800a7c6:	e000      	b.n	800a7ca <MQTTDeserialize_publish+0xda>
 800a7c8:	bf00      	nop
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3728      	adds	r7, #40	; 0x28
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <MQTTDeserialize_ack>:
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08a      	sub	sp, #40	; 0x28
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
 800a7e0:	603b      	str	r3, [r7, #0]
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	61fb      	str	r3, [r7, #28]
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	61bb      	str	r3, [r7, #24]
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	623b      	str	r3, [r7, #32]
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	627b      	str	r3, [r7, #36]	; 0x24
 800a7f2:	f107 0318 	add.w	r3, r7, #24
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f000 f8f3 	bl	800a9e2 <readChar>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	773b      	strb	r3, [r7, #28]
 800a800:	7f3b      	ldrb	r3, [r7, #28]
 800a802:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a806:	b2db      	uxtb	r3, r3
 800a808:	461a      	mov	r2, r3
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	701a      	strb	r2, [r3, #0]
 800a80e:	7f3b      	ldrb	r3, [r7, #28]
 800a810:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a814:	b2db      	uxtb	r3, r3
 800a816:	461a      	mov	r2, r3
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	701a      	strb	r2, [r3, #0]
 800a81c:	69bb      	ldr	r3, [r7, #24]
 800a81e:	f107 0214 	add.w	r2, r7, #20
 800a822:	4611      	mov	r1, r2
 800a824:	4618      	mov	r0, r3
 800a826:	f000 f8ab 	bl	800a980 <MQTTPacket_decodeBuf>
 800a82a:	6278      	str	r0, [r7, #36]	; 0x24
 800a82c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	4413      	add	r3, r2
 800a832:	61bb      	str	r3, [r7, #24]
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	697a      	ldr	r2, [r7, #20]
 800a838:	4413      	add	r3, r2
 800a83a:	623b      	str	r3, [r7, #32]
 800a83c:	6a3b      	ldr	r3, [r7, #32]
 800a83e:	69ba      	ldr	r2, [r7, #24]
 800a840:	1a9b      	subs	r3, r3, r2
 800a842:	2b01      	cmp	r3, #1
 800a844:	dd0b      	ble.n	800a85e <MQTTDeserialize_ack+0x8a>
 800a846:	f107 0318 	add.w	r3, r7, #24
 800a84a:	4618      	mov	r0, r3
 800a84c:	f000 f8ae 	bl	800a9ac <readInt>
 800a850:	4603      	mov	r3, r0
 800a852:	b29a      	uxth	r2, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	801a      	strh	r2, [r3, #0]
 800a858:	2301      	movs	r3, #1
 800a85a:	627b      	str	r3, [r7, #36]	; 0x24
 800a85c:	e000      	b.n	800a860 <MQTTDeserialize_ack+0x8c>
 800a85e:	bf00      	nop
 800a860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a862:	4618      	mov	r0, r3
 800a864:	3728      	adds	r7, #40	; 0x28
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <MQTTPacket_encode>:
 800a86a:	b480      	push	{r7}
 800a86c:	b085      	sub	sp, #20
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
 800a872:	6039      	str	r1, [r7, #0]
 800a874:	2300      	movs	r3, #0
 800a876:	60fb      	str	r3, [r7, #12]
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	425a      	negs	r2, r3
 800a87c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a880:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a884:	bf58      	it	pl
 800a886:	4253      	negpl	r3, r2
 800a888:	72fb      	strb	r3, [r7, #11]
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	da00      	bge.n	800a892 <MQTTPacket_encode+0x28>
 800a890:	337f      	adds	r3, #127	; 0x7f
 800a892:	11db      	asrs	r3, r3, #7
 800a894:	603b      	str	r3, [r7, #0]
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	dd03      	ble.n	800a8a4 <MQTTPacket_encode+0x3a>
 800a89c:	7afb      	ldrb	r3, [r7, #11]
 800a89e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a8a2:	72fb      	strb	r3, [r7, #11]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	1c5a      	adds	r2, r3, #1
 800a8a8:	60fa      	str	r2, [r7, #12]
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	4413      	add	r3, r2
 800a8b0:	7afa      	ldrb	r2, [r7, #11]
 800a8b2:	701a      	strb	r2, [r3, #0]
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	dcde      	bgt.n	800a878 <MQTTPacket_encode+0xe>
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3714      	adds	r7, #20
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <MQTTPacket_decode>:
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b086      	sub	sp, #24
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	617b      	str	r3, [r7, #20]
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	613b      	str	r3, [r7, #16]
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	601a      	str	r2, [r3, #0]
 800a8e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8e4:	60fb      	str	r3, [r7, #12]
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	613b      	str	r3, [r7, #16]
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	2b04      	cmp	r3, #4
 800a8f0:	dd03      	ble.n	800a8fa <MQTTPacket_decode+0x32>
 800a8f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a8f6:	60fb      	str	r3, [r7, #12]
 800a8f8:	e01d      	b.n	800a936 <MQTTPacket_decode+0x6e>
 800a8fa:	f107 020b 	add.w	r2, r7, #11
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2101      	movs	r1, #1
 800a902:	4610      	mov	r0, r2
 800a904:	4798      	blx	r3
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d112      	bne.n	800a934 <MQTTPacket_decode+0x6c>
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	7afb      	ldrb	r3, [r7, #11]
 800a914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a918:	6979      	ldr	r1, [r7, #20]
 800a91a:	fb01 f303 	mul.w	r3, r1, r3
 800a91e:	441a      	add	r2, r3
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	601a      	str	r2, [r3, #0]
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	01db      	lsls	r3, r3, #7
 800a928:	617b      	str	r3, [r7, #20]
 800a92a:	7afb      	ldrb	r3, [r7, #11]
 800a92c:	b25b      	sxtb	r3, r3
 800a92e:	2b00      	cmp	r3, #0
 800a930:	dbd6      	blt.n	800a8e0 <MQTTPacket_decode+0x18>
 800a932:	e000      	b.n	800a936 <MQTTPacket_decode+0x6e>
 800a934:	bf00      	nop
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	4618      	mov	r0, r3
 800a93a:	3718      	adds	r7, #24
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <bufchar>:
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
 800a94a:	2300      	movs	r3, #0
 800a94c:	60fb      	str	r3, [r7, #12]
 800a94e:	e00a      	b.n	800a966 <bufchar+0x26>
 800a950:	4b0a      	ldr	r3, [pc, #40]	; (800a97c <bufchar+0x3c>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	1c5a      	adds	r2, r3, #1
 800a956:	4909      	ldr	r1, [pc, #36]	; (800a97c <bufchar+0x3c>)
 800a958:	600a      	str	r2, [r1, #0]
 800a95a:	781a      	ldrb	r2, [r3, #0]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	701a      	strb	r2, [r3, #0]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	3301      	adds	r3, #1
 800a964:	60fb      	str	r3, [r7, #12]
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	dbf0      	blt.n	800a950 <bufchar+0x10>
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	4618      	mov	r0, r3
 800a972:	3714      	adds	r7, #20
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr
 800a97c:	200040ec 	.word	0x200040ec

0800a980 <MQTTPacket_decodeBuf>:
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
 800a98a:	4a06      	ldr	r2, [pc, #24]	; (800a9a4 <MQTTPacket_decodeBuf+0x24>)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6013      	str	r3, [r2, #0]
 800a990:	6839      	ldr	r1, [r7, #0]
 800a992:	4805      	ldr	r0, [pc, #20]	; (800a9a8 <MQTTPacket_decodeBuf+0x28>)
 800a994:	f7ff ff98 	bl	800a8c8 <MQTTPacket_decode>
 800a998:	4603      	mov	r3, r0
 800a99a:	4618      	mov	r0, r3
 800a99c:	3708      	adds	r7, #8
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	200040ec 	.word	0x200040ec
 800a9a8:	0800a941 	.word	0x0800a941

0800a9ac <readInt>:
 800a9ac:	b480      	push	{r7}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	60fb      	str	r3, [r7, #12]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	021b      	lsls	r3, r3, #8
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	3201      	adds	r2, #1
 800a9c4:	7812      	ldrb	r2, [r2, #0]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	60bb      	str	r3, [r7, #8]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	1c9a      	adds	r2, r3, #2
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	601a      	str	r2, [r3, #0]
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3714      	adds	r7, #20
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr

0800a9e2 <readChar>:
 800a9e2:	b480      	push	{r7}
 800a9e4:	b085      	sub	sp, #20
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	73fb      	strb	r3, [r7, #15]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	1c5a      	adds	r2, r3, #1
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	601a      	str	r2, [r3, #0]
 800a9fc:	7bfb      	ldrb	r3, [r7, #15]
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3714      	adds	r7, #20
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr

0800aa0a <writeChar>:
 800aa0a:	b480      	push	{r7}
 800aa0c:	b083      	sub	sp, #12
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
 800aa12:	460b      	mov	r3, r1
 800aa14:	70fb      	strb	r3, [r7, #3]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	78fa      	ldrb	r2, [r7, #3]
 800aa1c:	701a      	strb	r2, [r3, #0]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	1c5a      	adds	r2, r3, #1
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	601a      	str	r2, [r3, #0]
 800aa28:	bf00      	nop
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <writeInt>:
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	da00      	bge.n	800aa46 <writeInt+0x12>
 800aa44:	33ff      	adds	r3, #255	; 0xff
 800aa46:	121b      	asrs	r3, r3, #8
 800aa48:	461a      	mov	r2, r3
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	b2d2      	uxtb	r2, r2
 800aa50:	701a      	strb	r2, [r3, #0]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	1c5a      	adds	r2, r3, #1
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	601a      	str	r2, [r3, #0]
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	425a      	negs	r2, r3
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	b2d2      	uxtb	r2, r2
 800aa64:	bf58      	it	pl
 800aa66:	4253      	negpl	r3, r2
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	6812      	ldr	r2, [r2, #0]
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	7013      	strb	r3, [r2, #0]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	1c5a      	adds	r2, r3, #1
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	601a      	str	r2, [r3, #0]
 800aa7a:	bf00      	nop
 800aa7c:	370c      	adds	r7, #12
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr

0800aa86 <readMQTTLenString>:
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b086      	sub	sp, #24
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	60f8      	str	r0, [r7, #12]
 800aa8e:	60b9      	str	r1, [r7, #8]
 800aa90:	607a      	str	r2, [r7, #4]
 800aa92:	2300      	movs	r3, #0
 800aa94:	617b      	str	r3, [r7, #20]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	68ba      	ldr	r2, [r7, #8]
 800aa9a:	6812      	ldr	r2, [r2, #0]
 800aa9c:	1a9b      	subs	r3, r3, r2
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	dd1a      	ble.n	800aad8 <readMQTTLenString+0x52>
 800aaa2:	68b8      	ldr	r0, [r7, #8]
 800aaa4:	f7ff ff82 	bl	800a9ac <readInt>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	605a      	str	r2, [r3, #4]
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	6852      	ldr	r2, [r2, #4]
 800aab6:	4413      	add	r3, r2
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d30c      	bcc.n	800aad8 <readMQTTLenString+0x52>
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	681a      	ldr	r2, [r3, #0]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	609a      	str	r2, [r3, #8]
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	6852      	ldr	r2, [r2, #4]
 800aace:	441a      	add	r2, r3
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	601a      	str	r2, [r3, #0]
 800aad4:	2301      	movs	r3, #1
 800aad6:	617b      	str	r3, [r7, #20]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	601a      	str	r2, [r3, #0]
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	4618      	mov	r0, r3
 800aae2:	3718      	adds	r7, #24
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <MQTTPacket_equals>:
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b086      	sub	sp, #24
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	617b      	str	r3, [r7, #20]
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	60fb      	str	r3, [r7, #12]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00a      	beq.n	800ab18 <MQTTPacket_equals+0x30>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	613b      	str	r3, [r7, #16]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7f5 fb67 	bl	80001e0 <strlen>
 800ab12:	4603      	mov	r3, r0
 800ab14:	617b      	str	r3, [r7, #20]
 800ab16:	e005      	b.n	800ab24 <MQTTPacket_equals+0x3c>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	689b      	ldr	r3, [r3, #8]
 800ab1c:	613b      	str	r3, [r7, #16]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	617b      	str	r3, [r7, #20]
 800ab24:	6838      	ldr	r0, [r7, #0]
 800ab26:	f7f5 fb5b 	bl	80001e0 <strlen>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	60fb      	str	r3, [r7, #12]
 800ab2e:	697a      	ldr	r2, [r7, #20]
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d10a      	bne.n	800ab4c <MQTTPacket_equals+0x64>
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	461a      	mov	r2, r3
 800ab3a:	6839      	ldr	r1, [r7, #0]
 800ab3c:	6938      	ldr	r0, [r7, #16]
 800ab3e:	f000 f957 	bl	800adf0 <strncmp>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d101      	bne.n	800ab4c <MQTTPacket_equals+0x64>
 800ab48:	2301      	movs	r3, #1
 800ab4a:	e000      	b.n	800ab4e <MQTTPacket_equals+0x66>
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3718      	adds	r7, #24
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <MQTTSerialize_ack>:
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b088      	sub	sp, #32
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	60f8      	str	r0, [r7, #12]
 800ab5e:	60b9      	str	r1, [r7, #8]
 800ab60:	4611      	mov	r1, r2
 800ab62:	461a      	mov	r2, r3
 800ab64:	460b      	mov	r3, r1
 800ab66:	71fb      	strb	r3, [r7, #7]
 800ab68:	4613      	mov	r3, r2
 800ab6a:	71bb      	strb	r3, [r7, #6]
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	61bb      	str	r3, [r7, #24]
 800ab70:	2300      	movs	r3, #0
 800ab72:	61fb      	str	r3, [r7, #28]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	617b      	str	r3, [r7, #20]
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	2b03      	cmp	r3, #3
 800ab7c:	dc03      	bgt.n	800ab86 <MQTTSerialize_ack+0x30>
 800ab7e:	f06f 0301 	mvn.w	r3, #1
 800ab82:	61fb      	str	r3, [r7, #28]
 800ab84:	e02f      	b.n	800abe6 <MQTTSerialize_ack+0x90>
 800ab86:	79fb      	ldrb	r3, [r7, #7]
 800ab88:	f003 030f 	and.w	r3, r3, #15
 800ab8c:	b2da      	uxtb	r2, r3
 800ab8e:	7e3b      	ldrb	r3, [r7, #24]
 800ab90:	f362 1307 	bfi	r3, r2, #4, #4
 800ab94:	763b      	strb	r3, [r7, #24]
 800ab96:	79bb      	ldrb	r3, [r7, #6]
 800ab98:	f003 0301 	and.w	r3, r3, #1
 800ab9c:	b2da      	uxtb	r2, r3
 800ab9e:	7e3b      	ldrb	r3, [r7, #24]
 800aba0:	f362 03c3 	bfi	r3, r2, #3, #1
 800aba4:	763b      	strb	r3, [r7, #24]
 800aba6:	7e3b      	ldrb	r3, [r7, #24]
 800aba8:	f36f 0342 	bfc	r3, #1, #2
 800abac:	763b      	strb	r3, [r7, #24]
 800abae:	7e3a      	ldrb	r2, [r7, #24]
 800abb0:	f107 0314 	add.w	r3, r7, #20
 800abb4:	4611      	mov	r1, r2
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7ff ff27 	bl	800aa0a <writeChar>
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	2102      	movs	r1, #2
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7ff fe52 	bl	800a86a <MQTTPacket_encode>
 800abc6:	4602      	mov	r2, r0
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	4413      	add	r3, r2
 800abcc:	617b      	str	r3, [r7, #20]
 800abce:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800abd0:	f107 0314 	add.w	r3, r7, #20
 800abd4:	4611      	mov	r1, r2
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7ff ff2c 	bl	800aa34 <writeInt>
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	461a      	mov	r2, r3
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	1ad3      	subs	r3, r2, r3
 800abe4:	61fb      	str	r3, [r7, #28]
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	4618      	mov	r0, r3
 800abea:	3720      	adds	r7, #32
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <Reset_Handler>:
 800abf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ac28 <LoopFillZerobss+0x14>
 800abf4:	2100      	movs	r1, #0
 800abf6:	e003      	b.n	800ac00 <LoopCopyDataInit>

0800abf8 <CopyDataInit>:
 800abf8:	4b0c      	ldr	r3, [pc, #48]	; (800ac2c <LoopFillZerobss+0x18>)
 800abfa:	585b      	ldr	r3, [r3, r1]
 800abfc:	5043      	str	r3, [r0, r1]
 800abfe:	3104      	adds	r1, #4

0800ac00 <LoopCopyDataInit>:
 800ac00:	480b      	ldr	r0, [pc, #44]	; (800ac30 <LoopFillZerobss+0x1c>)
 800ac02:	4b0c      	ldr	r3, [pc, #48]	; (800ac34 <LoopFillZerobss+0x20>)
 800ac04:	1842      	adds	r2, r0, r1
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d3f6      	bcc.n	800abf8 <CopyDataInit>
 800ac0a:	4a0b      	ldr	r2, [pc, #44]	; (800ac38 <LoopFillZerobss+0x24>)
 800ac0c:	e002      	b.n	800ac14 <LoopFillZerobss>

0800ac0e <FillZerobss>:
 800ac0e:	2300      	movs	r3, #0
 800ac10:	f842 3b04 	str.w	r3, [r2], #4

0800ac14 <LoopFillZerobss>:
 800ac14:	4b09      	ldr	r3, [pc, #36]	; (800ac3c <LoopFillZerobss+0x28>)
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d3f9      	bcc.n	800ac0e <FillZerobss>
 800ac1a:	f7ff f90f 	bl	8009e3c <SystemInit>
 800ac1e:	f000 f817 	bl	800ac50 <__libc_init_array>
 800ac22:	f7fd fe9f 	bl	8008964 <main>
 800ac26:	4770      	bx	lr
 800ac28:	20020000 	.word	0x20020000
 800ac2c:	0800c3e8 	.word	0x0800c3e8
 800ac30:	20000000 	.word	0x20000000
 800ac34:	200000c0 	.word	0x200000c0
 800ac38:	200000c0 	.word	0x200000c0
 800ac3c:	200053bc 	.word	0x200053bc

0800ac40 <ADC_IRQHandler>:
 800ac40:	e7fe      	b.n	800ac40 <ADC_IRQHandler>
	...

0800ac44 <__errno>:
 800ac44:	4b01      	ldr	r3, [pc, #4]	; (800ac4c <__errno+0x8>)
 800ac46:	6818      	ldr	r0, [r3, #0]
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	2000005c 	.word	0x2000005c

0800ac50 <__libc_init_array>:
 800ac50:	b570      	push	{r4, r5, r6, lr}
 800ac52:	4e0d      	ldr	r6, [pc, #52]	; (800ac88 <__libc_init_array+0x38>)
 800ac54:	4c0d      	ldr	r4, [pc, #52]	; (800ac8c <__libc_init_array+0x3c>)
 800ac56:	1ba4      	subs	r4, r4, r6
 800ac58:	10a4      	asrs	r4, r4, #2
 800ac5a:	2500      	movs	r5, #0
 800ac5c:	42a5      	cmp	r5, r4
 800ac5e:	d109      	bne.n	800ac74 <__libc_init_array+0x24>
 800ac60:	4e0b      	ldr	r6, [pc, #44]	; (800ac90 <__libc_init_array+0x40>)
 800ac62:	4c0c      	ldr	r4, [pc, #48]	; (800ac94 <__libc_init_array+0x44>)
 800ac64:	f000 fffc 	bl	800bc60 <_init>
 800ac68:	1ba4      	subs	r4, r4, r6
 800ac6a:	10a4      	asrs	r4, r4, #2
 800ac6c:	2500      	movs	r5, #0
 800ac6e:	42a5      	cmp	r5, r4
 800ac70:	d105      	bne.n	800ac7e <__libc_init_array+0x2e>
 800ac72:	bd70      	pop	{r4, r5, r6, pc}
 800ac74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac78:	4798      	blx	r3
 800ac7a:	3501      	adds	r5, #1
 800ac7c:	e7ee      	b.n	800ac5c <__libc_init_array+0xc>
 800ac7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac82:	4798      	blx	r3
 800ac84:	3501      	adds	r5, #1
 800ac86:	e7f2      	b.n	800ac6e <__libc_init_array+0x1e>
 800ac88:	0800c3e0 	.word	0x0800c3e0
 800ac8c:	0800c3e0 	.word	0x0800c3e0
 800ac90:	0800c3e0 	.word	0x0800c3e0
 800ac94:	0800c3e4 	.word	0x0800c3e4

0800ac98 <memcpy>:
 800ac98:	b510      	push	{r4, lr}
 800ac9a:	1e43      	subs	r3, r0, #1
 800ac9c:	440a      	add	r2, r1
 800ac9e:	4291      	cmp	r1, r2
 800aca0:	d100      	bne.n	800aca4 <memcpy+0xc>
 800aca2:	bd10      	pop	{r4, pc}
 800aca4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aca8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acac:	e7f7      	b.n	800ac9e <memcpy+0x6>

0800acae <memset>:
 800acae:	4402      	add	r2, r0
 800acb0:	4603      	mov	r3, r0
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d100      	bne.n	800acb8 <memset+0xa>
 800acb6:	4770      	bx	lr
 800acb8:	f803 1b01 	strb.w	r1, [r3], #1
 800acbc:	e7f9      	b.n	800acb2 <memset+0x4>
	...

0800acc0 <_puts_r>:
 800acc0:	b570      	push	{r4, r5, r6, lr}
 800acc2:	460e      	mov	r6, r1
 800acc4:	4605      	mov	r5, r0
 800acc6:	b118      	cbz	r0, 800acd0 <_puts_r+0x10>
 800acc8:	6983      	ldr	r3, [r0, #24]
 800acca:	b90b      	cbnz	r3, 800acd0 <_puts_r+0x10>
 800accc:	f000 fa52 	bl	800b174 <__sinit>
 800acd0:	69ab      	ldr	r3, [r5, #24]
 800acd2:	68ac      	ldr	r4, [r5, #8]
 800acd4:	b913      	cbnz	r3, 800acdc <_puts_r+0x1c>
 800acd6:	4628      	mov	r0, r5
 800acd8:	f000 fa4c 	bl	800b174 <__sinit>
 800acdc:	4b23      	ldr	r3, [pc, #140]	; (800ad6c <_puts_r+0xac>)
 800acde:	429c      	cmp	r4, r3
 800ace0:	d117      	bne.n	800ad12 <_puts_r+0x52>
 800ace2:	686c      	ldr	r4, [r5, #4]
 800ace4:	89a3      	ldrh	r3, [r4, #12]
 800ace6:	071b      	lsls	r3, r3, #28
 800ace8:	d51d      	bpl.n	800ad26 <_puts_r+0x66>
 800acea:	6923      	ldr	r3, [r4, #16]
 800acec:	b1db      	cbz	r3, 800ad26 <_puts_r+0x66>
 800acee:	3e01      	subs	r6, #1
 800acf0:	68a3      	ldr	r3, [r4, #8]
 800acf2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800acf6:	3b01      	subs	r3, #1
 800acf8:	60a3      	str	r3, [r4, #8]
 800acfa:	b9e9      	cbnz	r1, 800ad38 <_puts_r+0x78>
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	da2e      	bge.n	800ad5e <_puts_r+0x9e>
 800ad00:	4622      	mov	r2, r4
 800ad02:	210a      	movs	r1, #10
 800ad04:	4628      	mov	r0, r5
 800ad06:	f000 f885 	bl	800ae14 <__swbuf_r>
 800ad0a:	3001      	adds	r0, #1
 800ad0c:	d011      	beq.n	800ad32 <_puts_r+0x72>
 800ad0e:	200a      	movs	r0, #10
 800ad10:	e011      	b.n	800ad36 <_puts_r+0x76>
 800ad12:	4b17      	ldr	r3, [pc, #92]	; (800ad70 <_puts_r+0xb0>)
 800ad14:	429c      	cmp	r4, r3
 800ad16:	d101      	bne.n	800ad1c <_puts_r+0x5c>
 800ad18:	68ac      	ldr	r4, [r5, #8]
 800ad1a:	e7e3      	b.n	800ace4 <_puts_r+0x24>
 800ad1c:	4b15      	ldr	r3, [pc, #84]	; (800ad74 <_puts_r+0xb4>)
 800ad1e:	429c      	cmp	r4, r3
 800ad20:	bf08      	it	eq
 800ad22:	68ec      	ldreq	r4, [r5, #12]
 800ad24:	e7de      	b.n	800ace4 <_puts_r+0x24>
 800ad26:	4621      	mov	r1, r4
 800ad28:	4628      	mov	r0, r5
 800ad2a:	f000 f8c5 	bl	800aeb8 <__swsetup_r>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d0dd      	beq.n	800acee <_puts_r+0x2e>
 800ad32:	f04f 30ff 	mov.w	r0, #4294967295
 800ad36:	bd70      	pop	{r4, r5, r6, pc}
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	da04      	bge.n	800ad46 <_puts_r+0x86>
 800ad3c:	69a2      	ldr	r2, [r4, #24]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	dc06      	bgt.n	800ad50 <_puts_r+0x90>
 800ad42:	290a      	cmp	r1, #10
 800ad44:	d004      	beq.n	800ad50 <_puts_r+0x90>
 800ad46:	6823      	ldr	r3, [r4, #0]
 800ad48:	1c5a      	adds	r2, r3, #1
 800ad4a:	6022      	str	r2, [r4, #0]
 800ad4c:	7019      	strb	r1, [r3, #0]
 800ad4e:	e7cf      	b.n	800acf0 <_puts_r+0x30>
 800ad50:	4622      	mov	r2, r4
 800ad52:	4628      	mov	r0, r5
 800ad54:	f000 f85e 	bl	800ae14 <__swbuf_r>
 800ad58:	3001      	adds	r0, #1
 800ad5a:	d1c9      	bne.n	800acf0 <_puts_r+0x30>
 800ad5c:	e7e9      	b.n	800ad32 <_puts_r+0x72>
 800ad5e:	6823      	ldr	r3, [r4, #0]
 800ad60:	200a      	movs	r0, #10
 800ad62:	1c5a      	adds	r2, r3, #1
 800ad64:	6022      	str	r2, [r4, #0]
 800ad66:	7018      	strb	r0, [r3, #0]
 800ad68:	e7e5      	b.n	800ad36 <_puts_r+0x76>
 800ad6a:	bf00      	nop
 800ad6c:	0800c364 	.word	0x0800c364
 800ad70:	0800c384 	.word	0x0800c384
 800ad74:	0800c344 	.word	0x0800c344

0800ad78 <puts>:
 800ad78:	4b02      	ldr	r3, [pc, #8]	; (800ad84 <puts+0xc>)
 800ad7a:	4601      	mov	r1, r0
 800ad7c:	6818      	ldr	r0, [r3, #0]
 800ad7e:	f7ff bf9f 	b.w	800acc0 <_puts_r>
 800ad82:	bf00      	nop
 800ad84:	2000005c 	.word	0x2000005c

0800ad88 <sniprintf>:
 800ad88:	b40c      	push	{r2, r3}
 800ad8a:	b530      	push	{r4, r5, lr}
 800ad8c:	4b17      	ldr	r3, [pc, #92]	; (800adec <sniprintf+0x64>)
 800ad8e:	1e0c      	subs	r4, r1, #0
 800ad90:	b09d      	sub	sp, #116	; 0x74
 800ad92:	681d      	ldr	r5, [r3, #0]
 800ad94:	da08      	bge.n	800ada8 <sniprintf+0x20>
 800ad96:	238b      	movs	r3, #139	; 0x8b
 800ad98:	602b      	str	r3, [r5, #0]
 800ad9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad9e:	b01d      	add	sp, #116	; 0x74
 800ada0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ada4:	b002      	add	sp, #8
 800ada6:	4770      	bx	lr
 800ada8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800adac:	f8ad 3014 	strh.w	r3, [sp, #20]
 800adb0:	bf14      	ite	ne
 800adb2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800adb6:	4623      	moveq	r3, r4
 800adb8:	9304      	str	r3, [sp, #16]
 800adba:	9307      	str	r3, [sp, #28]
 800adbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800adc0:	9002      	str	r0, [sp, #8]
 800adc2:	9006      	str	r0, [sp, #24]
 800adc4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800adc8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800adca:	ab21      	add	r3, sp, #132	; 0x84
 800adcc:	a902      	add	r1, sp, #8
 800adce:	4628      	mov	r0, r5
 800add0:	9301      	str	r3, [sp, #4]
 800add2:	f000 fbbf 	bl	800b554 <_svfiprintf_r>
 800add6:	1c43      	adds	r3, r0, #1
 800add8:	bfbc      	itt	lt
 800adda:	238b      	movlt	r3, #139	; 0x8b
 800addc:	602b      	strlt	r3, [r5, #0]
 800adde:	2c00      	cmp	r4, #0
 800ade0:	d0dd      	beq.n	800ad9e <sniprintf+0x16>
 800ade2:	9b02      	ldr	r3, [sp, #8]
 800ade4:	2200      	movs	r2, #0
 800ade6:	701a      	strb	r2, [r3, #0]
 800ade8:	e7d9      	b.n	800ad9e <sniprintf+0x16>
 800adea:	bf00      	nop
 800adec:	2000005c 	.word	0x2000005c

0800adf0 <strncmp>:
 800adf0:	b510      	push	{r4, lr}
 800adf2:	b16a      	cbz	r2, 800ae10 <strncmp+0x20>
 800adf4:	3901      	subs	r1, #1
 800adf6:	1884      	adds	r4, r0, r2
 800adf8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800adfc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d103      	bne.n	800ae0c <strncmp+0x1c>
 800ae04:	42a0      	cmp	r0, r4
 800ae06:	d001      	beq.n	800ae0c <strncmp+0x1c>
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d1f5      	bne.n	800adf8 <strncmp+0x8>
 800ae0c:	1a98      	subs	r0, r3, r2
 800ae0e:	bd10      	pop	{r4, pc}
 800ae10:	4610      	mov	r0, r2
 800ae12:	e7fc      	b.n	800ae0e <strncmp+0x1e>

0800ae14 <__swbuf_r>:
 800ae14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae16:	460e      	mov	r6, r1
 800ae18:	4614      	mov	r4, r2
 800ae1a:	4605      	mov	r5, r0
 800ae1c:	b118      	cbz	r0, 800ae26 <__swbuf_r+0x12>
 800ae1e:	6983      	ldr	r3, [r0, #24]
 800ae20:	b90b      	cbnz	r3, 800ae26 <__swbuf_r+0x12>
 800ae22:	f000 f9a7 	bl	800b174 <__sinit>
 800ae26:	4b21      	ldr	r3, [pc, #132]	; (800aeac <__swbuf_r+0x98>)
 800ae28:	429c      	cmp	r4, r3
 800ae2a:	d12a      	bne.n	800ae82 <__swbuf_r+0x6e>
 800ae2c:	686c      	ldr	r4, [r5, #4]
 800ae2e:	69a3      	ldr	r3, [r4, #24]
 800ae30:	60a3      	str	r3, [r4, #8]
 800ae32:	89a3      	ldrh	r3, [r4, #12]
 800ae34:	071a      	lsls	r2, r3, #28
 800ae36:	d52e      	bpl.n	800ae96 <__swbuf_r+0x82>
 800ae38:	6923      	ldr	r3, [r4, #16]
 800ae3a:	b363      	cbz	r3, 800ae96 <__swbuf_r+0x82>
 800ae3c:	6923      	ldr	r3, [r4, #16]
 800ae3e:	6820      	ldr	r0, [r4, #0]
 800ae40:	1ac0      	subs	r0, r0, r3
 800ae42:	6963      	ldr	r3, [r4, #20]
 800ae44:	b2f6      	uxtb	r6, r6
 800ae46:	4283      	cmp	r3, r0
 800ae48:	4637      	mov	r7, r6
 800ae4a:	dc04      	bgt.n	800ae56 <__swbuf_r+0x42>
 800ae4c:	4621      	mov	r1, r4
 800ae4e:	4628      	mov	r0, r5
 800ae50:	f000 f926 	bl	800b0a0 <_fflush_r>
 800ae54:	bb28      	cbnz	r0, 800aea2 <__swbuf_r+0x8e>
 800ae56:	68a3      	ldr	r3, [r4, #8]
 800ae58:	3b01      	subs	r3, #1
 800ae5a:	60a3      	str	r3, [r4, #8]
 800ae5c:	6823      	ldr	r3, [r4, #0]
 800ae5e:	1c5a      	adds	r2, r3, #1
 800ae60:	6022      	str	r2, [r4, #0]
 800ae62:	701e      	strb	r6, [r3, #0]
 800ae64:	6963      	ldr	r3, [r4, #20]
 800ae66:	3001      	adds	r0, #1
 800ae68:	4283      	cmp	r3, r0
 800ae6a:	d004      	beq.n	800ae76 <__swbuf_r+0x62>
 800ae6c:	89a3      	ldrh	r3, [r4, #12]
 800ae6e:	07db      	lsls	r3, r3, #31
 800ae70:	d519      	bpl.n	800aea6 <__swbuf_r+0x92>
 800ae72:	2e0a      	cmp	r6, #10
 800ae74:	d117      	bne.n	800aea6 <__swbuf_r+0x92>
 800ae76:	4621      	mov	r1, r4
 800ae78:	4628      	mov	r0, r5
 800ae7a:	f000 f911 	bl	800b0a0 <_fflush_r>
 800ae7e:	b190      	cbz	r0, 800aea6 <__swbuf_r+0x92>
 800ae80:	e00f      	b.n	800aea2 <__swbuf_r+0x8e>
 800ae82:	4b0b      	ldr	r3, [pc, #44]	; (800aeb0 <__swbuf_r+0x9c>)
 800ae84:	429c      	cmp	r4, r3
 800ae86:	d101      	bne.n	800ae8c <__swbuf_r+0x78>
 800ae88:	68ac      	ldr	r4, [r5, #8]
 800ae8a:	e7d0      	b.n	800ae2e <__swbuf_r+0x1a>
 800ae8c:	4b09      	ldr	r3, [pc, #36]	; (800aeb4 <__swbuf_r+0xa0>)
 800ae8e:	429c      	cmp	r4, r3
 800ae90:	bf08      	it	eq
 800ae92:	68ec      	ldreq	r4, [r5, #12]
 800ae94:	e7cb      	b.n	800ae2e <__swbuf_r+0x1a>
 800ae96:	4621      	mov	r1, r4
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f000 f80d 	bl	800aeb8 <__swsetup_r>
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	d0cc      	beq.n	800ae3c <__swbuf_r+0x28>
 800aea2:	f04f 37ff 	mov.w	r7, #4294967295
 800aea6:	4638      	mov	r0, r7
 800aea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	0800c364 	.word	0x0800c364
 800aeb0:	0800c384 	.word	0x0800c384
 800aeb4:	0800c344 	.word	0x0800c344

0800aeb8 <__swsetup_r>:
 800aeb8:	4b32      	ldr	r3, [pc, #200]	; (800af84 <__swsetup_r+0xcc>)
 800aeba:	b570      	push	{r4, r5, r6, lr}
 800aebc:	681d      	ldr	r5, [r3, #0]
 800aebe:	4606      	mov	r6, r0
 800aec0:	460c      	mov	r4, r1
 800aec2:	b125      	cbz	r5, 800aece <__swsetup_r+0x16>
 800aec4:	69ab      	ldr	r3, [r5, #24]
 800aec6:	b913      	cbnz	r3, 800aece <__swsetup_r+0x16>
 800aec8:	4628      	mov	r0, r5
 800aeca:	f000 f953 	bl	800b174 <__sinit>
 800aece:	4b2e      	ldr	r3, [pc, #184]	; (800af88 <__swsetup_r+0xd0>)
 800aed0:	429c      	cmp	r4, r3
 800aed2:	d10f      	bne.n	800aef4 <__swsetup_r+0x3c>
 800aed4:	686c      	ldr	r4, [r5, #4]
 800aed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeda:	b29a      	uxth	r2, r3
 800aedc:	0715      	lsls	r5, r2, #28
 800aede:	d42c      	bmi.n	800af3a <__swsetup_r+0x82>
 800aee0:	06d0      	lsls	r0, r2, #27
 800aee2:	d411      	bmi.n	800af08 <__swsetup_r+0x50>
 800aee4:	2209      	movs	r2, #9
 800aee6:	6032      	str	r2, [r6, #0]
 800aee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeec:	81a3      	strh	r3, [r4, #12]
 800aeee:	f04f 30ff 	mov.w	r0, #4294967295
 800aef2:	e03e      	b.n	800af72 <__swsetup_r+0xba>
 800aef4:	4b25      	ldr	r3, [pc, #148]	; (800af8c <__swsetup_r+0xd4>)
 800aef6:	429c      	cmp	r4, r3
 800aef8:	d101      	bne.n	800aefe <__swsetup_r+0x46>
 800aefa:	68ac      	ldr	r4, [r5, #8]
 800aefc:	e7eb      	b.n	800aed6 <__swsetup_r+0x1e>
 800aefe:	4b24      	ldr	r3, [pc, #144]	; (800af90 <__swsetup_r+0xd8>)
 800af00:	429c      	cmp	r4, r3
 800af02:	bf08      	it	eq
 800af04:	68ec      	ldreq	r4, [r5, #12]
 800af06:	e7e6      	b.n	800aed6 <__swsetup_r+0x1e>
 800af08:	0751      	lsls	r1, r2, #29
 800af0a:	d512      	bpl.n	800af32 <__swsetup_r+0x7a>
 800af0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af0e:	b141      	cbz	r1, 800af22 <__swsetup_r+0x6a>
 800af10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af14:	4299      	cmp	r1, r3
 800af16:	d002      	beq.n	800af1e <__swsetup_r+0x66>
 800af18:	4630      	mov	r0, r6
 800af1a:	f000 fa19 	bl	800b350 <_free_r>
 800af1e:	2300      	movs	r3, #0
 800af20:	6363      	str	r3, [r4, #52]	; 0x34
 800af22:	89a3      	ldrh	r3, [r4, #12]
 800af24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af28:	81a3      	strh	r3, [r4, #12]
 800af2a:	2300      	movs	r3, #0
 800af2c:	6063      	str	r3, [r4, #4]
 800af2e:	6923      	ldr	r3, [r4, #16]
 800af30:	6023      	str	r3, [r4, #0]
 800af32:	89a3      	ldrh	r3, [r4, #12]
 800af34:	f043 0308 	orr.w	r3, r3, #8
 800af38:	81a3      	strh	r3, [r4, #12]
 800af3a:	6923      	ldr	r3, [r4, #16]
 800af3c:	b94b      	cbnz	r3, 800af52 <__swsetup_r+0x9a>
 800af3e:	89a3      	ldrh	r3, [r4, #12]
 800af40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af48:	d003      	beq.n	800af52 <__swsetup_r+0x9a>
 800af4a:	4621      	mov	r1, r4
 800af4c:	4630      	mov	r0, r6
 800af4e:	f000 f9bf 	bl	800b2d0 <__smakebuf_r>
 800af52:	89a2      	ldrh	r2, [r4, #12]
 800af54:	f012 0301 	ands.w	r3, r2, #1
 800af58:	d00c      	beq.n	800af74 <__swsetup_r+0xbc>
 800af5a:	2300      	movs	r3, #0
 800af5c:	60a3      	str	r3, [r4, #8]
 800af5e:	6963      	ldr	r3, [r4, #20]
 800af60:	425b      	negs	r3, r3
 800af62:	61a3      	str	r3, [r4, #24]
 800af64:	6923      	ldr	r3, [r4, #16]
 800af66:	b953      	cbnz	r3, 800af7e <__swsetup_r+0xc6>
 800af68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af6c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800af70:	d1ba      	bne.n	800aee8 <__swsetup_r+0x30>
 800af72:	bd70      	pop	{r4, r5, r6, pc}
 800af74:	0792      	lsls	r2, r2, #30
 800af76:	bf58      	it	pl
 800af78:	6963      	ldrpl	r3, [r4, #20]
 800af7a:	60a3      	str	r3, [r4, #8]
 800af7c:	e7f2      	b.n	800af64 <__swsetup_r+0xac>
 800af7e:	2000      	movs	r0, #0
 800af80:	e7f7      	b.n	800af72 <__swsetup_r+0xba>
 800af82:	bf00      	nop
 800af84:	2000005c 	.word	0x2000005c
 800af88:	0800c364 	.word	0x0800c364
 800af8c:	0800c384 	.word	0x0800c384
 800af90:	0800c344 	.word	0x0800c344

0800af94 <__sflush_r>:
 800af94:	898a      	ldrh	r2, [r1, #12]
 800af96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af9a:	4605      	mov	r5, r0
 800af9c:	0710      	lsls	r0, r2, #28
 800af9e:	460c      	mov	r4, r1
 800afa0:	d458      	bmi.n	800b054 <__sflush_r+0xc0>
 800afa2:	684b      	ldr	r3, [r1, #4]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	dc05      	bgt.n	800afb4 <__sflush_r+0x20>
 800afa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afaa:	2b00      	cmp	r3, #0
 800afac:	dc02      	bgt.n	800afb4 <__sflush_r+0x20>
 800afae:	2000      	movs	r0, #0
 800afb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afb6:	2e00      	cmp	r6, #0
 800afb8:	d0f9      	beq.n	800afae <__sflush_r+0x1a>
 800afba:	2300      	movs	r3, #0
 800afbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afc0:	682f      	ldr	r7, [r5, #0]
 800afc2:	6a21      	ldr	r1, [r4, #32]
 800afc4:	602b      	str	r3, [r5, #0]
 800afc6:	d032      	beq.n	800b02e <__sflush_r+0x9a>
 800afc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afca:	89a3      	ldrh	r3, [r4, #12]
 800afcc:	075a      	lsls	r2, r3, #29
 800afce:	d505      	bpl.n	800afdc <__sflush_r+0x48>
 800afd0:	6863      	ldr	r3, [r4, #4]
 800afd2:	1ac0      	subs	r0, r0, r3
 800afd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afd6:	b10b      	cbz	r3, 800afdc <__sflush_r+0x48>
 800afd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afda:	1ac0      	subs	r0, r0, r3
 800afdc:	2300      	movs	r3, #0
 800afde:	4602      	mov	r2, r0
 800afe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afe2:	6a21      	ldr	r1, [r4, #32]
 800afe4:	4628      	mov	r0, r5
 800afe6:	47b0      	blx	r6
 800afe8:	1c43      	adds	r3, r0, #1
 800afea:	89a3      	ldrh	r3, [r4, #12]
 800afec:	d106      	bne.n	800affc <__sflush_r+0x68>
 800afee:	6829      	ldr	r1, [r5, #0]
 800aff0:	291d      	cmp	r1, #29
 800aff2:	d848      	bhi.n	800b086 <__sflush_r+0xf2>
 800aff4:	4a29      	ldr	r2, [pc, #164]	; (800b09c <__sflush_r+0x108>)
 800aff6:	40ca      	lsrs	r2, r1
 800aff8:	07d6      	lsls	r6, r2, #31
 800affa:	d544      	bpl.n	800b086 <__sflush_r+0xf2>
 800affc:	2200      	movs	r2, #0
 800affe:	6062      	str	r2, [r4, #4]
 800b000:	04d9      	lsls	r1, r3, #19
 800b002:	6922      	ldr	r2, [r4, #16]
 800b004:	6022      	str	r2, [r4, #0]
 800b006:	d504      	bpl.n	800b012 <__sflush_r+0x7e>
 800b008:	1c42      	adds	r2, r0, #1
 800b00a:	d101      	bne.n	800b010 <__sflush_r+0x7c>
 800b00c:	682b      	ldr	r3, [r5, #0]
 800b00e:	b903      	cbnz	r3, 800b012 <__sflush_r+0x7e>
 800b010:	6560      	str	r0, [r4, #84]	; 0x54
 800b012:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b014:	602f      	str	r7, [r5, #0]
 800b016:	2900      	cmp	r1, #0
 800b018:	d0c9      	beq.n	800afae <__sflush_r+0x1a>
 800b01a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b01e:	4299      	cmp	r1, r3
 800b020:	d002      	beq.n	800b028 <__sflush_r+0x94>
 800b022:	4628      	mov	r0, r5
 800b024:	f000 f994 	bl	800b350 <_free_r>
 800b028:	2000      	movs	r0, #0
 800b02a:	6360      	str	r0, [r4, #52]	; 0x34
 800b02c:	e7c0      	b.n	800afb0 <__sflush_r+0x1c>
 800b02e:	2301      	movs	r3, #1
 800b030:	4628      	mov	r0, r5
 800b032:	47b0      	blx	r6
 800b034:	1c41      	adds	r1, r0, #1
 800b036:	d1c8      	bne.n	800afca <__sflush_r+0x36>
 800b038:	682b      	ldr	r3, [r5, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d0c5      	beq.n	800afca <__sflush_r+0x36>
 800b03e:	2b1d      	cmp	r3, #29
 800b040:	d001      	beq.n	800b046 <__sflush_r+0xb2>
 800b042:	2b16      	cmp	r3, #22
 800b044:	d101      	bne.n	800b04a <__sflush_r+0xb6>
 800b046:	602f      	str	r7, [r5, #0]
 800b048:	e7b1      	b.n	800afae <__sflush_r+0x1a>
 800b04a:	89a3      	ldrh	r3, [r4, #12]
 800b04c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b050:	81a3      	strh	r3, [r4, #12]
 800b052:	e7ad      	b.n	800afb0 <__sflush_r+0x1c>
 800b054:	690f      	ldr	r7, [r1, #16]
 800b056:	2f00      	cmp	r7, #0
 800b058:	d0a9      	beq.n	800afae <__sflush_r+0x1a>
 800b05a:	0793      	lsls	r3, r2, #30
 800b05c:	680e      	ldr	r6, [r1, #0]
 800b05e:	bf08      	it	eq
 800b060:	694b      	ldreq	r3, [r1, #20]
 800b062:	600f      	str	r7, [r1, #0]
 800b064:	bf18      	it	ne
 800b066:	2300      	movne	r3, #0
 800b068:	eba6 0807 	sub.w	r8, r6, r7
 800b06c:	608b      	str	r3, [r1, #8]
 800b06e:	f1b8 0f00 	cmp.w	r8, #0
 800b072:	dd9c      	ble.n	800afae <__sflush_r+0x1a>
 800b074:	4643      	mov	r3, r8
 800b076:	463a      	mov	r2, r7
 800b078:	6a21      	ldr	r1, [r4, #32]
 800b07a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b07c:	4628      	mov	r0, r5
 800b07e:	47b0      	blx	r6
 800b080:	2800      	cmp	r0, #0
 800b082:	dc06      	bgt.n	800b092 <__sflush_r+0xfe>
 800b084:	89a3      	ldrh	r3, [r4, #12]
 800b086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b08a:	81a3      	strh	r3, [r4, #12]
 800b08c:	f04f 30ff 	mov.w	r0, #4294967295
 800b090:	e78e      	b.n	800afb0 <__sflush_r+0x1c>
 800b092:	4407      	add	r7, r0
 800b094:	eba8 0800 	sub.w	r8, r8, r0
 800b098:	e7e9      	b.n	800b06e <__sflush_r+0xda>
 800b09a:	bf00      	nop
 800b09c:	20400001 	.word	0x20400001

0800b0a0 <_fflush_r>:
 800b0a0:	b538      	push	{r3, r4, r5, lr}
 800b0a2:	690b      	ldr	r3, [r1, #16]
 800b0a4:	4605      	mov	r5, r0
 800b0a6:	460c      	mov	r4, r1
 800b0a8:	b1db      	cbz	r3, 800b0e2 <_fflush_r+0x42>
 800b0aa:	b118      	cbz	r0, 800b0b4 <_fflush_r+0x14>
 800b0ac:	6983      	ldr	r3, [r0, #24]
 800b0ae:	b90b      	cbnz	r3, 800b0b4 <_fflush_r+0x14>
 800b0b0:	f000 f860 	bl	800b174 <__sinit>
 800b0b4:	4b0c      	ldr	r3, [pc, #48]	; (800b0e8 <_fflush_r+0x48>)
 800b0b6:	429c      	cmp	r4, r3
 800b0b8:	d109      	bne.n	800b0ce <_fflush_r+0x2e>
 800b0ba:	686c      	ldr	r4, [r5, #4]
 800b0bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0c0:	b17b      	cbz	r3, 800b0e2 <_fflush_r+0x42>
 800b0c2:	4621      	mov	r1, r4
 800b0c4:	4628      	mov	r0, r5
 800b0c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0ca:	f7ff bf63 	b.w	800af94 <__sflush_r>
 800b0ce:	4b07      	ldr	r3, [pc, #28]	; (800b0ec <_fflush_r+0x4c>)
 800b0d0:	429c      	cmp	r4, r3
 800b0d2:	d101      	bne.n	800b0d8 <_fflush_r+0x38>
 800b0d4:	68ac      	ldr	r4, [r5, #8]
 800b0d6:	e7f1      	b.n	800b0bc <_fflush_r+0x1c>
 800b0d8:	4b05      	ldr	r3, [pc, #20]	; (800b0f0 <_fflush_r+0x50>)
 800b0da:	429c      	cmp	r4, r3
 800b0dc:	bf08      	it	eq
 800b0de:	68ec      	ldreq	r4, [r5, #12]
 800b0e0:	e7ec      	b.n	800b0bc <_fflush_r+0x1c>
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	bd38      	pop	{r3, r4, r5, pc}
 800b0e6:	bf00      	nop
 800b0e8:	0800c364 	.word	0x0800c364
 800b0ec:	0800c384 	.word	0x0800c384
 800b0f0:	0800c344 	.word	0x0800c344

0800b0f4 <std>:
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	b510      	push	{r4, lr}
 800b0f8:	4604      	mov	r4, r0
 800b0fa:	e9c0 3300 	strd	r3, r3, [r0]
 800b0fe:	6083      	str	r3, [r0, #8]
 800b100:	8181      	strh	r1, [r0, #12]
 800b102:	6643      	str	r3, [r0, #100]	; 0x64
 800b104:	81c2      	strh	r2, [r0, #14]
 800b106:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b10a:	6183      	str	r3, [r0, #24]
 800b10c:	4619      	mov	r1, r3
 800b10e:	2208      	movs	r2, #8
 800b110:	305c      	adds	r0, #92	; 0x5c
 800b112:	f7ff fdcc 	bl	800acae <memset>
 800b116:	4b05      	ldr	r3, [pc, #20]	; (800b12c <std+0x38>)
 800b118:	6263      	str	r3, [r4, #36]	; 0x24
 800b11a:	4b05      	ldr	r3, [pc, #20]	; (800b130 <std+0x3c>)
 800b11c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b11e:	4b05      	ldr	r3, [pc, #20]	; (800b134 <std+0x40>)
 800b120:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b122:	4b05      	ldr	r3, [pc, #20]	; (800b138 <std+0x44>)
 800b124:	6224      	str	r4, [r4, #32]
 800b126:	6323      	str	r3, [r4, #48]	; 0x30
 800b128:	bd10      	pop	{r4, pc}
 800b12a:	bf00      	nop
 800b12c:	0800ba75 	.word	0x0800ba75
 800b130:	0800ba97 	.word	0x0800ba97
 800b134:	0800bacf 	.word	0x0800bacf
 800b138:	0800baf3 	.word	0x0800baf3

0800b13c <_cleanup_r>:
 800b13c:	4901      	ldr	r1, [pc, #4]	; (800b144 <_cleanup_r+0x8>)
 800b13e:	f000 b885 	b.w	800b24c <_fwalk_reent>
 800b142:	bf00      	nop
 800b144:	0800b0a1 	.word	0x0800b0a1

0800b148 <__sfmoreglue>:
 800b148:	b570      	push	{r4, r5, r6, lr}
 800b14a:	1e4a      	subs	r2, r1, #1
 800b14c:	2568      	movs	r5, #104	; 0x68
 800b14e:	4355      	muls	r5, r2
 800b150:	460e      	mov	r6, r1
 800b152:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b156:	f000 f949 	bl	800b3ec <_malloc_r>
 800b15a:	4604      	mov	r4, r0
 800b15c:	b140      	cbz	r0, 800b170 <__sfmoreglue+0x28>
 800b15e:	2100      	movs	r1, #0
 800b160:	e9c0 1600 	strd	r1, r6, [r0]
 800b164:	300c      	adds	r0, #12
 800b166:	60a0      	str	r0, [r4, #8]
 800b168:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b16c:	f7ff fd9f 	bl	800acae <memset>
 800b170:	4620      	mov	r0, r4
 800b172:	bd70      	pop	{r4, r5, r6, pc}

0800b174 <__sinit>:
 800b174:	6983      	ldr	r3, [r0, #24]
 800b176:	b510      	push	{r4, lr}
 800b178:	4604      	mov	r4, r0
 800b17a:	bb33      	cbnz	r3, 800b1ca <__sinit+0x56>
 800b17c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b180:	6503      	str	r3, [r0, #80]	; 0x50
 800b182:	4b12      	ldr	r3, [pc, #72]	; (800b1cc <__sinit+0x58>)
 800b184:	4a12      	ldr	r2, [pc, #72]	; (800b1d0 <__sinit+0x5c>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	6282      	str	r2, [r0, #40]	; 0x28
 800b18a:	4298      	cmp	r0, r3
 800b18c:	bf04      	itt	eq
 800b18e:	2301      	moveq	r3, #1
 800b190:	6183      	streq	r3, [r0, #24]
 800b192:	f000 f81f 	bl	800b1d4 <__sfp>
 800b196:	6060      	str	r0, [r4, #4]
 800b198:	4620      	mov	r0, r4
 800b19a:	f000 f81b 	bl	800b1d4 <__sfp>
 800b19e:	60a0      	str	r0, [r4, #8]
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f000 f817 	bl	800b1d4 <__sfp>
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	60e0      	str	r0, [r4, #12]
 800b1aa:	2104      	movs	r1, #4
 800b1ac:	6860      	ldr	r0, [r4, #4]
 800b1ae:	f7ff ffa1 	bl	800b0f4 <std>
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	2109      	movs	r1, #9
 800b1b6:	68a0      	ldr	r0, [r4, #8]
 800b1b8:	f7ff ff9c 	bl	800b0f4 <std>
 800b1bc:	2202      	movs	r2, #2
 800b1be:	2112      	movs	r1, #18
 800b1c0:	68e0      	ldr	r0, [r4, #12]
 800b1c2:	f7ff ff97 	bl	800b0f4 <std>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	61a3      	str	r3, [r4, #24]
 800b1ca:	bd10      	pop	{r4, pc}
 800b1cc:	0800c340 	.word	0x0800c340
 800b1d0:	0800b13d 	.word	0x0800b13d

0800b1d4 <__sfp>:
 800b1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1d6:	4b1b      	ldr	r3, [pc, #108]	; (800b244 <__sfp+0x70>)
 800b1d8:	681e      	ldr	r6, [r3, #0]
 800b1da:	69b3      	ldr	r3, [r6, #24]
 800b1dc:	4607      	mov	r7, r0
 800b1de:	b913      	cbnz	r3, 800b1e6 <__sfp+0x12>
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	f7ff ffc7 	bl	800b174 <__sinit>
 800b1e6:	3648      	adds	r6, #72	; 0x48
 800b1e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b1ec:	3b01      	subs	r3, #1
 800b1ee:	d503      	bpl.n	800b1f8 <__sfp+0x24>
 800b1f0:	6833      	ldr	r3, [r6, #0]
 800b1f2:	b133      	cbz	r3, 800b202 <__sfp+0x2e>
 800b1f4:	6836      	ldr	r6, [r6, #0]
 800b1f6:	e7f7      	b.n	800b1e8 <__sfp+0x14>
 800b1f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b1fc:	b16d      	cbz	r5, 800b21a <__sfp+0x46>
 800b1fe:	3468      	adds	r4, #104	; 0x68
 800b200:	e7f4      	b.n	800b1ec <__sfp+0x18>
 800b202:	2104      	movs	r1, #4
 800b204:	4638      	mov	r0, r7
 800b206:	f7ff ff9f 	bl	800b148 <__sfmoreglue>
 800b20a:	6030      	str	r0, [r6, #0]
 800b20c:	2800      	cmp	r0, #0
 800b20e:	d1f1      	bne.n	800b1f4 <__sfp+0x20>
 800b210:	230c      	movs	r3, #12
 800b212:	603b      	str	r3, [r7, #0]
 800b214:	4604      	mov	r4, r0
 800b216:	4620      	mov	r0, r4
 800b218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b21a:	4b0b      	ldr	r3, [pc, #44]	; (800b248 <__sfp+0x74>)
 800b21c:	6665      	str	r5, [r4, #100]	; 0x64
 800b21e:	e9c4 5500 	strd	r5, r5, [r4]
 800b222:	60a5      	str	r5, [r4, #8]
 800b224:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b228:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b22c:	2208      	movs	r2, #8
 800b22e:	4629      	mov	r1, r5
 800b230:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b234:	f7ff fd3b 	bl	800acae <memset>
 800b238:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b23c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b240:	e7e9      	b.n	800b216 <__sfp+0x42>
 800b242:	bf00      	nop
 800b244:	0800c340 	.word	0x0800c340
 800b248:	ffff0001 	.word	0xffff0001

0800b24c <_fwalk_reent>:
 800b24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b250:	4680      	mov	r8, r0
 800b252:	4689      	mov	r9, r1
 800b254:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b258:	2600      	movs	r6, #0
 800b25a:	b914      	cbnz	r4, 800b262 <_fwalk_reent+0x16>
 800b25c:	4630      	mov	r0, r6
 800b25e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b262:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b266:	3f01      	subs	r7, #1
 800b268:	d501      	bpl.n	800b26e <_fwalk_reent+0x22>
 800b26a:	6824      	ldr	r4, [r4, #0]
 800b26c:	e7f5      	b.n	800b25a <_fwalk_reent+0xe>
 800b26e:	89ab      	ldrh	r3, [r5, #12]
 800b270:	2b01      	cmp	r3, #1
 800b272:	d907      	bls.n	800b284 <_fwalk_reent+0x38>
 800b274:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b278:	3301      	adds	r3, #1
 800b27a:	d003      	beq.n	800b284 <_fwalk_reent+0x38>
 800b27c:	4629      	mov	r1, r5
 800b27e:	4640      	mov	r0, r8
 800b280:	47c8      	blx	r9
 800b282:	4306      	orrs	r6, r0
 800b284:	3568      	adds	r5, #104	; 0x68
 800b286:	e7ee      	b.n	800b266 <_fwalk_reent+0x1a>

0800b288 <__swhatbuf_r>:
 800b288:	b570      	push	{r4, r5, r6, lr}
 800b28a:	460e      	mov	r6, r1
 800b28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b290:	2900      	cmp	r1, #0
 800b292:	b096      	sub	sp, #88	; 0x58
 800b294:	4614      	mov	r4, r2
 800b296:	461d      	mov	r5, r3
 800b298:	da07      	bge.n	800b2aa <__swhatbuf_r+0x22>
 800b29a:	2300      	movs	r3, #0
 800b29c:	602b      	str	r3, [r5, #0]
 800b29e:	89b3      	ldrh	r3, [r6, #12]
 800b2a0:	061a      	lsls	r2, r3, #24
 800b2a2:	d410      	bmi.n	800b2c6 <__swhatbuf_r+0x3e>
 800b2a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2a8:	e00e      	b.n	800b2c8 <__swhatbuf_r+0x40>
 800b2aa:	466a      	mov	r2, sp
 800b2ac:	f000 fc48 	bl	800bb40 <_fstat_r>
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	dbf2      	blt.n	800b29a <__swhatbuf_r+0x12>
 800b2b4:	9a01      	ldr	r2, [sp, #4]
 800b2b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b2ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b2be:	425a      	negs	r2, r3
 800b2c0:	415a      	adcs	r2, r3
 800b2c2:	602a      	str	r2, [r5, #0]
 800b2c4:	e7ee      	b.n	800b2a4 <__swhatbuf_r+0x1c>
 800b2c6:	2340      	movs	r3, #64	; 0x40
 800b2c8:	2000      	movs	r0, #0
 800b2ca:	6023      	str	r3, [r4, #0]
 800b2cc:	b016      	add	sp, #88	; 0x58
 800b2ce:	bd70      	pop	{r4, r5, r6, pc}

0800b2d0 <__smakebuf_r>:
 800b2d0:	898b      	ldrh	r3, [r1, #12]
 800b2d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b2d4:	079d      	lsls	r5, r3, #30
 800b2d6:	4606      	mov	r6, r0
 800b2d8:	460c      	mov	r4, r1
 800b2da:	d507      	bpl.n	800b2ec <__smakebuf_r+0x1c>
 800b2dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b2e0:	6023      	str	r3, [r4, #0]
 800b2e2:	6123      	str	r3, [r4, #16]
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	6163      	str	r3, [r4, #20]
 800b2e8:	b002      	add	sp, #8
 800b2ea:	bd70      	pop	{r4, r5, r6, pc}
 800b2ec:	ab01      	add	r3, sp, #4
 800b2ee:	466a      	mov	r2, sp
 800b2f0:	f7ff ffca 	bl	800b288 <__swhatbuf_r>
 800b2f4:	9900      	ldr	r1, [sp, #0]
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	4630      	mov	r0, r6
 800b2fa:	f000 f877 	bl	800b3ec <_malloc_r>
 800b2fe:	b948      	cbnz	r0, 800b314 <__smakebuf_r+0x44>
 800b300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b304:	059a      	lsls	r2, r3, #22
 800b306:	d4ef      	bmi.n	800b2e8 <__smakebuf_r+0x18>
 800b308:	f023 0303 	bic.w	r3, r3, #3
 800b30c:	f043 0302 	orr.w	r3, r3, #2
 800b310:	81a3      	strh	r3, [r4, #12]
 800b312:	e7e3      	b.n	800b2dc <__smakebuf_r+0xc>
 800b314:	4b0d      	ldr	r3, [pc, #52]	; (800b34c <__smakebuf_r+0x7c>)
 800b316:	62b3      	str	r3, [r6, #40]	; 0x28
 800b318:	89a3      	ldrh	r3, [r4, #12]
 800b31a:	6020      	str	r0, [r4, #0]
 800b31c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b320:	81a3      	strh	r3, [r4, #12]
 800b322:	9b00      	ldr	r3, [sp, #0]
 800b324:	6163      	str	r3, [r4, #20]
 800b326:	9b01      	ldr	r3, [sp, #4]
 800b328:	6120      	str	r0, [r4, #16]
 800b32a:	b15b      	cbz	r3, 800b344 <__smakebuf_r+0x74>
 800b32c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b330:	4630      	mov	r0, r6
 800b332:	f000 fc17 	bl	800bb64 <_isatty_r>
 800b336:	b128      	cbz	r0, 800b344 <__smakebuf_r+0x74>
 800b338:	89a3      	ldrh	r3, [r4, #12]
 800b33a:	f023 0303 	bic.w	r3, r3, #3
 800b33e:	f043 0301 	orr.w	r3, r3, #1
 800b342:	81a3      	strh	r3, [r4, #12]
 800b344:	89a3      	ldrh	r3, [r4, #12]
 800b346:	431d      	orrs	r5, r3
 800b348:	81a5      	strh	r5, [r4, #12]
 800b34a:	e7cd      	b.n	800b2e8 <__smakebuf_r+0x18>
 800b34c:	0800b13d 	.word	0x0800b13d

0800b350 <_free_r>:
 800b350:	b538      	push	{r3, r4, r5, lr}
 800b352:	4605      	mov	r5, r0
 800b354:	2900      	cmp	r1, #0
 800b356:	d045      	beq.n	800b3e4 <_free_r+0x94>
 800b358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b35c:	1f0c      	subs	r4, r1, #4
 800b35e:	2b00      	cmp	r3, #0
 800b360:	bfb8      	it	lt
 800b362:	18e4      	addlt	r4, r4, r3
 800b364:	f000 fc39 	bl	800bbda <__malloc_lock>
 800b368:	4a1f      	ldr	r2, [pc, #124]	; (800b3e8 <_free_r+0x98>)
 800b36a:	6813      	ldr	r3, [r2, #0]
 800b36c:	4610      	mov	r0, r2
 800b36e:	b933      	cbnz	r3, 800b37e <_free_r+0x2e>
 800b370:	6063      	str	r3, [r4, #4]
 800b372:	6014      	str	r4, [r2, #0]
 800b374:	4628      	mov	r0, r5
 800b376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b37a:	f000 bc2f 	b.w	800bbdc <__malloc_unlock>
 800b37e:	42a3      	cmp	r3, r4
 800b380:	d90c      	bls.n	800b39c <_free_r+0x4c>
 800b382:	6821      	ldr	r1, [r4, #0]
 800b384:	1862      	adds	r2, r4, r1
 800b386:	4293      	cmp	r3, r2
 800b388:	bf04      	itt	eq
 800b38a:	681a      	ldreq	r2, [r3, #0]
 800b38c:	685b      	ldreq	r3, [r3, #4]
 800b38e:	6063      	str	r3, [r4, #4]
 800b390:	bf04      	itt	eq
 800b392:	1852      	addeq	r2, r2, r1
 800b394:	6022      	streq	r2, [r4, #0]
 800b396:	6004      	str	r4, [r0, #0]
 800b398:	e7ec      	b.n	800b374 <_free_r+0x24>
 800b39a:	4613      	mov	r3, r2
 800b39c:	685a      	ldr	r2, [r3, #4]
 800b39e:	b10a      	cbz	r2, 800b3a4 <_free_r+0x54>
 800b3a0:	42a2      	cmp	r2, r4
 800b3a2:	d9fa      	bls.n	800b39a <_free_r+0x4a>
 800b3a4:	6819      	ldr	r1, [r3, #0]
 800b3a6:	1858      	adds	r0, r3, r1
 800b3a8:	42a0      	cmp	r0, r4
 800b3aa:	d10b      	bne.n	800b3c4 <_free_r+0x74>
 800b3ac:	6820      	ldr	r0, [r4, #0]
 800b3ae:	4401      	add	r1, r0
 800b3b0:	1858      	adds	r0, r3, r1
 800b3b2:	4282      	cmp	r2, r0
 800b3b4:	6019      	str	r1, [r3, #0]
 800b3b6:	d1dd      	bne.n	800b374 <_free_r+0x24>
 800b3b8:	6810      	ldr	r0, [r2, #0]
 800b3ba:	6852      	ldr	r2, [r2, #4]
 800b3bc:	605a      	str	r2, [r3, #4]
 800b3be:	4401      	add	r1, r0
 800b3c0:	6019      	str	r1, [r3, #0]
 800b3c2:	e7d7      	b.n	800b374 <_free_r+0x24>
 800b3c4:	d902      	bls.n	800b3cc <_free_r+0x7c>
 800b3c6:	230c      	movs	r3, #12
 800b3c8:	602b      	str	r3, [r5, #0]
 800b3ca:	e7d3      	b.n	800b374 <_free_r+0x24>
 800b3cc:	6820      	ldr	r0, [r4, #0]
 800b3ce:	1821      	adds	r1, r4, r0
 800b3d0:	428a      	cmp	r2, r1
 800b3d2:	bf04      	itt	eq
 800b3d4:	6811      	ldreq	r1, [r2, #0]
 800b3d6:	6852      	ldreq	r2, [r2, #4]
 800b3d8:	6062      	str	r2, [r4, #4]
 800b3da:	bf04      	itt	eq
 800b3dc:	1809      	addeq	r1, r1, r0
 800b3de:	6021      	streq	r1, [r4, #0]
 800b3e0:	605c      	str	r4, [r3, #4]
 800b3e2:	e7c7      	b.n	800b374 <_free_r+0x24>
 800b3e4:	bd38      	pop	{r3, r4, r5, pc}
 800b3e6:	bf00      	nop
 800b3e8:	200040f0 	.word	0x200040f0

0800b3ec <_malloc_r>:
 800b3ec:	b570      	push	{r4, r5, r6, lr}
 800b3ee:	1ccd      	adds	r5, r1, #3
 800b3f0:	f025 0503 	bic.w	r5, r5, #3
 800b3f4:	3508      	adds	r5, #8
 800b3f6:	2d0c      	cmp	r5, #12
 800b3f8:	bf38      	it	cc
 800b3fa:	250c      	movcc	r5, #12
 800b3fc:	2d00      	cmp	r5, #0
 800b3fe:	4606      	mov	r6, r0
 800b400:	db01      	blt.n	800b406 <_malloc_r+0x1a>
 800b402:	42a9      	cmp	r1, r5
 800b404:	d903      	bls.n	800b40e <_malloc_r+0x22>
 800b406:	230c      	movs	r3, #12
 800b408:	6033      	str	r3, [r6, #0]
 800b40a:	2000      	movs	r0, #0
 800b40c:	bd70      	pop	{r4, r5, r6, pc}
 800b40e:	f000 fbe4 	bl	800bbda <__malloc_lock>
 800b412:	4a21      	ldr	r2, [pc, #132]	; (800b498 <_malloc_r+0xac>)
 800b414:	6814      	ldr	r4, [r2, #0]
 800b416:	4621      	mov	r1, r4
 800b418:	b991      	cbnz	r1, 800b440 <_malloc_r+0x54>
 800b41a:	4c20      	ldr	r4, [pc, #128]	; (800b49c <_malloc_r+0xb0>)
 800b41c:	6823      	ldr	r3, [r4, #0]
 800b41e:	b91b      	cbnz	r3, 800b428 <_malloc_r+0x3c>
 800b420:	4630      	mov	r0, r6
 800b422:	f000 fb17 	bl	800ba54 <_sbrk_r>
 800b426:	6020      	str	r0, [r4, #0]
 800b428:	4629      	mov	r1, r5
 800b42a:	4630      	mov	r0, r6
 800b42c:	f000 fb12 	bl	800ba54 <_sbrk_r>
 800b430:	1c43      	adds	r3, r0, #1
 800b432:	d124      	bne.n	800b47e <_malloc_r+0x92>
 800b434:	230c      	movs	r3, #12
 800b436:	6033      	str	r3, [r6, #0]
 800b438:	4630      	mov	r0, r6
 800b43a:	f000 fbcf 	bl	800bbdc <__malloc_unlock>
 800b43e:	e7e4      	b.n	800b40a <_malloc_r+0x1e>
 800b440:	680b      	ldr	r3, [r1, #0]
 800b442:	1b5b      	subs	r3, r3, r5
 800b444:	d418      	bmi.n	800b478 <_malloc_r+0x8c>
 800b446:	2b0b      	cmp	r3, #11
 800b448:	d90f      	bls.n	800b46a <_malloc_r+0x7e>
 800b44a:	600b      	str	r3, [r1, #0]
 800b44c:	50cd      	str	r5, [r1, r3]
 800b44e:	18cc      	adds	r4, r1, r3
 800b450:	4630      	mov	r0, r6
 800b452:	f000 fbc3 	bl	800bbdc <__malloc_unlock>
 800b456:	f104 000b 	add.w	r0, r4, #11
 800b45a:	1d23      	adds	r3, r4, #4
 800b45c:	f020 0007 	bic.w	r0, r0, #7
 800b460:	1ac3      	subs	r3, r0, r3
 800b462:	d0d3      	beq.n	800b40c <_malloc_r+0x20>
 800b464:	425a      	negs	r2, r3
 800b466:	50e2      	str	r2, [r4, r3]
 800b468:	e7d0      	b.n	800b40c <_malloc_r+0x20>
 800b46a:	428c      	cmp	r4, r1
 800b46c:	684b      	ldr	r3, [r1, #4]
 800b46e:	bf16      	itet	ne
 800b470:	6063      	strne	r3, [r4, #4]
 800b472:	6013      	streq	r3, [r2, #0]
 800b474:	460c      	movne	r4, r1
 800b476:	e7eb      	b.n	800b450 <_malloc_r+0x64>
 800b478:	460c      	mov	r4, r1
 800b47a:	6849      	ldr	r1, [r1, #4]
 800b47c:	e7cc      	b.n	800b418 <_malloc_r+0x2c>
 800b47e:	1cc4      	adds	r4, r0, #3
 800b480:	f024 0403 	bic.w	r4, r4, #3
 800b484:	42a0      	cmp	r0, r4
 800b486:	d005      	beq.n	800b494 <_malloc_r+0xa8>
 800b488:	1a21      	subs	r1, r4, r0
 800b48a:	4630      	mov	r0, r6
 800b48c:	f000 fae2 	bl	800ba54 <_sbrk_r>
 800b490:	3001      	adds	r0, #1
 800b492:	d0cf      	beq.n	800b434 <_malloc_r+0x48>
 800b494:	6025      	str	r5, [r4, #0]
 800b496:	e7db      	b.n	800b450 <_malloc_r+0x64>
 800b498:	200040f0 	.word	0x200040f0
 800b49c:	200040f4 	.word	0x200040f4

0800b4a0 <__ssputs_r>:
 800b4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a4:	688e      	ldr	r6, [r1, #8]
 800b4a6:	429e      	cmp	r6, r3
 800b4a8:	4682      	mov	sl, r0
 800b4aa:	460c      	mov	r4, r1
 800b4ac:	4690      	mov	r8, r2
 800b4ae:	4699      	mov	r9, r3
 800b4b0:	d837      	bhi.n	800b522 <__ssputs_r+0x82>
 800b4b2:	898a      	ldrh	r2, [r1, #12]
 800b4b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4b8:	d031      	beq.n	800b51e <__ssputs_r+0x7e>
 800b4ba:	6825      	ldr	r5, [r4, #0]
 800b4bc:	6909      	ldr	r1, [r1, #16]
 800b4be:	1a6f      	subs	r7, r5, r1
 800b4c0:	6965      	ldr	r5, [r4, #20]
 800b4c2:	2302      	movs	r3, #2
 800b4c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4c8:	fb95 f5f3 	sdiv	r5, r5, r3
 800b4cc:	f109 0301 	add.w	r3, r9, #1
 800b4d0:	443b      	add	r3, r7
 800b4d2:	429d      	cmp	r5, r3
 800b4d4:	bf38      	it	cc
 800b4d6:	461d      	movcc	r5, r3
 800b4d8:	0553      	lsls	r3, r2, #21
 800b4da:	d530      	bpl.n	800b53e <__ssputs_r+0x9e>
 800b4dc:	4629      	mov	r1, r5
 800b4de:	f7ff ff85 	bl	800b3ec <_malloc_r>
 800b4e2:	4606      	mov	r6, r0
 800b4e4:	b950      	cbnz	r0, 800b4fc <__ssputs_r+0x5c>
 800b4e6:	230c      	movs	r3, #12
 800b4e8:	f8ca 3000 	str.w	r3, [sl]
 800b4ec:	89a3      	ldrh	r3, [r4, #12]
 800b4ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4f2:	81a3      	strh	r3, [r4, #12]
 800b4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4fc:	463a      	mov	r2, r7
 800b4fe:	6921      	ldr	r1, [r4, #16]
 800b500:	f7ff fbca 	bl	800ac98 <memcpy>
 800b504:	89a3      	ldrh	r3, [r4, #12]
 800b506:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b50a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b50e:	81a3      	strh	r3, [r4, #12]
 800b510:	6126      	str	r6, [r4, #16]
 800b512:	6165      	str	r5, [r4, #20]
 800b514:	443e      	add	r6, r7
 800b516:	1bed      	subs	r5, r5, r7
 800b518:	6026      	str	r6, [r4, #0]
 800b51a:	60a5      	str	r5, [r4, #8]
 800b51c:	464e      	mov	r6, r9
 800b51e:	454e      	cmp	r6, r9
 800b520:	d900      	bls.n	800b524 <__ssputs_r+0x84>
 800b522:	464e      	mov	r6, r9
 800b524:	4632      	mov	r2, r6
 800b526:	4641      	mov	r1, r8
 800b528:	6820      	ldr	r0, [r4, #0]
 800b52a:	f000 fb3d 	bl	800bba8 <memmove>
 800b52e:	68a3      	ldr	r3, [r4, #8]
 800b530:	1b9b      	subs	r3, r3, r6
 800b532:	60a3      	str	r3, [r4, #8]
 800b534:	6823      	ldr	r3, [r4, #0]
 800b536:	441e      	add	r6, r3
 800b538:	6026      	str	r6, [r4, #0]
 800b53a:	2000      	movs	r0, #0
 800b53c:	e7dc      	b.n	800b4f8 <__ssputs_r+0x58>
 800b53e:	462a      	mov	r2, r5
 800b540:	f000 fb4d 	bl	800bbde <_realloc_r>
 800b544:	4606      	mov	r6, r0
 800b546:	2800      	cmp	r0, #0
 800b548:	d1e2      	bne.n	800b510 <__ssputs_r+0x70>
 800b54a:	6921      	ldr	r1, [r4, #16]
 800b54c:	4650      	mov	r0, sl
 800b54e:	f7ff feff 	bl	800b350 <_free_r>
 800b552:	e7c8      	b.n	800b4e6 <__ssputs_r+0x46>

0800b554 <_svfiprintf_r>:
 800b554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b558:	461d      	mov	r5, r3
 800b55a:	898b      	ldrh	r3, [r1, #12]
 800b55c:	061f      	lsls	r7, r3, #24
 800b55e:	b09d      	sub	sp, #116	; 0x74
 800b560:	4680      	mov	r8, r0
 800b562:	460c      	mov	r4, r1
 800b564:	4616      	mov	r6, r2
 800b566:	d50f      	bpl.n	800b588 <_svfiprintf_r+0x34>
 800b568:	690b      	ldr	r3, [r1, #16]
 800b56a:	b96b      	cbnz	r3, 800b588 <_svfiprintf_r+0x34>
 800b56c:	2140      	movs	r1, #64	; 0x40
 800b56e:	f7ff ff3d 	bl	800b3ec <_malloc_r>
 800b572:	6020      	str	r0, [r4, #0]
 800b574:	6120      	str	r0, [r4, #16]
 800b576:	b928      	cbnz	r0, 800b584 <_svfiprintf_r+0x30>
 800b578:	230c      	movs	r3, #12
 800b57a:	f8c8 3000 	str.w	r3, [r8]
 800b57e:	f04f 30ff 	mov.w	r0, #4294967295
 800b582:	e0c8      	b.n	800b716 <_svfiprintf_r+0x1c2>
 800b584:	2340      	movs	r3, #64	; 0x40
 800b586:	6163      	str	r3, [r4, #20]
 800b588:	2300      	movs	r3, #0
 800b58a:	9309      	str	r3, [sp, #36]	; 0x24
 800b58c:	2320      	movs	r3, #32
 800b58e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b592:	2330      	movs	r3, #48	; 0x30
 800b594:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b598:	9503      	str	r5, [sp, #12]
 800b59a:	f04f 0b01 	mov.w	fp, #1
 800b59e:	4637      	mov	r7, r6
 800b5a0:	463d      	mov	r5, r7
 800b5a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b5a6:	b10b      	cbz	r3, 800b5ac <_svfiprintf_r+0x58>
 800b5a8:	2b25      	cmp	r3, #37	; 0x25
 800b5aa:	d13e      	bne.n	800b62a <_svfiprintf_r+0xd6>
 800b5ac:	ebb7 0a06 	subs.w	sl, r7, r6
 800b5b0:	d00b      	beq.n	800b5ca <_svfiprintf_r+0x76>
 800b5b2:	4653      	mov	r3, sl
 800b5b4:	4632      	mov	r2, r6
 800b5b6:	4621      	mov	r1, r4
 800b5b8:	4640      	mov	r0, r8
 800b5ba:	f7ff ff71 	bl	800b4a0 <__ssputs_r>
 800b5be:	3001      	adds	r0, #1
 800b5c0:	f000 80a4 	beq.w	800b70c <_svfiprintf_r+0x1b8>
 800b5c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5c6:	4453      	add	r3, sl
 800b5c8:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ca:	783b      	ldrb	r3, [r7, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f000 809d 	beq.w	800b70c <_svfiprintf_r+0x1b8>
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5dc:	9304      	str	r3, [sp, #16]
 800b5de:	9307      	str	r3, [sp, #28]
 800b5e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5e4:	931a      	str	r3, [sp, #104]	; 0x68
 800b5e6:	462f      	mov	r7, r5
 800b5e8:	2205      	movs	r2, #5
 800b5ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b5ee:	4850      	ldr	r0, [pc, #320]	; (800b730 <_svfiprintf_r+0x1dc>)
 800b5f0:	f7f4 fdfe 	bl	80001f0 <memchr>
 800b5f4:	9b04      	ldr	r3, [sp, #16]
 800b5f6:	b9d0      	cbnz	r0, 800b62e <_svfiprintf_r+0xda>
 800b5f8:	06d9      	lsls	r1, r3, #27
 800b5fa:	bf44      	itt	mi
 800b5fc:	2220      	movmi	r2, #32
 800b5fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b602:	071a      	lsls	r2, r3, #28
 800b604:	bf44      	itt	mi
 800b606:	222b      	movmi	r2, #43	; 0x2b
 800b608:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b60c:	782a      	ldrb	r2, [r5, #0]
 800b60e:	2a2a      	cmp	r2, #42	; 0x2a
 800b610:	d015      	beq.n	800b63e <_svfiprintf_r+0xea>
 800b612:	9a07      	ldr	r2, [sp, #28]
 800b614:	462f      	mov	r7, r5
 800b616:	2000      	movs	r0, #0
 800b618:	250a      	movs	r5, #10
 800b61a:	4639      	mov	r1, r7
 800b61c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b620:	3b30      	subs	r3, #48	; 0x30
 800b622:	2b09      	cmp	r3, #9
 800b624:	d94d      	bls.n	800b6c2 <_svfiprintf_r+0x16e>
 800b626:	b1b8      	cbz	r0, 800b658 <_svfiprintf_r+0x104>
 800b628:	e00f      	b.n	800b64a <_svfiprintf_r+0xf6>
 800b62a:	462f      	mov	r7, r5
 800b62c:	e7b8      	b.n	800b5a0 <_svfiprintf_r+0x4c>
 800b62e:	4a40      	ldr	r2, [pc, #256]	; (800b730 <_svfiprintf_r+0x1dc>)
 800b630:	1a80      	subs	r0, r0, r2
 800b632:	fa0b f000 	lsl.w	r0, fp, r0
 800b636:	4318      	orrs	r0, r3
 800b638:	9004      	str	r0, [sp, #16]
 800b63a:	463d      	mov	r5, r7
 800b63c:	e7d3      	b.n	800b5e6 <_svfiprintf_r+0x92>
 800b63e:	9a03      	ldr	r2, [sp, #12]
 800b640:	1d11      	adds	r1, r2, #4
 800b642:	6812      	ldr	r2, [r2, #0]
 800b644:	9103      	str	r1, [sp, #12]
 800b646:	2a00      	cmp	r2, #0
 800b648:	db01      	blt.n	800b64e <_svfiprintf_r+0xfa>
 800b64a:	9207      	str	r2, [sp, #28]
 800b64c:	e004      	b.n	800b658 <_svfiprintf_r+0x104>
 800b64e:	4252      	negs	r2, r2
 800b650:	f043 0302 	orr.w	r3, r3, #2
 800b654:	9207      	str	r2, [sp, #28]
 800b656:	9304      	str	r3, [sp, #16]
 800b658:	783b      	ldrb	r3, [r7, #0]
 800b65a:	2b2e      	cmp	r3, #46	; 0x2e
 800b65c:	d10c      	bne.n	800b678 <_svfiprintf_r+0x124>
 800b65e:	787b      	ldrb	r3, [r7, #1]
 800b660:	2b2a      	cmp	r3, #42	; 0x2a
 800b662:	d133      	bne.n	800b6cc <_svfiprintf_r+0x178>
 800b664:	9b03      	ldr	r3, [sp, #12]
 800b666:	1d1a      	adds	r2, r3, #4
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	9203      	str	r2, [sp, #12]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	bfb8      	it	lt
 800b670:	f04f 33ff 	movlt.w	r3, #4294967295
 800b674:	3702      	adds	r7, #2
 800b676:	9305      	str	r3, [sp, #20]
 800b678:	4d2e      	ldr	r5, [pc, #184]	; (800b734 <_svfiprintf_r+0x1e0>)
 800b67a:	7839      	ldrb	r1, [r7, #0]
 800b67c:	2203      	movs	r2, #3
 800b67e:	4628      	mov	r0, r5
 800b680:	f7f4 fdb6 	bl	80001f0 <memchr>
 800b684:	b138      	cbz	r0, 800b696 <_svfiprintf_r+0x142>
 800b686:	2340      	movs	r3, #64	; 0x40
 800b688:	1b40      	subs	r0, r0, r5
 800b68a:	fa03 f000 	lsl.w	r0, r3, r0
 800b68e:	9b04      	ldr	r3, [sp, #16]
 800b690:	4303      	orrs	r3, r0
 800b692:	3701      	adds	r7, #1
 800b694:	9304      	str	r3, [sp, #16]
 800b696:	7839      	ldrb	r1, [r7, #0]
 800b698:	4827      	ldr	r0, [pc, #156]	; (800b738 <_svfiprintf_r+0x1e4>)
 800b69a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b69e:	2206      	movs	r2, #6
 800b6a0:	1c7e      	adds	r6, r7, #1
 800b6a2:	f7f4 fda5 	bl	80001f0 <memchr>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d038      	beq.n	800b71c <_svfiprintf_r+0x1c8>
 800b6aa:	4b24      	ldr	r3, [pc, #144]	; (800b73c <_svfiprintf_r+0x1e8>)
 800b6ac:	bb13      	cbnz	r3, 800b6f4 <_svfiprintf_r+0x1a0>
 800b6ae:	9b03      	ldr	r3, [sp, #12]
 800b6b0:	3307      	adds	r3, #7
 800b6b2:	f023 0307 	bic.w	r3, r3, #7
 800b6b6:	3308      	adds	r3, #8
 800b6b8:	9303      	str	r3, [sp, #12]
 800b6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6bc:	444b      	add	r3, r9
 800b6be:	9309      	str	r3, [sp, #36]	; 0x24
 800b6c0:	e76d      	b.n	800b59e <_svfiprintf_r+0x4a>
 800b6c2:	fb05 3202 	mla	r2, r5, r2, r3
 800b6c6:	2001      	movs	r0, #1
 800b6c8:	460f      	mov	r7, r1
 800b6ca:	e7a6      	b.n	800b61a <_svfiprintf_r+0xc6>
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	3701      	adds	r7, #1
 800b6d0:	9305      	str	r3, [sp, #20]
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	250a      	movs	r5, #10
 800b6d6:	4638      	mov	r0, r7
 800b6d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6dc:	3a30      	subs	r2, #48	; 0x30
 800b6de:	2a09      	cmp	r2, #9
 800b6e0:	d903      	bls.n	800b6ea <_svfiprintf_r+0x196>
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d0c8      	beq.n	800b678 <_svfiprintf_r+0x124>
 800b6e6:	9105      	str	r1, [sp, #20]
 800b6e8:	e7c6      	b.n	800b678 <_svfiprintf_r+0x124>
 800b6ea:	fb05 2101 	mla	r1, r5, r1, r2
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	4607      	mov	r7, r0
 800b6f2:	e7f0      	b.n	800b6d6 <_svfiprintf_r+0x182>
 800b6f4:	ab03      	add	r3, sp, #12
 800b6f6:	9300      	str	r3, [sp, #0]
 800b6f8:	4622      	mov	r2, r4
 800b6fa:	4b11      	ldr	r3, [pc, #68]	; (800b740 <_svfiprintf_r+0x1ec>)
 800b6fc:	a904      	add	r1, sp, #16
 800b6fe:	4640      	mov	r0, r8
 800b700:	f3af 8000 	nop.w
 800b704:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b708:	4681      	mov	r9, r0
 800b70a:	d1d6      	bne.n	800b6ba <_svfiprintf_r+0x166>
 800b70c:	89a3      	ldrh	r3, [r4, #12]
 800b70e:	065b      	lsls	r3, r3, #25
 800b710:	f53f af35 	bmi.w	800b57e <_svfiprintf_r+0x2a>
 800b714:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b716:	b01d      	add	sp, #116	; 0x74
 800b718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b71c:	ab03      	add	r3, sp, #12
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	4622      	mov	r2, r4
 800b722:	4b07      	ldr	r3, [pc, #28]	; (800b740 <_svfiprintf_r+0x1ec>)
 800b724:	a904      	add	r1, sp, #16
 800b726:	4640      	mov	r0, r8
 800b728:	f000 f882 	bl	800b830 <_printf_i>
 800b72c:	e7ea      	b.n	800b704 <_svfiprintf_r+0x1b0>
 800b72e:	bf00      	nop
 800b730:	0800c3a4 	.word	0x0800c3a4
 800b734:	0800c3aa 	.word	0x0800c3aa
 800b738:	0800c3ae 	.word	0x0800c3ae
 800b73c:	00000000 	.word	0x00000000
 800b740:	0800b4a1 	.word	0x0800b4a1

0800b744 <_printf_common>:
 800b744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b748:	4691      	mov	r9, r2
 800b74a:	461f      	mov	r7, r3
 800b74c:	688a      	ldr	r2, [r1, #8]
 800b74e:	690b      	ldr	r3, [r1, #16]
 800b750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b754:	4293      	cmp	r3, r2
 800b756:	bfb8      	it	lt
 800b758:	4613      	movlt	r3, r2
 800b75a:	f8c9 3000 	str.w	r3, [r9]
 800b75e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b762:	4606      	mov	r6, r0
 800b764:	460c      	mov	r4, r1
 800b766:	b112      	cbz	r2, 800b76e <_printf_common+0x2a>
 800b768:	3301      	adds	r3, #1
 800b76a:	f8c9 3000 	str.w	r3, [r9]
 800b76e:	6823      	ldr	r3, [r4, #0]
 800b770:	0699      	lsls	r1, r3, #26
 800b772:	bf42      	ittt	mi
 800b774:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b778:	3302      	addmi	r3, #2
 800b77a:	f8c9 3000 	strmi.w	r3, [r9]
 800b77e:	6825      	ldr	r5, [r4, #0]
 800b780:	f015 0506 	ands.w	r5, r5, #6
 800b784:	d107      	bne.n	800b796 <_printf_common+0x52>
 800b786:	f104 0a19 	add.w	sl, r4, #25
 800b78a:	68e3      	ldr	r3, [r4, #12]
 800b78c:	f8d9 2000 	ldr.w	r2, [r9]
 800b790:	1a9b      	subs	r3, r3, r2
 800b792:	42ab      	cmp	r3, r5
 800b794:	dc28      	bgt.n	800b7e8 <_printf_common+0xa4>
 800b796:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b79a:	6822      	ldr	r2, [r4, #0]
 800b79c:	3300      	adds	r3, #0
 800b79e:	bf18      	it	ne
 800b7a0:	2301      	movne	r3, #1
 800b7a2:	0692      	lsls	r2, r2, #26
 800b7a4:	d42d      	bmi.n	800b802 <_printf_common+0xbe>
 800b7a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7aa:	4639      	mov	r1, r7
 800b7ac:	4630      	mov	r0, r6
 800b7ae:	47c0      	blx	r8
 800b7b0:	3001      	adds	r0, #1
 800b7b2:	d020      	beq.n	800b7f6 <_printf_common+0xb2>
 800b7b4:	6823      	ldr	r3, [r4, #0]
 800b7b6:	68e5      	ldr	r5, [r4, #12]
 800b7b8:	f8d9 2000 	ldr.w	r2, [r9]
 800b7bc:	f003 0306 	and.w	r3, r3, #6
 800b7c0:	2b04      	cmp	r3, #4
 800b7c2:	bf08      	it	eq
 800b7c4:	1aad      	subeq	r5, r5, r2
 800b7c6:	68a3      	ldr	r3, [r4, #8]
 800b7c8:	6922      	ldr	r2, [r4, #16]
 800b7ca:	bf0c      	ite	eq
 800b7cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7d0:	2500      	movne	r5, #0
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	bfc4      	itt	gt
 800b7d6:	1a9b      	subgt	r3, r3, r2
 800b7d8:	18ed      	addgt	r5, r5, r3
 800b7da:	f04f 0900 	mov.w	r9, #0
 800b7de:	341a      	adds	r4, #26
 800b7e0:	454d      	cmp	r5, r9
 800b7e2:	d11a      	bne.n	800b81a <_printf_common+0xd6>
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	e008      	b.n	800b7fa <_printf_common+0xb6>
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	4652      	mov	r2, sl
 800b7ec:	4639      	mov	r1, r7
 800b7ee:	4630      	mov	r0, r6
 800b7f0:	47c0      	blx	r8
 800b7f2:	3001      	adds	r0, #1
 800b7f4:	d103      	bne.n	800b7fe <_printf_common+0xba>
 800b7f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7fe:	3501      	adds	r5, #1
 800b800:	e7c3      	b.n	800b78a <_printf_common+0x46>
 800b802:	18e1      	adds	r1, r4, r3
 800b804:	1c5a      	adds	r2, r3, #1
 800b806:	2030      	movs	r0, #48	; 0x30
 800b808:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b80c:	4422      	add	r2, r4
 800b80e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b812:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b816:	3302      	adds	r3, #2
 800b818:	e7c5      	b.n	800b7a6 <_printf_common+0x62>
 800b81a:	2301      	movs	r3, #1
 800b81c:	4622      	mov	r2, r4
 800b81e:	4639      	mov	r1, r7
 800b820:	4630      	mov	r0, r6
 800b822:	47c0      	blx	r8
 800b824:	3001      	adds	r0, #1
 800b826:	d0e6      	beq.n	800b7f6 <_printf_common+0xb2>
 800b828:	f109 0901 	add.w	r9, r9, #1
 800b82c:	e7d8      	b.n	800b7e0 <_printf_common+0x9c>
	...

0800b830 <_printf_i>:
 800b830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b834:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b838:	460c      	mov	r4, r1
 800b83a:	7e09      	ldrb	r1, [r1, #24]
 800b83c:	b085      	sub	sp, #20
 800b83e:	296e      	cmp	r1, #110	; 0x6e
 800b840:	4617      	mov	r7, r2
 800b842:	4606      	mov	r6, r0
 800b844:	4698      	mov	r8, r3
 800b846:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b848:	f000 80b3 	beq.w	800b9b2 <_printf_i+0x182>
 800b84c:	d822      	bhi.n	800b894 <_printf_i+0x64>
 800b84e:	2963      	cmp	r1, #99	; 0x63
 800b850:	d036      	beq.n	800b8c0 <_printf_i+0x90>
 800b852:	d80a      	bhi.n	800b86a <_printf_i+0x3a>
 800b854:	2900      	cmp	r1, #0
 800b856:	f000 80b9 	beq.w	800b9cc <_printf_i+0x19c>
 800b85a:	2958      	cmp	r1, #88	; 0x58
 800b85c:	f000 8083 	beq.w	800b966 <_printf_i+0x136>
 800b860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b864:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b868:	e032      	b.n	800b8d0 <_printf_i+0xa0>
 800b86a:	2964      	cmp	r1, #100	; 0x64
 800b86c:	d001      	beq.n	800b872 <_printf_i+0x42>
 800b86e:	2969      	cmp	r1, #105	; 0x69
 800b870:	d1f6      	bne.n	800b860 <_printf_i+0x30>
 800b872:	6820      	ldr	r0, [r4, #0]
 800b874:	6813      	ldr	r3, [r2, #0]
 800b876:	0605      	lsls	r5, r0, #24
 800b878:	f103 0104 	add.w	r1, r3, #4
 800b87c:	d52a      	bpl.n	800b8d4 <_printf_i+0xa4>
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	6011      	str	r1, [r2, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	da03      	bge.n	800b88e <_printf_i+0x5e>
 800b886:	222d      	movs	r2, #45	; 0x2d
 800b888:	425b      	negs	r3, r3
 800b88a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b88e:	486f      	ldr	r0, [pc, #444]	; (800ba4c <_printf_i+0x21c>)
 800b890:	220a      	movs	r2, #10
 800b892:	e039      	b.n	800b908 <_printf_i+0xd8>
 800b894:	2973      	cmp	r1, #115	; 0x73
 800b896:	f000 809d 	beq.w	800b9d4 <_printf_i+0x1a4>
 800b89a:	d808      	bhi.n	800b8ae <_printf_i+0x7e>
 800b89c:	296f      	cmp	r1, #111	; 0x6f
 800b89e:	d020      	beq.n	800b8e2 <_printf_i+0xb2>
 800b8a0:	2970      	cmp	r1, #112	; 0x70
 800b8a2:	d1dd      	bne.n	800b860 <_printf_i+0x30>
 800b8a4:	6823      	ldr	r3, [r4, #0]
 800b8a6:	f043 0320 	orr.w	r3, r3, #32
 800b8aa:	6023      	str	r3, [r4, #0]
 800b8ac:	e003      	b.n	800b8b6 <_printf_i+0x86>
 800b8ae:	2975      	cmp	r1, #117	; 0x75
 800b8b0:	d017      	beq.n	800b8e2 <_printf_i+0xb2>
 800b8b2:	2978      	cmp	r1, #120	; 0x78
 800b8b4:	d1d4      	bne.n	800b860 <_printf_i+0x30>
 800b8b6:	2378      	movs	r3, #120	; 0x78
 800b8b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b8bc:	4864      	ldr	r0, [pc, #400]	; (800ba50 <_printf_i+0x220>)
 800b8be:	e055      	b.n	800b96c <_printf_i+0x13c>
 800b8c0:	6813      	ldr	r3, [r2, #0]
 800b8c2:	1d19      	adds	r1, r3, #4
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	6011      	str	r1, [r2, #0]
 800b8c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	e08c      	b.n	800b9ee <_printf_i+0x1be>
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	6011      	str	r1, [r2, #0]
 800b8d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b8dc:	bf18      	it	ne
 800b8de:	b21b      	sxthne	r3, r3
 800b8e0:	e7cf      	b.n	800b882 <_printf_i+0x52>
 800b8e2:	6813      	ldr	r3, [r2, #0]
 800b8e4:	6825      	ldr	r5, [r4, #0]
 800b8e6:	1d18      	adds	r0, r3, #4
 800b8e8:	6010      	str	r0, [r2, #0]
 800b8ea:	0628      	lsls	r0, r5, #24
 800b8ec:	d501      	bpl.n	800b8f2 <_printf_i+0xc2>
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	e002      	b.n	800b8f8 <_printf_i+0xc8>
 800b8f2:	0668      	lsls	r0, r5, #25
 800b8f4:	d5fb      	bpl.n	800b8ee <_printf_i+0xbe>
 800b8f6:	881b      	ldrh	r3, [r3, #0]
 800b8f8:	4854      	ldr	r0, [pc, #336]	; (800ba4c <_printf_i+0x21c>)
 800b8fa:	296f      	cmp	r1, #111	; 0x6f
 800b8fc:	bf14      	ite	ne
 800b8fe:	220a      	movne	r2, #10
 800b900:	2208      	moveq	r2, #8
 800b902:	2100      	movs	r1, #0
 800b904:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b908:	6865      	ldr	r5, [r4, #4]
 800b90a:	60a5      	str	r5, [r4, #8]
 800b90c:	2d00      	cmp	r5, #0
 800b90e:	f2c0 8095 	blt.w	800ba3c <_printf_i+0x20c>
 800b912:	6821      	ldr	r1, [r4, #0]
 800b914:	f021 0104 	bic.w	r1, r1, #4
 800b918:	6021      	str	r1, [r4, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d13d      	bne.n	800b99a <_printf_i+0x16a>
 800b91e:	2d00      	cmp	r5, #0
 800b920:	f040 808e 	bne.w	800ba40 <_printf_i+0x210>
 800b924:	4665      	mov	r5, ip
 800b926:	2a08      	cmp	r2, #8
 800b928:	d10b      	bne.n	800b942 <_printf_i+0x112>
 800b92a:	6823      	ldr	r3, [r4, #0]
 800b92c:	07db      	lsls	r3, r3, #31
 800b92e:	d508      	bpl.n	800b942 <_printf_i+0x112>
 800b930:	6923      	ldr	r3, [r4, #16]
 800b932:	6862      	ldr	r2, [r4, #4]
 800b934:	429a      	cmp	r2, r3
 800b936:	bfde      	ittt	le
 800b938:	2330      	movle	r3, #48	; 0x30
 800b93a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b93e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b942:	ebac 0305 	sub.w	r3, ip, r5
 800b946:	6123      	str	r3, [r4, #16]
 800b948:	f8cd 8000 	str.w	r8, [sp]
 800b94c:	463b      	mov	r3, r7
 800b94e:	aa03      	add	r2, sp, #12
 800b950:	4621      	mov	r1, r4
 800b952:	4630      	mov	r0, r6
 800b954:	f7ff fef6 	bl	800b744 <_printf_common>
 800b958:	3001      	adds	r0, #1
 800b95a:	d14d      	bne.n	800b9f8 <_printf_i+0x1c8>
 800b95c:	f04f 30ff 	mov.w	r0, #4294967295
 800b960:	b005      	add	sp, #20
 800b962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b966:	4839      	ldr	r0, [pc, #228]	; (800ba4c <_printf_i+0x21c>)
 800b968:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b96c:	6813      	ldr	r3, [r2, #0]
 800b96e:	6821      	ldr	r1, [r4, #0]
 800b970:	1d1d      	adds	r5, r3, #4
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	6015      	str	r5, [r2, #0]
 800b976:	060a      	lsls	r2, r1, #24
 800b978:	d50b      	bpl.n	800b992 <_printf_i+0x162>
 800b97a:	07ca      	lsls	r2, r1, #31
 800b97c:	bf44      	itt	mi
 800b97e:	f041 0120 	orrmi.w	r1, r1, #32
 800b982:	6021      	strmi	r1, [r4, #0]
 800b984:	b91b      	cbnz	r3, 800b98e <_printf_i+0x15e>
 800b986:	6822      	ldr	r2, [r4, #0]
 800b988:	f022 0220 	bic.w	r2, r2, #32
 800b98c:	6022      	str	r2, [r4, #0]
 800b98e:	2210      	movs	r2, #16
 800b990:	e7b7      	b.n	800b902 <_printf_i+0xd2>
 800b992:	064d      	lsls	r5, r1, #25
 800b994:	bf48      	it	mi
 800b996:	b29b      	uxthmi	r3, r3
 800b998:	e7ef      	b.n	800b97a <_printf_i+0x14a>
 800b99a:	4665      	mov	r5, ip
 800b99c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b9a0:	fb02 3311 	mls	r3, r2, r1, r3
 800b9a4:	5cc3      	ldrb	r3, [r0, r3]
 800b9a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	2900      	cmp	r1, #0
 800b9ae:	d1f5      	bne.n	800b99c <_printf_i+0x16c>
 800b9b0:	e7b9      	b.n	800b926 <_printf_i+0xf6>
 800b9b2:	6813      	ldr	r3, [r2, #0]
 800b9b4:	6825      	ldr	r5, [r4, #0]
 800b9b6:	6961      	ldr	r1, [r4, #20]
 800b9b8:	1d18      	adds	r0, r3, #4
 800b9ba:	6010      	str	r0, [r2, #0]
 800b9bc:	0628      	lsls	r0, r5, #24
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	d501      	bpl.n	800b9c6 <_printf_i+0x196>
 800b9c2:	6019      	str	r1, [r3, #0]
 800b9c4:	e002      	b.n	800b9cc <_printf_i+0x19c>
 800b9c6:	066a      	lsls	r2, r5, #25
 800b9c8:	d5fb      	bpl.n	800b9c2 <_printf_i+0x192>
 800b9ca:	8019      	strh	r1, [r3, #0]
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	6123      	str	r3, [r4, #16]
 800b9d0:	4665      	mov	r5, ip
 800b9d2:	e7b9      	b.n	800b948 <_printf_i+0x118>
 800b9d4:	6813      	ldr	r3, [r2, #0]
 800b9d6:	1d19      	adds	r1, r3, #4
 800b9d8:	6011      	str	r1, [r2, #0]
 800b9da:	681d      	ldr	r5, [r3, #0]
 800b9dc:	6862      	ldr	r2, [r4, #4]
 800b9de:	2100      	movs	r1, #0
 800b9e0:	4628      	mov	r0, r5
 800b9e2:	f7f4 fc05 	bl	80001f0 <memchr>
 800b9e6:	b108      	cbz	r0, 800b9ec <_printf_i+0x1bc>
 800b9e8:	1b40      	subs	r0, r0, r5
 800b9ea:	6060      	str	r0, [r4, #4]
 800b9ec:	6863      	ldr	r3, [r4, #4]
 800b9ee:	6123      	str	r3, [r4, #16]
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9f6:	e7a7      	b.n	800b948 <_printf_i+0x118>
 800b9f8:	6923      	ldr	r3, [r4, #16]
 800b9fa:	462a      	mov	r2, r5
 800b9fc:	4639      	mov	r1, r7
 800b9fe:	4630      	mov	r0, r6
 800ba00:	47c0      	blx	r8
 800ba02:	3001      	adds	r0, #1
 800ba04:	d0aa      	beq.n	800b95c <_printf_i+0x12c>
 800ba06:	6823      	ldr	r3, [r4, #0]
 800ba08:	079b      	lsls	r3, r3, #30
 800ba0a:	d413      	bmi.n	800ba34 <_printf_i+0x204>
 800ba0c:	68e0      	ldr	r0, [r4, #12]
 800ba0e:	9b03      	ldr	r3, [sp, #12]
 800ba10:	4298      	cmp	r0, r3
 800ba12:	bfb8      	it	lt
 800ba14:	4618      	movlt	r0, r3
 800ba16:	e7a3      	b.n	800b960 <_printf_i+0x130>
 800ba18:	2301      	movs	r3, #1
 800ba1a:	464a      	mov	r2, r9
 800ba1c:	4639      	mov	r1, r7
 800ba1e:	4630      	mov	r0, r6
 800ba20:	47c0      	blx	r8
 800ba22:	3001      	adds	r0, #1
 800ba24:	d09a      	beq.n	800b95c <_printf_i+0x12c>
 800ba26:	3501      	adds	r5, #1
 800ba28:	68e3      	ldr	r3, [r4, #12]
 800ba2a:	9a03      	ldr	r2, [sp, #12]
 800ba2c:	1a9b      	subs	r3, r3, r2
 800ba2e:	42ab      	cmp	r3, r5
 800ba30:	dcf2      	bgt.n	800ba18 <_printf_i+0x1e8>
 800ba32:	e7eb      	b.n	800ba0c <_printf_i+0x1dc>
 800ba34:	2500      	movs	r5, #0
 800ba36:	f104 0919 	add.w	r9, r4, #25
 800ba3a:	e7f5      	b.n	800ba28 <_printf_i+0x1f8>
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d1ac      	bne.n	800b99a <_printf_i+0x16a>
 800ba40:	7803      	ldrb	r3, [r0, #0]
 800ba42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba4a:	e76c      	b.n	800b926 <_printf_i+0xf6>
 800ba4c:	0800c3b5 	.word	0x0800c3b5
 800ba50:	0800c3c6 	.word	0x0800c3c6

0800ba54 <_sbrk_r>:
 800ba54:	b538      	push	{r3, r4, r5, lr}
 800ba56:	4c06      	ldr	r4, [pc, #24]	; (800ba70 <_sbrk_r+0x1c>)
 800ba58:	2300      	movs	r3, #0
 800ba5a:	4605      	mov	r5, r0
 800ba5c:	4608      	mov	r0, r1
 800ba5e:	6023      	str	r3, [r4, #0]
 800ba60:	f7fe f9c0 	bl	8009de4 <_sbrk>
 800ba64:	1c43      	adds	r3, r0, #1
 800ba66:	d102      	bne.n	800ba6e <_sbrk_r+0x1a>
 800ba68:	6823      	ldr	r3, [r4, #0]
 800ba6a:	b103      	cbz	r3, 800ba6e <_sbrk_r+0x1a>
 800ba6c:	602b      	str	r3, [r5, #0]
 800ba6e:	bd38      	pop	{r3, r4, r5, pc}
 800ba70:	200053b8 	.word	0x200053b8

0800ba74 <__sread>:
 800ba74:	b510      	push	{r4, lr}
 800ba76:	460c      	mov	r4, r1
 800ba78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba7c:	f000 f8d6 	bl	800bc2c <_read_r>
 800ba80:	2800      	cmp	r0, #0
 800ba82:	bfab      	itete	ge
 800ba84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba86:	89a3      	ldrhlt	r3, [r4, #12]
 800ba88:	181b      	addge	r3, r3, r0
 800ba8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba8e:	bfac      	ite	ge
 800ba90:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba92:	81a3      	strhlt	r3, [r4, #12]
 800ba94:	bd10      	pop	{r4, pc}

0800ba96 <__swrite>:
 800ba96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba9a:	461f      	mov	r7, r3
 800ba9c:	898b      	ldrh	r3, [r1, #12]
 800ba9e:	05db      	lsls	r3, r3, #23
 800baa0:	4605      	mov	r5, r0
 800baa2:	460c      	mov	r4, r1
 800baa4:	4616      	mov	r6, r2
 800baa6:	d505      	bpl.n	800bab4 <__swrite+0x1e>
 800baa8:	2302      	movs	r3, #2
 800baaa:	2200      	movs	r2, #0
 800baac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bab0:	f000 f868 	bl	800bb84 <_lseek_r>
 800bab4:	89a3      	ldrh	r3, [r4, #12]
 800bab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800babe:	81a3      	strh	r3, [r4, #12]
 800bac0:	4632      	mov	r2, r6
 800bac2:	463b      	mov	r3, r7
 800bac4:	4628      	mov	r0, r5
 800bac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baca:	f000 b817 	b.w	800bafc <_write_r>

0800bace <__sseek>:
 800bace:	b510      	push	{r4, lr}
 800bad0:	460c      	mov	r4, r1
 800bad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bad6:	f000 f855 	bl	800bb84 <_lseek_r>
 800bada:	1c43      	adds	r3, r0, #1
 800badc:	89a3      	ldrh	r3, [r4, #12]
 800bade:	bf15      	itete	ne
 800bae0:	6560      	strne	r0, [r4, #84]	; 0x54
 800bae2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bae6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800baea:	81a3      	strheq	r3, [r4, #12]
 800baec:	bf18      	it	ne
 800baee:	81a3      	strhne	r3, [r4, #12]
 800baf0:	bd10      	pop	{r4, pc}

0800baf2 <__sclose>:
 800baf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baf6:	f000 b813 	b.w	800bb20 <_close_r>
	...

0800bafc <_write_r>:
 800bafc:	b538      	push	{r3, r4, r5, lr}
 800bafe:	4c07      	ldr	r4, [pc, #28]	; (800bb1c <_write_r+0x20>)
 800bb00:	4605      	mov	r5, r0
 800bb02:	4608      	mov	r0, r1
 800bb04:	4611      	mov	r1, r2
 800bb06:	2200      	movs	r2, #0
 800bb08:	6022      	str	r2, [r4, #0]
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	f7fe f919 	bl	8009d42 <_write>
 800bb10:	1c43      	adds	r3, r0, #1
 800bb12:	d102      	bne.n	800bb1a <_write_r+0x1e>
 800bb14:	6823      	ldr	r3, [r4, #0]
 800bb16:	b103      	cbz	r3, 800bb1a <_write_r+0x1e>
 800bb18:	602b      	str	r3, [r5, #0]
 800bb1a:	bd38      	pop	{r3, r4, r5, pc}
 800bb1c:	200053b8 	.word	0x200053b8

0800bb20 <_close_r>:
 800bb20:	b538      	push	{r3, r4, r5, lr}
 800bb22:	4c06      	ldr	r4, [pc, #24]	; (800bb3c <_close_r+0x1c>)
 800bb24:	2300      	movs	r3, #0
 800bb26:	4605      	mov	r5, r0
 800bb28:	4608      	mov	r0, r1
 800bb2a:	6023      	str	r3, [r4, #0]
 800bb2c:	f7fe f925 	bl	8009d7a <_close>
 800bb30:	1c43      	adds	r3, r0, #1
 800bb32:	d102      	bne.n	800bb3a <_close_r+0x1a>
 800bb34:	6823      	ldr	r3, [r4, #0]
 800bb36:	b103      	cbz	r3, 800bb3a <_close_r+0x1a>
 800bb38:	602b      	str	r3, [r5, #0]
 800bb3a:	bd38      	pop	{r3, r4, r5, pc}
 800bb3c:	200053b8 	.word	0x200053b8

0800bb40 <_fstat_r>:
 800bb40:	b538      	push	{r3, r4, r5, lr}
 800bb42:	4c07      	ldr	r4, [pc, #28]	; (800bb60 <_fstat_r+0x20>)
 800bb44:	2300      	movs	r3, #0
 800bb46:	4605      	mov	r5, r0
 800bb48:	4608      	mov	r0, r1
 800bb4a:	4611      	mov	r1, r2
 800bb4c:	6023      	str	r3, [r4, #0]
 800bb4e:	f7fe f920 	bl	8009d92 <_fstat>
 800bb52:	1c43      	adds	r3, r0, #1
 800bb54:	d102      	bne.n	800bb5c <_fstat_r+0x1c>
 800bb56:	6823      	ldr	r3, [r4, #0]
 800bb58:	b103      	cbz	r3, 800bb5c <_fstat_r+0x1c>
 800bb5a:	602b      	str	r3, [r5, #0]
 800bb5c:	bd38      	pop	{r3, r4, r5, pc}
 800bb5e:	bf00      	nop
 800bb60:	200053b8 	.word	0x200053b8

0800bb64 <_isatty_r>:
 800bb64:	b538      	push	{r3, r4, r5, lr}
 800bb66:	4c06      	ldr	r4, [pc, #24]	; (800bb80 <_isatty_r+0x1c>)
 800bb68:	2300      	movs	r3, #0
 800bb6a:	4605      	mov	r5, r0
 800bb6c:	4608      	mov	r0, r1
 800bb6e:	6023      	str	r3, [r4, #0]
 800bb70:	f7fe f91f 	bl	8009db2 <_isatty>
 800bb74:	1c43      	adds	r3, r0, #1
 800bb76:	d102      	bne.n	800bb7e <_isatty_r+0x1a>
 800bb78:	6823      	ldr	r3, [r4, #0]
 800bb7a:	b103      	cbz	r3, 800bb7e <_isatty_r+0x1a>
 800bb7c:	602b      	str	r3, [r5, #0]
 800bb7e:	bd38      	pop	{r3, r4, r5, pc}
 800bb80:	200053b8 	.word	0x200053b8

0800bb84 <_lseek_r>:
 800bb84:	b538      	push	{r3, r4, r5, lr}
 800bb86:	4c07      	ldr	r4, [pc, #28]	; (800bba4 <_lseek_r+0x20>)
 800bb88:	4605      	mov	r5, r0
 800bb8a:	4608      	mov	r0, r1
 800bb8c:	4611      	mov	r1, r2
 800bb8e:	2200      	movs	r2, #0
 800bb90:	6022      	str	r2, [r4, #0]
 800bb92:	461a      	mov	r2, r3
 800bb94:	f7fe f918 	bl	8009dc8 <_lseek>
 800bb98:	1c43      	adds	r3, r0, #1
 800bb9a:	d102      	bne.n	800bba2 <_lseek_r+0x1e>
 800bb9c:	6823      	ldr	r3, [r4, #0]
 800bb9e:	b103      	cbz	r3, 800bba2 <_lseek_r+0x1e>
 800bba0:	602b      	str	r3, [r5, #0]
 800bba2:	bd38      	pop	{r3, r4, r5, pc}
 800bba4:	200053b8 	.word	0x200053b8

0800bba8 <memmove>:
 800bba8:	4288      	cmp	r0, r1
 800bbaa:	b510      	push	{r4, lr}
 800bbac:	eb01 0302 	add.w	r3, r1, r2
 800bbb0:	d807      	bhi.n	800bbc2 <memmove+0x1a>
 800bbb2:	1e42      	subs	r2, r0, #1
 800bbb4:	4299      	cmp	r1, r3
 800bbb6:	d00a      	beq.n	800bbce <memmove+0x26>
 800bbb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbbc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bbc0:	e7f8      	b.n	800bbb4 <memmove+0xc>
 800bbc2:	4283      	cmp	r3, r0
 800bbc4:	d9f5      	bls.n	800bbb2 <memmove+0xa>
 800bbc6:	1881      	adds	r1, r0, r2
 800bbc8:	1ad2      	subs	r2, r2, r3
 800bbca:	42d3      	cmn	r3, r2
 800bbcc:	d100      	bne.n	800bbd0 <memmove+0x28>
 800bbce:	bd10      	pop	{r4, pc}
 800bbd0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbd4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bbd8:	e7f7      	b.n	800bbca <memmove+0x22>

0800bbda <__malloc_lock>:
 800bbda:	4770      	bx	lr

0800bbdc <__malloc_unlock>:
 800bbdc:	4770      	bx	lr

0800bbde <_realloc_r>:
 800bbde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe0:	4607      	mov	r7, r0
 800bbe2:	4614      	mov	r4, r2
 800bbe4:	460e      	mov	r6, r1
 800bbe6:	b921      	cbnz	r1, 800bbf2 <_realloc_r+0x14>
 800bbe8:	4611      	mov	r1, r2
 800bbea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bbee:	f7ff bbfd 	b.w	800b3ec <_malloc_r>
 800bbf2:	b922      	cbnz	r2, 800bbfe <_realloc_r+0x20>
 800bbf4:	f7ff fbac 	bl	800b350 <_free_r>
 800bbf8:	4625      	mov	r5, r4
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbfe:	f000 f827 	bl	800bc50 <_malloc_usable_size_r>
 800bc02:	42a0      	cmp	r0, r4
 800bc04:	d20f      	bcs.n	800bc26 <_realloc_r+0x48>
 800bc06:	4621      	mov	r1, r4
 800bc08:	4638      	mov	r0, r7
 800bc0a:	f7ff fbef 	bl	800b3ec <_malloc_r>
 800bc0e:	4605      	mov	r5, r0
 800bc10:	2800      	cmp	r0, #0
 800bc12:	d0f2      	beq.n	800bbfa <_realloc_r+0x1c>
 800bc14:	4631      	mov	r1, r6
 800bc16:	4622      	mov	r2, r4
 800bc18:	f7ff f83e 	bl	800ac98 <memcpy>
 800bc1c:	4631      	mov	r1, r6
 800bc1e:	4638      	mov	r0, r7
 800bc20:	f7ff fb96 	bl	800b350 <_free_r>
 800bc24:	e7e9      	b.n	800bbfa <_realloc_r+0x1c>
 800bc26:	4635      	mov	r5, r6
 800bc28:	e7e7      	b.n	800bbfa <_realloc_r+0x1c>
	...

0800bc2c <_read_r>:
 800bc2c:	b538      	push	{r3, r4, r5, lr}
 800bc2e:	4c07      	ldr	r4, [pc, #28]	; (800bc4c <_read_r+0x20>)
 800bc30:	4605      	mov	r5, r0
 800bc32:	4608      	mov	r0, r1
 800bc34:	4611      	mov	r1, r2
 800bc36:	2200      	movs	r2, #0
 800bc38:	6022      	str	r2, [r4, #0]
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	f7fe f864 	bl	8009d08 <_read>
 800bc40:	1c43      	adds	r3, r0, #1
 800bc42:	d102      	bne.n	800bc4a <_read_r+0x1e>
 800bc44:	6823      	ldr	r3, [r4, #0]
 800bc46:	b103      	cbz	r3, 800bc4a <_read_r+0x1e>
 800bc48:	602b      	str	r3, [r5, #0]
 800bc4a:	bd38      	pop	{r3, r4, r5, pc}
 800bc4c:	200053b8 	.word	0x200053b8

0800bc50 <_malloc_usable_size_r>:
 800bc50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc54:	1f18      	subs	r0, r3, #4
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	bfbc      	itt	lt
 800bc5a:	580b      	ldrlt	r3, [r1, r0]
 800bc5c:	18c0      	addlt	r0, r0, r3
 800bc5e:	4770      	bx	lr

0800bc60 <_init>:
 800bc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc62:	bf00      	nop
 800bc64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc66:	bc08      	pop	{r3}
 800bc68:	469e      	mov	lr, r3
 800bc6a:	4770      	bx	lr

0800bc6c <_fini>:
 800bc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc6e:	bf00      	nop
 800bc70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc72:	bc08      	pop	{r3}
 800bc74:	469e      	mov	lr, r3
 800bc76:	4770      	bx	lr
